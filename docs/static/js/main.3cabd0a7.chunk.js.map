{"version":3,"sources":["utils/colLookup.js","utils/dataFunction.js","utils/findDates.js","utils/geojsonArrayBuffer.js","utils/getArrayCSV.js","utils/getCartogramValues.js","utils/getCartogramCenter.js","utils/getCols.js","utils/getCSV.js","utils/getDataForBins.js","utils/getDataForCharts.js","utils/getDataForLisa.js","utils/getGeoidIndex.js","utils/getJson.js","utils/getJsonPure.js","utils/getCurrentWuuid.js","utils/getLisaValues.js","utils/getParseCSV.js","config/index.js","utils/getURLParams.js","utils/getVarId.js","utils/loadJson.js","utils/mapFunction.js","utils/mergeData.js","actions/index.js","components/bottomPanel.js","components/tooltip.js","components/twoWeekLineChart.js","config/svg.js","components/dataPanel.js","styled_components/index.js","components/slider.js","components/dock.js","components/draggable.js","components/infoBox.js","components/binsList.js","components/legend.js","components/mainLineChart.js","components/map.js","components/mapTooltipContent.js","components/navbar.js","components/notificationBox.js","components/variablePanel.js","components/tooltipPopper.js","components/preloader.js","components/scaleable.js","components/topPanel.js","App.js","constants/defaults.js","reducers/index.js","registerServiceWorker.js","index.js"],"names":["colLookup","columns","dataset","table","property","indexOf","dataFn","numeratorData","denominatorData","dataParams","nProperty","nIndex","nRange","dProperty","dIndex","dRange","nType","dType","scale","undefined","findDates","data","i","length","Date","parse","slice","geojsonArrayBuffer","a","arrayBuffer","getArrayCSV","url","arrToInt","arr","map","d","fetch","then","response","ok","text","Promise","reject","status","split","row","tempData","getCartogramValues","gda_proxy","cartogramData","cartogram","tempObj","value","getCartogramCenter","x","y","keys","Object","dataLength","getColumns","names","rtn","d3","getCSV","getDataForBins","tableData","numerator","denominator","n","tempIndex","tempDIndex","unshift","getDataForCharts","startIndex","dates","features","j","sum","count","date","dailyNew","push","getDataForLisa","order","t0","performance","now","tempDict","tempNIndex","properties","GEOID","console","log","getGeoidIndex","geoidOrder","indexOrder","getJson","getJsonPure","responseFromJson","clone","abResponse","ab","getCurrentWuuid","selectedDataset","w","CreateQueenWeights","get_uid","getLisaValues","geoids","all_zeros","clusters","sig","lisa","local_moran","map_uuid","w_uuid","parseVecDouble","significances","joinCol","accumulate","selectedJoinColumn","forEach","colOption","hasOwnProperty","indexStart","vals","values","tempArr","getParseCSV","colorScales","fixedScales","bins","breaks","Math","pow","colors","dataPresets","plainName","geojson","csvs","joinCols","tableNames","tooltipInfo","Choropleth","NaturalBreaksFixed","NaturalBreaks","BoxMap","Hotspot","LocalMoran","NotSig","HighHigh","LowLow","HighLow","LowHigh","PovChldPrc","IncRt","MedianHouseholdIncome","FdInsPrc","UnEmplyPrc","UnInPrc","PrmPhysRt","PrevHospRt","RsiSgrBlckRt","SvrHsngPrbRt","Over65YearsPrc","AdObPrc","AdDibPrc","SmkPrc","ExcDrkPrc","DrOverdMrtRt","LfExpRt","SlfHlthPrc","SeverityIndex","PredictedDeaths","PredictedDeathsInterval","healthfactor","healthcontext","healthlife","Hypersegregated","href","target","rel","BlackBelt","TestingCapacity","USCongress","legacyVariableOrder","legacyOverlayOrder","legacyResourceOrder","legacySourceOrder","getURLParams","params","URLmapParams","URLcurrentData","URLcurrentVariable","URLviewState","overlay","resource","variable","method","mapType","source","coords","round","latitude","longitude","zoom","vizType","getVarId","currentData","loadJson","ReadGeojsonMap","json","geoidIndex","mapFn","val","maptype","includes","mergeData","featureCollection","featureCollectionJoinCol","joinData","joinDataNames","joinDataCol","dataDict","colNumCheck","parseInt","Number","isInteger","cols","merged","merge","setCurrentData","type","payload","setDate","setVariableParams","setMapParams","setVariableName","name","setAnchorEl","anchorEl","setPanelState","setNotification","info","BottomDrawer","styled","div","BottomPanel","useDispatch","panelState","useSelector","state","useState","bottomMargin","setBottomMargin","window","addEventListener","document","querySelector","offsetHeight","getChartHeight","bottom","chart","TooltipContainer","button","process","Tooltip","props","dispatch","id","onMouseEnter","event","currentTarget","onMouseLeave","LineContainer","CustomizedDot","cx","cy","index","color","angle","width","height","fill","viewBox","points","transform","TwoWeekLineChart","colorScale","domain","range","schema","delta","lineColor","start","hide","dataKey","stroke","strokeWidth","isAnimationActive","dot","pctChange","calcAngle","compact","expand","settings","className","r","report","rx","verticalGrip","DataPanelContainer","otherPanels","ReportWrapper","ReportContainer","ReportSection","span","BigNumber","h2","NumberChartContainer","ExpandButtons","ButtonGroup","ResizeButton","DataPanel","sidebarData","cases","deaths","predictions","chr_health_factors","chr_life","chr_health_context","testing_ccpt","testing_tcap","testing_wk_pos","testing","expanded","setExpanded","setWidth","colCount","setColCount","currXPos","setCurrXPos","parsePredictedDate","list","listener","e","prevWidth","innerWidth","screenX","floor","touchListener","prev","targetTouches","clientX","removeListener","removeEventListener","removeTouchListener","variables","Button","onClick","style","NAME","state_name","population","toLocaleString","toFixed","beds","criteria","onMouseDown","onTouchStart","parentNode","left","zIndex","StyledDropDown","FormControl","component","StyledDropDownNoLabel","SwitchContainer","Grid","SliderContainer","PlayPauseButton","LineSlider","Slider","RangeSlider","DateTitle","h3","InitialDate","p","EndDate","DateSlider","startDateIndex","mapParams","currentVariable","timerId","setTimerId","customRange","setCustomRange","rangeSelectVal","setRangeSelectVal","valuetext","display","container","spacing","padding","toLocaleDateString","year","month","day","item","xs","rate","interval","setInterval","o","clearInterval","handlePlayPause","onChange","newValue","tempRange","min","step","max","valueLabelDisplay","rIndex","rRange","getAriaValueText","valueLabelFormat","aria-labelledby","InputLabel","htmlFor","Select","displayEmpty","inputProps","MenuItem","float","Switch","checked","binMode","DockContainer","DockButton","isActive","Dock","handlePanelButton","panel","title","lineChart","tutorial","DragContainer","DragButton","CollapseButton","Draggable","open","defaultX","X","setX","defaultY","Y","setY","isDragging","setIsDragging","movementX","prevHeight","movementY","clientY","useEffect","top","z","content","InfoContainer","active","PanelContainer","position","panelCount","Panel","DotsContainer","Dot","Arrow","svg","InfoBox","panelOpen","panelPosition","setPanelPosition","panels","subtitle","dangerouslySetInnerHTML","__html","BinsList","splice","random","LegendContainer","LegendTitle","BinLabels","binLength","firstBinZero","BinBars","Legend","fixedScale","backgroundColor","ChartContainer","StyledSwitch","ChartTitle","millionFormatter","thousandFormatter","CustomTick","labelFormatter","getStartDate","getEndDate","CustomTooltip","background","borderRadius","boxShadow","textShadow","fontWeight","MainLineChart","chartData","logChart","setLogChart","chartSetDate","activeTooltipIndex","handleChange","margin","right","tick","fontSize","fontFamily","yAxisId","allowDataOverflow","ticks","marginTop","orientation","x1","x2","fillOpacity","bounds","fitBounds","innerHeight","ICON_MAPPING","hospital","clinic","MAPBOX_ACCESS_TOKEN","defaultMapStyle","fromJS","MAP_STYLE","MapContainer","HoverDiv","NavInlineButton","shareNotification","MapGeocoder","Geocoder","MapButtonContainer","infoPanel","ShareURL","input","view","GlobeView","controller","resolution","MapView","repeat","Map","storedData","storedGeojson","storedLisaData","storedCartogramData","urlParams","hoverInfo","setHoverInfo","highlightGeog","setHighlightGeog","mapStyle","setMapStyle","currLisaData","setCurrLisaData","lat","lon","bearing","pitch","viewState","setViewState","setCartogramData","currVarId","setCurrVarId","hospitalData","setHospitalData","clinicData","setClinicData","storedCenter","setStoredCenter","shared","setShared","SHARED_GEOID","localStorage","getItem","SHARED_VIEW","JSON","prevView","transitionDuration","transitionInterpolator","FlyToInterpolator","tempLayers","defaultLayers","get","layer","setIn","set","center","roundedCenter","mapRef","useRef","Layers","GeoJsonLayer","visible","pickable","stroked","filled","wireframe","extruded","opacity","material","getFillColor","f","GetFillColor","getElevation","scale3D","GetHeight","updateTriggers","onHover","object","setChartData","setItem","stringify","current","getLineColor","lineWidthScale","getLineWidth","lineWidthMinPixels","lineWidthMaxPixels","IconLayer","iconAtlas","iconMapping","getIcon","getPosition","Longitude","Latitude","sizeUnits","getSize","sizeMinPixels","sizeMaxPixels","PolygonLayer","getPolygon","ScatterplotLayer","getRadius","radius","find","TextLayer","getTextAnchor","getAlignmentBaseline","maxWidth","wordBreak","getText","handleShare","shareData","location","navigator","share","copyText","select","setSelectionRange","execCommand","setTimeout","initialViewState","layers","views","onViewPortChange","reuseMaps","ref","preventStyleDiffing","mapboxApiAccessToken","onViewportChange","onLoad","loaded","positionOptions","enableHighAccuracy","trackUserLocation","onGeolocate","handleGeolocate","marginBottom","pointerEvents","MapTooltipContent","caseN","deathN","testingN","Address","Address_2","City","State","Zipcode","testing_status","address","city","st_abbr","phone","NavItems","ul","NavBar","src","paddingRight","Notification","CloseTutorial","NotificationBox","notification","VariablePanelContainer","StyledButtonGroup","TwoUp","ControlsContainer","ListSubheader","VariablePanel","getGzipAndCentroids","gzipUrl","centroidsUrl","all","getGzipData","centroids","flows","storedMobilityData","PresetVariables","CountyVariables","StateVariables","var","handleVariable","tempParams","customScale","handleVizTypeButton","newDataSet","disabled","FormLabel","RadioGroup","aria-label","nBins","FormControlLabel","control","Radio","label","data-val","TooltipContentDiv","Popper","Popover","Boolean","placement","disablePortal","modifiers","flip","enabled","preventOverflow","boundariesElement","PreloaderContainer","Preloader","isHidden","setIsHidden","alt","notScaleable","Scaleable","defaultWidth","defaultHeight","setHeight","currXYPos","setCurrXYPos","minHeight","minWidth","TopDrawer","TopPanel","App","defaultXLong","defaultWidthLong","mapLoaded","set_gda_proxy","loadData","csvPromises","csv","result","ColNames","tempDates","binData","nb","custom_breaks","load","storeData","columnNames","storeGeojson","currDate","variableParams","binIndex","updateBins","paramsDict","queryString","search","URLSearchParams","key","decodeURI","jsgeoda","geoda","newGeoda","dateIndex","tempId","storeCartogramData","INITIAL_STATE","geodaProxy","storedCSV","currDateIndex","currentMethod","currentOverlay","currentResource","activeGeoid","storedRange","currentGeoid","reducer","action","dataObj","colDataObj","geoDataObj","mapParamsDataObj","datesDataObj","variableParamsDataObj","panelsDataObj","variableParamsExDataObj","panelsExDataObj","binsVariableParams","binsMapParams","geoid","obj","geojsonObj","lisaObj","cartoObj","centroidsObj","proxy","datesObj","currentDataFn","fn","colObj","binsObj","use3D","dateObj","paramObj","storedIndex","mapParamObj","panelsObj","urlMapParamsObj","isLocalhost","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","catch","error","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","WebFont","google","families","ReactDOM","render","getElementById","URL","origin","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3cabd0a7.chunk.js","sourcesContent":["const colLookup = (columns, dataset, table, property) => {\r\n    try {\r\n        return columns[dataset][table].indexOf(property); \r\n    } catch {\r\n        return null;\r\n    }\r\n}\r\nexport default colLookup;","// branchless variant\r\n// const dataFn = (numeratorData, numeratorProperty, index, range, denominatorData, denominatorProperty, denominatorIndex, denominatorRange, scale)  => {\r\n\r\n//     return (\r\n//       (\r\n//         (\r\n//           (\r\n//             (numeratorData[index]||numeratorData[numeratorProperty])\r\n//             -\r\n//             ((range!==null)&&(numeratorData[index-range]))\r\n//           )\r\n          \r\n//           /\r\n//           (range+(range===null))\r\n//         )\r\n//       /\r\n//         (\r\n//           (\r\n//             (\r\n//               (denominatorData[denominatorIndex]||denominatorData[denominatorProperty])\r\n//               -\r\n//               ((denominatorRange!==null)&&(denominatorData[denominatorIndex-denominatorRange]))\r\n//             )\r\n//             /\r\n//             (denominatorRange+(denominatorRange===null))\r\n//           )\r\n//           ||\r\n//             (denominatorData[denominatorProperty])\r\n//           || \r\n//           1\r\n//         )\r\n//       )\r\n//       *\r\n//       scale\r\n//     )\r\n// }\r\n\r\n// export default dataFn;\r\n\r\nconst dataFn = (numeratorData, denominatorData, dataParams)  => {\r\n  const { \r\n    nProperty, nIndex, nRange,\r\n    dProperty, dIndex, dRange, \r\n    nType, dType,\r\n    scale\r\n  } = dataParams;\r\n\r\n  if (numeratorData === undefined) {\r\n    return 0;\r\n  } else if (nType ==='time-series' && dType === 'time-series') {\r\n    if (nRange === null & dRange === null) {\r\n      return (\r\n        (numeratorData[nIndex])\r\n        /\r\n        (denominatorData[dIndex])\r\n        *scale   \r\n      )\r\n\r\n    } else {\r\n      return (\r\n        ((numeratorData[nIndex]-numeratorData[nIndex-nRange])/nRange)\r\n        /\r\n        ((denominatorData[dIndex]-denominatorData[dIndex-dRange])/dRange)\r\n        *scale   \r\n      )\r\n    }\r\n  } else if (dProperty===null&&nRange===null){ // whole count or number -- no range, no normalization\r\n    return (numeratorData[nProperty]||numeratorData[nIndex])*scale\r\n  } else if (dProperty===null&&nRange!==null){ // range number, daily or weekly count -- no normalization\r\n    return (numeratorData[nIndex]-numeratorData[nIndex-nRange])/nRange*scale\r\n  } else if (dProperty!==null&&nRange===null){ // whole count or number normalized -- no range\r\n    return (numeratorData[nProperty]||numeratorData[nIndex])/(denominatorData[dProperty]||denominatorData[dIndex])*scale\r\n  } else if (dProperty!==null&&nRange!==null&&dRange===null){ // range number, daily or weekly count, normalized to a single value\r\n    return (\r\n      (numeratorData[nIndex]-numeratorData[nIndex-nRange])/nRange)/(denominatorData[dProperty]||denominatorData[dIndex]\r\n        )*scale\r\n  // } else if (dProperty!==null&&nRange!==null&&dRange!==null){ // range number, daily or weekly count, normalized to a range number, daily or weekly count\r\n  //   console.log('getting the right col')\r\n  //   return (\r\n  //     (numeratorData[nIndex]-numeratorData[nIndex-nRange])/nRange)\r\n  //     /\r\n  //     ((denominatorData[dIndex]-denominatorData[dIndex-dIndex])/dIndex)\r\n  //     *scale\r\n  } else {      \r\n    return 0;\r\n  }\r\n}\r\n\r\nexport default dataFn;","const findDates = (data) => {\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (Date.parse(data[i])) return [data.slice(i,),i]\r\n    }\r\n    return;\r\n}\r\n\r\nexport default findDates","const geojsonArrayBuffer = async (data) => {\r\n    const arrayBuffer = await data.arrayBuffer()\r\n\r\n    return arrayBuffer;\r\n}\r\n\r\nexport default geojsonArrayBuffer;","const getArrayCSV = async (url) => {\r\n    const arrToInt = (arr) => arr.map(d => +d);\r\n    const tempData = await fetch(url).then(response => {\r\n            return response.ok ? response.text() : Promise.reject(response.status);\r\n        }).then(data => {\r\n            let rows = data.split(\"\\n\");\r\n            return rows.map(row => arrToInt(row.split(\",\")))\r\n        })\r\n\r\n    return tempData;\r\n}\r\n\r\nexport default getArrayCSV","const getCartogramValues = (gda_proxy, dataset, data ) => {\r\n    let cartogramData = gda_proxy.cartogram(dataset, data)\r\n    let tempObj = {}\r\n    for (let i=0; i<cartogramData.length; i++){\r\n        cartogramData[i].value = data[i]\r\n        tempObj[i] = cartogramData[i]\r\n    }\r\n    return tempObj;\r\n}\r\n\r\nexport default getCartogramValues;","const getCartogramCenter = (cartogramData) => {\r\n    let x = 0;\r\n    let y = 0;\r\n    let keys = Object.keys(cartogramData)\r\n    let dataLength = keys.length\r\n\r\n    for (let i=0; i<dataLength; i++) {\r\n        x += cartogramData[keys[i]]['position'][0];\r\n        y += cartogramData[keys[i]]['position'][1];\r\n    };\r\n    return [x/dataLength, y/dataLength]\r\n}\r\n\r\nexport default getCartogramCenter;","const getColumns = (data, names) => {\r\n    let rtn = {};\r\n\r\n    for (let i=0; i < data.length; i++) {\r\n        rtn[names[i]] = data[i][1]\r\n    }\r\n\r\n    return rtn;\r\n}\r\n\r\nexport default getColumns;","import * as d3 from 'd3-dsv';\r\n\r\nasync function getCSV(url){\r\n    const tempData = await fetch(url)\r\n      .then(response => {\r\n        return response.ok ? response.text() : Promise.reject(response.status);\r\n      }).then(text => {\r\n        let data = d3.csvParse(text, d3.autoType)\r\n        \r\n        return data\r\n      })\r\n    \r\n      return tempData\r\n}\r\n\r\nexport default getCSV","import dataFn from './dataFunction';\r\n// this function loops through the current data set and provides data for GeodaJS to create custom breaks \r\nconst getDataForBins = (tableData, dataParams) => {\r\n\r\n    const { numerator, nProperty, nIndex, denominator, dType, dIndex} = dataParams;\r\n\r\n    // declare empty array for return variables\r\n    let rtn = [];\r\n\r\n    // length of data table to loop through\r\n    let n = tableData.length;\r\n\r\n    // this checks if the bins generated should be dynamic (generating for each date) or fixed (to the most recent date)\r\n    if (nIndex === null && nProperty === null) {\r\n        // if fixed, get the most recent date\r\n        let tempIndex = tableData[0][numerator].length-1;\r\n        // if the denominator is time series data (eg. deaths / cases this week), make the indices the same (most recent)\r\n        let tempDIndex = dType === 'time-series' ? tableData[0][denominator].length-1 : dIndex;\r\n        // loop through, do appropriate calculation. add returned value to rtn array\r\n        while (n>0) {\r\n            n--;\r\n            rtn.unshift(dataFn(tableData[n][numerator], tableData[n][denominator], {...dataParams, nIndex:tempIndex, dIndex: tempDIndex}))\r\n        }\r\n    } else {\r\n       while (n>0) {\r\n            n--;\r\n            rtn.unshift(dataFn(tableData[n][numerator], tableData[n][denominator], dataParams))\r\n        }\r\n    }\r\n    return rtn;   \r\n}\r\nexport default getDataForBins","const getDataForCharts = (data, table, startIndex, dates) => {\r\n    let features = Object.keys(data);\r\n    let n = startIndex;\r\n    let rtn = []\r\n    let j = -7;\r\n\r\n    while (n<data[features[0]][table].length) {\r\n        let tempObj = {};\r\n        let sum = 0;\r\n        let i = 0;\r\n\r\n        while (i<features.length) {\r\n            if (data[features[i]][table]!== undefined) sum += data[features[i]][table][n]\r\n            // tempObj[`n${i}`] = data[features[i]][table][n]\r\n            i++;\r\n        }\r\n        tempObj.count = sum\r\n        // dates[n-startIndex]\r\n        tempObj.date = dates[n-startIndex]\r\n        if (j<0) {\r\n            tempObj.dailyNew = sum\r\n        } else {\r\n            tempObj.dailyNew = (sum - rtn[j].count)/7\r\n        }\r\n        rtn.push(tempObj);\r\n        n++;\r\n        j++;\r\n    }\r\n    \r\n    return rtn;\r\n\r\n}\r\n\r\nexport default getDataForCharts","import dataFn from './dataFunction';\r\n\r\n// this function loops through the current data set and provides data for GeodaJS to create custom breaks \r\nconst getDataForLisa = (tableData, dataParams, order) => {\r\n    let t0 = performance.now() // logging performance\r\n    \r\n    const { numerator, nProperty, nIndex, denominator, dType, dIndex} = dataParams;\r\n\r\n    // declare empty array for return variables\r\n    let tempDict = {};\r\n\r\n    // length of data table to loop through\r\n    let n = tableData.length;\r\n\r\n    // this checks if the bins generated should be dynamic (generating for each date) or fixed (to the most recent date)\r\n    if (nIndex === null && nProperty === null) {\r\n        // if fixed, get the most recent date\r\n        let tempNIndex = tableData[0][denominator].length-1;\r\n        \r\n        // if the denominator is time series data (eg. deaths / cases this week), make the indices the same (most recent)\r\n        let tempDIndex = dType === 'time-series' ? tableData[0][denominator].length-1 : dIndex;\r\n\r\n        // loop through, do appropriate calculation. add returned value to rtn array\r\n        while (n>0) {\r\n            n--;\r\n            tempDict[tableData[n].properties.GEOID] = dataFn(tableData[n][numerator], tableData[n][denominator], {...dataParams, nIndex:tempNIndex, dIndex: tempDIndex})\r\n        }\r\n    } else {\r\n       while (n>0) {\r\n            n--;\r\n            tempDict[tableData[n].properties.GEOID] = dataFn(tableData[n][numerator], tableData[n][denominator], dataParams)\r\n        }\r\n    }\r\n    \r\n    let rtn = [];\r\n\r\n    n = 0;\r\n    let keys = Object.keys(order)\r\n    while (n<keys.length) {\r\n        rtn.push(tempDict[order[keys[n]]]);\r\n        n++;\r\n    }\r\n\r\n    console.log(performance.now() - t0);\r\n\r\n    return rtn;\r\n    \r\n}\r\nexport default getDataForLisa","const getGeoidIndex = (features) => {\r\n    let geoidOrder = {};\r\n    let indexOrder = {};\r\n    let i = 0\r\n    while (i<features.length) {\r\n        geoidOrder[features[i].properties.GEOID] = i\r\n        indexOrder[i] = features[i].properties.GEOID\r\n        i++;\r\n    }\r\n\r\n    return {geoidOrder, indexOrder};\r\n}\r\nexport default getGeoidIndex","import { getJsonPure, geojsonArrayBuffer } from '../utils';\r\n\r\n// async function getJson(url, gda_proxy){\r\n//     const tempData = await fetch(url).then(response => {\r\n//       const responseFromJson = response.clone();        \r\n//       const data = loadGeojsonToGeoda(responseFromJson, url, gda_proxy).then(\r\n//         () =>\r\n//           {\r\n//             return response.json()\r\n//           }\r\n//       )\r\n//       return data;\r\n//     }).then(data => {\r\n//       console.log('loaded json')\r\n//       return {\r\n//         data: data,\r\n//         geoidIndex: getGeoidIndex(data.features)\r\n//       }\r\n//     });        \r\n//     return tempData;\r\n// }\r\n\r\nconst getJson = async (url) => {\r\n  const response = await getJsonPure(url)\r\n  const responseFromJson = response.clone();        \r\n  const abResponse = await geojsonArrayBuffer(responseFromJson);\r\n  return { response, ab: abResponse }\r\n}\r\n\r\nexport default getJson;\r\n","const getJsonPure = async (url) => {\r\n    const tempData = await fetch(url).then(response => {\r\n      return response //.json();\r\n    })      \r\n    return tempData;\r\n}\r\n\r\nexport default getJsonPure;","const getCurrentWuuid = (gda_proxy, selectedDataset) => {\r\n    var w = gda_proxy.CreateQueenWeights(selectedDataset, 1, 0, 0);\r\n\r\n    return {\r\n      'map_uuid': selectedDataset,\r\n      'w': w,\r\n      'w_uuid': w.get_uid()\r\n    };\r\n}\r\n\r\nexport default getCurrentWuuid","import getCurrentWuuid from './getCurrentWuuid.js';\r\n\r\nconst getLisaValues = (gda_proxy, dataset, data, geoids) => {\r\n  let w = getCurrentWuuid(gda_proxy, dataset);\r\n  let all_zeros = true;\r\n  for (let i=0; i<data.length; ++i) { \r\n    if (data[i] !== 0)\r\n      all_zeros = false;\r\n  }\r\n  let clusters = [];\r\n  let sig = [];\r\n\r\n  if (all_zeros) {\r\n    for (let i=0; i<data.length; ++i) { \r\n      clusters.push(0);\r\n      sig.push(0);\r\n    }\r\n  } else {\r\n    var lisa = gda_proxy.local_moran(w.map_uuid, w.w_uuid, data);\r\n    clusters = gda_proxy.parseVecDouble(lisa.clusters());\r\n    sig = gda_proxy.parseVecDouble(lisa.significances());\r\n  }\r\n  console.log(w.w_uuid)\r\n  console.log(w.map_uuid)\r\n  return clusters;\r\n}\r\n\r\nexport default getLisaValues;","import * as d3 from 'd3-dsv';\r\nimport { findDates } from '../utils';\r\n\r\nasync function getParseCSV(url, joinCol, accumulate){\r\n    const tempData = await fetch(url)\r\n      .then(response => {\r\n        return response.ok ? response.text() : Promise.reject(response.status);\r\n      }).then(text => {\r\n        let data = d3.csvParse(text, d3.autoType)\r\n        let rtn = {};\r\n        let n = data.length;\r\n        let selectedJoinColumn;\r\n        \r\n        joinCol.forEach(colOption => {\r\n          if (data[0].hasOwnProperty(colOption)) selectedJoinColumn = colOption;\r\n        })\r\n\r\n        if (accumulate) {\r\n          let indexStart = findDates(Object.keys(data[0]))[1]\r\n          while (n>0){\r\n            n--;\r\n            let vals = Object.values(data[n])\r\n            let tempArr = [];\r\n            let i = indexStart;\r\n            let j = 0;\r\n            while (i<vals.length) {\r\n              if (i===indexStart) {\r\n                tempArr.push(vals[i])\r\n              } else {\r\n                tempArr.push(vals[i]+tempArr[j])\r\n                j++;\r\n              }\r\n              i++;\r\n            }\r\n            for (let i = 0; i < indexStart; i++) {\r\n              tempArr.unshift(vals[i])\r\n            }\r\n            rtn[data[n][selectedJoinColumn]] = tempArr\r\n          }\r\n        } else {\r\n          while (n>0){\r\n            n--;\r\n            rtn[data[n][selectedJoinColumn]] = Object.values(data[n])\r\n          }\r\n        }\r\n        return [rtn, Object.keys(data[0])]\r\n      });\r\n    return tempData;\r\n}\r\n\r\nexport default getParseCSV","export const colorScales = {\r\n    'natural_breaks': [\r\n        [240,240,240],\r\n        [255,255,204],\r\n        [255,237,160],\r\n        [254,217,118],\r\n        [254,178,76],\r\n        [253,141,60],\r\n        [252,78,42],\r\n        [227,26,28],\r\n        [177,0,38],\r\n    ],\r\n    'lisa': [\r\n        [255,255,255],\r\n        [255,0,0],\r\n        [0,0,255],\r\n        [167, 173, 249],\r\n        [244, 173, 168],\r\n        // [70, 70, 70],\r\n        // [153, 153, 153]\r\n    ],\r\n    'hinge15_breaks': [\r\n        [1, 102, 94],\r\n        [90, 180, 172],\r\n        [199, 234, 229],\r\n        [246, 232, 195],\r\n        [216, 179, 101],\r\n        [140, 81, 10],\r\n    ],    \r\n    'uninsured':[\r\n        [240,240,240],\r\n        [247,252,253],\r\n        [224,236,244],\r\n        [191,211,230],\r\n        [158,188,218],\r\n        [140,150,198],\r\n        [140,107,177],\r\n        [136,65,157],\r\n        [129,15,124],\r\n        // [77,0,75],\r\n      ],\r\n    'over65':[\r\n        [240,240,240],\r\n        [247,252,240],\r\n        [224,243,219],\r\n        [204,235,197],\r\n        [168,221,181],\r\n        [123,204,196],\r\n        [78,179,211],\r\n        [43,140,190],\r\n        [8,104,172],\r\n        // [8,64,129],\r\n    ],\r\n    'lifeExp':[\r\n        [240,240,240],\r\n        [247,252,240],\r\n        [224,243,219],\r\n        [204,235,197],\r\n        [168,221,181],\r\n        [123,204,196],\r\n        [78,179,211],\r\n        [43,140,190],\r\n        [8,104,172],\r\n        // [8,64,129],\r\n    ],\r\n    'forecasting': [\r\n        [239, 239, 239],\r\n        [254,232,200],\r\n        [253,187,132],\r\n        [227,74,51],\r\n    ],\r\n    'testing' : [\r\n        [240,240,240],\r\n        [13,8,135],\r\n        [92,1,166],\r\n        [156,23,158],\r\n        [203,70,121],\r\n        [237,121,83],\r\n        [253,180,47],\r\n        [240,249,33],\r\n      ],\r\n      'testingCap':[\r\n        [240,240,240],\r\n        [247,251,255],\r\n        [222,235,247],\r\n        [198,219,239],\r\n        [158,202,225],\r\n        [107,174,214],\r\n        [66,146,198],\r\n        [33,113,181],\r\n        [8,81,156],\r\n        [8,48,107],\r\n      ],\r\n}\r\n\r\nexport const fixedScales = {\r\n    'testing': {\r\n        bins: ['No Data','<3%','5%','10%','15%','20%','>25%'],\r\n        breaks:[0,.03,.05,.10,.15,.20,.25,Math.pow(10, 12)]\r\n    },\r\n    'testingCap': {\r\n        bins: ['No Data','<50','100','150','200','250','300','350','>400'],\r\n        breaks:[0,50,100,150,200,250,300,350,400,Math.pow(10, 12)]\r\n    },\r\n    'lisa':{\r\n        bins: [\"Not significant\", \"High-High\", \"Low-Low\", \"Low-High\", \"High-Low\"] //\"Undefined\", \"Isolated\"\r\n    },\r\n    'forecasting': {\r\n        bins: ['N/A','Low', 'Medium', 'High'],\r\n        breaks:[1,2,3,4]\r\n\r\n    }\r\n}\r\n\r\nexport const colors = {\r\n    white: '#ffffff',\r\n    black: '#00000',\r\n    darkgray:'#1a1a1a',\r\n    gray:'#2b2b2b',\r\n    buttongray: '#f5f5f5',\r\n    lightgray: '#d8d8d8',\r\n    yellow: '#FFCE00',\r\n    lightblue: '#A1E1E3',\r\n}\r\n\r\nexport const defaultData = 'county_usfacts.geojson';\r\n\r\nexport const dataPresets = {\r\n    'county_usfacts.geojson': {\r\n        plainName: 'USA Facts County',\r\n        geojson: 'county_usfacts.geojson', \r\n        csvs: ['covid_confirmed_usafacts','covid_deaths_usafacts', 'berkeley_predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'], \r\n        joinCols: ['GEOID', ['FIPS','fips','countyFIPS']], \r\n        tableNames: ['cases','deaths', 'predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'],\r\n        accumulate: []\r\n    },\r\n    'county_1p3a.geojson': {\r\n        plainName: '1Point3Acres County',\r\n        geojson: 'county_1p3a.geojson', \r\n        csvs: ['covid_confirmed_1p3a','covid_deaths_1p3a', 'berkeley_predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'], \r\n        joinCols: ['GEOID', ['FIPS','fips','countyFIPS', 'GEOID']], \r\n        tableNames: ['cases','deaths', 'predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'],\r\n        accumulate: ['covid_confirmed_1p3a','covid_deaths_1p3a']\r\n    },\r\n    'county_nyt.geojson': {\r\n        plainName: 'New York Times County',\r\n        geojson: 'county_nyt.geojson', \r\n        csvs: ['covid_confirmed_nyt', 'covid_deaths_nyt', 'berkeley_predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'], \r\n        joinCols: ['GEOID', ['FIPS','fips','countyFIPS']], \r\n        tableNames: ['cases', 'deaths', 'predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'],\r\n        accumulate: []\r\n    },\r\n    'state_usafacts.geojson': {\r\n        plainName: 'USA Facts State',\r\n        geojson: 'state_usafacts.geojson', \r\n        csvs: ['covid_confirmed_usafacts_state','covid_deaths_usafacts_state', 'chr_health_context_state', 'chr_life_state', 'chr_health_factors_state', 'covid_testing_usafacts_state', 'covid_wk_pos_usafacts_state', 'covid_tcap_usafacts_state', 'covid_ccpt_usafacts_state'], \r\n        joinCols: ['GEOID', ['FIPS','fips','stateFIPS']], \r\n        tableNames: ['cases', 'deaths', 'chr_health_context', 'chr_life', 'chr_health_factors', 'testing', 'testing_wk_pos', 'testing_tcap', 'testing_ccpt'],\r\n        accumulate: []\r\n    },\r\n    'state_nyt.geojson': {\r\n        plainName: 'New York Times State',\r\n        geojson: 'state_nyt.geojson', \r\n        csvs: ['covid_confirmed_nyt_state','covid_deaths_nyt_state', 'chr_health_context_state', 'chr_life_state', 'chr_health_factors_state', 'covid_testing_usafacts_state', 'covid_wk_pos_usafacts_state', 'covid_tcap_usafacts_state', 'covid_ccpt_usafacts_state'], \r\n        joinCols: ['GEOID', ['FIPS','fips','countyFIPS']], \r\n        tableNames: ['cases', 'deaths', 'chr_health_context', 'chr_life', 'chr_health_factors', 'testing', 'testing_wk_pos', 'testing_tcap', 'testing_ccpt'],\r\n        accumulate: []\r\n    },\r\n    'global_jhu.geojson': {\r\n        plainName: 'John Hopkins University (Global)',\r\n        geojson: 'global_jhu.geojson', \r\n        csvs: ['covid_confirmed_jhu','covid_deaths_jhu'], \r\n        joinCols: ['GEOID', ['UID']], \r\n        tableNames: ['cases', 'deaths'],\r\n        accumulate: []\r\n    },\r\n    'cdc.geojson': {\r\n        plainName: 'Center for Disease Control County',\r\n        geojson: 'cdc.geojson', \r\n        csvs: ['covid_confirmed_cdc','covid_deaths_cdc', 'chr_health_context', 'chr_life', 'chr_health_factors', 'covid_testing_cdc', 'covid_wk_pos_cdc', 'covid_tcap_cdc', 'covid_ccpt_cdc'], \r\n        joinCols: ['GEOID', ['FIPS']], \r\n        tableNames: ['cases', 'deaths', 'chr_health_context', 'chr_life', 'chr_health_factors', 'testing', 'testing_wk_pos', 'testing_tcap', 'testing_ccpt'],\r\n        accumulate: []\r\n    }\r\n}\r\n\r\nexport const tooltipInfo = {\r\n  Choropleth: <p>A thematic map used to represent data through various shading patterns on predetermined geographic areas (counties, state).</p>,\r\n  NaturalBreaksFixed: <p>A nonlinear algorithm used to group observations such that the within-group homogeneity is maximized for the latest date, bins fixed over time</p>,\r\n  NaturalBreaks: <p>A nonlinear algorithm used to group observations such that the within-group homogeneity is maximized for every day, bins change over time</p>,\r\n  BoxMap: <p>Mapping counterpart of the idea behind a box plot</p>,\r\n  Hotspot: <p>A map showing statisically significant spatial cluster and outlier locations, color coded by type.</p>,\r\n  LocalMoran: <p>Local Moran used to identify local clusters and outliers</p>,\r\n  NotSig:\t<p>Area was not statistically signficant as a spatial cluster core or outlier using given parameters.</p>,\r\n  HighHigh: <p>Hot Spot Cluster: area with high values, neighbored by areas with high values</p>,\r\n  LowLow: <p>Cold Spot Cluster: area with low values, neighbored by areas with low values</p>,\r\n  HighLow: <p>Hot Outlier: area with high values, neighbored by areas with low values</p>,\r\n  LowHigh: <p>Low-High\tCold Outlier: area with low values, neighbored by areas with high values</p>,\r\n  PovChldPrc: <p>Percentage of children under age 18 living in poverty</p>,\r\n  IncRt: <p>Ratio of household income at the 80th percentile to income at the 20th percentile</p>,\r\n  MedianHouseholdIncome: <p>The income where half of households in a county earn more and half of households earn less</p>,\r\n  FdInsPrc: <p>Percentage of population who lack adequate access to food</p>,\r\n  UnEmplyPrc: <p>Percentage of population age 16 and older unemployed but seeking work</p>,\r\n  UnInPrc: <p>Percentage of people under age 65 without insurance</p>,\r\n  PrmPhysRt: <p>Ratio of population to primary care physicians</p>,\r\n  PrevHospRt: <p>Rate of hospital stays for ambulatory-care sensitive conditions per 100,000 Medicare enrollees</p>,\r\n  RsiSgrBlckRt: <p>Index of dissimilarity where higher values indicate greater residential segregation between Black and White county residents</p>,\r\n  SvrHsngPrbRt: <p>Percentage of households with at least 1 of 4 housing problems: overcrowding, high housing costs, lack of kitchen facilities, or lack of plumbing facilities</p>,\r\n  Over65YearsPrc: <p>Percentage of people ages 65 and older</p>,\r\n  AdObPrc: <p>Percentage of the adult population (age 20 and older) that reports a body mass index (BMI) greater than or equal to 30 kg/m2</p>,\r\n  AdDibPrc: <p>Percentage of adults aged 20 and above with diagnosed diabetes</p>,\r\n  SmkPrc: <p>Percentage of adults who are current smokers</p>,\r\n  ExcDrkPrc: <p>Percentage of adults reporting binge or heavy drinking</p>,\r\n  DrOverdMrtRt: <p>Number of drug poisoning deaths per 100,000 population</p>,\r\n  LfExpRt: <p>Average number of years a person can expect to live</p>,\r\n  SlfHlthPrc: <p>Percentage of adults reporting fair or poor health</p>,\r\n  SeverityIndex: <p>Indicates the severity of the local covid-19 outbreak, based on cumulative and predicted deaths</p>,\r\n  PredictedDeaths: <p>Predicted number of deaths for a county</p>,\r\n  PredictedDeathsInterval: <p>Margin of error for predicted death counts for a county </p>,\r\n  healthfactor:<p>Health factors represent those things we can modify to improve community conditions and the length and quality of life for residents</p>,\r\n  healthcontext: <p>Community Health Context reflects the existing health behaviors and demographics of individuals in the community that are influenced by the opportunities to live long and well</p>,\r\n  healthlife:<p>Length and Quality of Life reflects the physical and mental well-being of residents within a community through measures representing how long and how well residents live</p>,\r\n  Hypersegregated: <p>American metropolitan areas where black residents experience hypersegregation, see <a href=\"https://www.princeton.edu/news/2015/05/18/hypersegregated-cities-face-tough-road-change\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>,\r\n  BlackBelt: <p>Southern US counties that were at least 40% Black or African American in the 2000 Census, see <a href=\"https://en.wikipedia.org/wiki/Black_Belt_in_the_American_South\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>,\r\n  TestingCapacity: <p>New screening (e.g., antigen) and diagnostic (e.g., PCR) testing per capita rates by date. The suggested threshold is >150 daily tests per 100k people.</p>,\r\n  USCongress: <p>Find your representative <a href=\"https://www.govtrack.us/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>,\r\n};\r\n\r\nexport const legacyVariableOrder = {\r\n    'state_usafacts.geojson': [\r\n        'Confirmed Count',\r\n        'Confirmed Count per 100K Population',\r\n        'Confirmed Count per Licensed Bed',\r\n        'Death Count',\r\n        'Death Count per 100K Population',\r\n        'Death Count/Confirmed Count',\r\n        'Daily New Confirmed Count',\r\n        'Daily New Confirmed Count per 100K Pop',\r\n        '7-Day Average Daily New Confirmed Count',\r\n        '7-Day Average Daily New Confirmed Count per 100K Pop',\r\n        'Daily New Death Count',\r\n        'Daily New Death Count per 100K Pop',\r\n        'Forecasting (5-Day Severity Index)',\r\n        '7 Day Testing Positivity Rate %',\r\n        '7 Day Testing Capacity',\r\n        '7 Day Confirmed Cases per Testing %',\r\n    ],      \r\n    'county_1p3a.geojson': [\r\n        'Confirmed Count',\r\n        'Confirmed Count per 100K Population',\r\n        'Confirmed Count per Licensed Bed',\r\n        'Death Count',\r\n        'Death Count per 100K Population',\r\n        'Death Count/Confirmed Count',\r\n        'Daily New Confirmed Count',\r\n        'Daily New Confirmed Count per 100K Pop',\r\n        '7-Day Average Daily New Confirmed Count',\r\n        '7-Day Average Daily New Confirmed Count per 100K Pop',\r\n        'Daily New Death Count',\r\n        'Daily New Death Count per 100K Pop',\r\n        'Forecasting (5-Day Severity Index)',\r\n        'Uninsured % (Community Health Factor)',\r\n        'Over 65 Years % (Community Health Context)',\r\n        'Life expectancy (Length and Quality of Life)'\r\n    ],\r\n    'county_usfacts.geojson': [\r\n        'Confirmed Count',\r\n        'Confirmed Count per 100K Population',\r\n        'Confirmed Count per Licensed Bed',\r\n        'Death Count',\r\n        'Death Count per 100K Population',\r\n        'Death Count/Confirmed Count',\r\n        'Daily New Confirmed Count',\r\n        'Daily New Confirmed Count per 100K Pop',\r\n        '7-Day Average Daily New Confirmed Count',\r\n        '7-Day Average Daily New Confirmed Count per 100K Pop',\r\n        'Daily New Death Count',\r\n        'Daily New Death Count per 100K Pop',\r\n        'Forecasting (5-Day Severity Index)',\r\n        'Uninsured % (Community Health Factor)',\r\n        'Over 65 Years % (Community Health Context)',\r\n        'Life expectancy (Length and Quality of Life)'\r\n    ]\r\n}\r\n\r\nexport const legacyOverlayOrder = [\r\n    'native_american_reservations',\r\n    'segregated_cities',\r\n    'blackbelt',\r\n    'uscongressional_districts'\r\n]\r\n\r\nexport const legacyResourceOrder = [\r\n  'clinic',\r\n  'hospital',\r\n  'clinic-hospitals'\r\n]\r\n\r\nexport const legacySourceOrder = [\r\n    'county_usfacts.geojson', \r\n    'county_1p3a.geojson', \r\n    'state_usafacts.geojson'\r\n]\r\n\r\n","import { legacyOverlayOrder, legacyResourceOrder, legacySourceOrder, legacyVariableOrder } from '../config';\r\n\r\nconst getURLParams = (params) => {\r\n\r\n    let { URLmapParams, URLcurrentData, URLcurrentVariable, URLviewState } = params;\r\n    \r\n    let overlay = URLmapParams.overlay ? `&ovr=${legacyOverlayOrder.indexOf(URLmapParams.overlay)}` : '';\r\n    let resource = URLmapParams.resource ? `&res=${legacyResourceOrder.indexOf(URLmapParams.resource)}` : '';\r\n    let variable = URLcurrentVariable !== \"7-Day Average Daily New Confirmed Count\" ? `&var=${legacyVariableOrder[URLcurrentData].indexOf(URLcurrentVariable)}` : '';\r\n    let method = URLmapParams.mapType !== 'natural_breaks' ? `&mthd=${URLmapParams.mapType}` : '';\r\n    let source = URLcurrentData !== 'county_usfacts.geojson' ? `&src=${legacySourceOrder.indexOf(URLcurrentData)}` : '';\r\n    let coords = `?lat=${Math.round(URLviewState.latitude*1000)/1000}&lon=${Math.round(URLviewState.longitude*1000)/1000}&z=${Math.round(URLviewState.zoom*10)/10}`;\r\n    let date =  '' //`&dt=${selectedDate}`;\r\n    let cartogram = URLmapParams.vizType === \"cartogram\" ? `&cartogram=true` : '';\r\n  \r\n    return `${coords}${overlay}${resource}${variable}${method}${source}${date}${cartogram}&v=1`\r\n}\r\n\r\nexport default getURLParams;","const getVarId = (currentData, dataParams) => {\r\n    return `${currentData}-${dataParams.numerator}-${dataParams.nIndex}-${dataParams.nRange}-${dataParams.denominator}-${dataParams.dProperty}-${dataParams.dIndex}-${dataParams.dRange}-${dataParams.scale}`\r\n}\r\n\r\nexport default getVarId;","import { getJson, getGeoidIndex } from '../utils';\r\n\r\nconst loadJson = async (url, gda_proxy) => {\r\nconst data = getJson(url).then(values => {\r\n    gda_proxy.ReadGeojsonMap(url.split('/').slice(-1,)[0], values.ab);\r\n    return values.response.json().then(\r\n    data => {\r\n        return {\r\n        data: data,\r\n        geoidIndex: getGeoidIndex(data.features)\r\n        }\r\n    })\r\n})\r\nreturn data;\r\n}\r\n\r\nexport default loadJson;","const mapFn = (val, bins, colors, maptype) => {\r\n  if (maptype === \"natural_breaks\") {\r\n    if (val === 0) return colors[0];\r\n    for (let i=1; i<bins.length; i++) {\r\n      if (val < bins[i]) {\r\n        return colors[i]\r\n      }\r\n    }\r\n    return colors[0];\r\n  } else if (maptype.includes(\"hinge\")) {\r\n    for (let i=1; i<bins.length; i++) {\r\n      if (val < bins[i]) {\r\n        return colors[i-1]\r\n      }\r\n    }\r\n    return colors[0];\r\n  }\r\n}\r\n\r\nexport default mapFn","import { merge } from 'lodash';\r\n\r\nconst mergeData = (featureCollection, featureCollectionJoinCol, joinData, joinDataNames, joinDataCol) => {\r\n    // declare parent dictionaries\r\n    let features = {}\r\n    let dataDict = {}\r\n    \r\n    // declare and prep feature collection object\r\n    let i = featureCollection.features.length;\r\n    let colNumCheck = parseInt(featureCollection.features[0].properties[featureCollectionJoinCol])\r\n    if (Number.isInteger(colNumCheck)) {\r\n      while (i>0) {\r\n        i--;\r\n        features[parseInt(featureCollection.features[i].properties[featureCollectionJoinCol])] = featureCollection.features[i];\r\n        dataDict[parseInt(featureCollection.features[i].properties[featureCollectionJoinCol])] = {};\r\n      }\r\n    } else {\r\n      while (i>0) {\r\n        i--;\r\n        features[featureCollection.features[i].properties[featureCollectionJoinCol]] = featureCollection.features[i];\r\n        dataDict[featureCollection.features[i].properties[featureCollectionJoinCol]] = {};\r\n      }\r\n    }\r\n  \r\n    // // declare data objects\r\n    // for (let n=0; n < joinDataNames.length; n++) {\r\n    //   dataDict[`${joinDataNames[n]}`] = {}\r\n    // }\r\n  \r\n    // loop through data and add to dictionaries\r\n    let n = joinData.length;\r\n    while (n>0) {\r\n      n--;\r\n      let cols = Object.keys(joinData[n][0]);\r\n      i = cols.length;\r\n      while (i>0) {\r\n        i--;\r\n        try {\r\n          dataDict[cols[i]][joinDataNames[n]] = joinData[n][0][cols[i]]\r\n        } catch {}\r\n      }\r\n    }\r\n    \r\n    // // use lodash to merge data\r\n    let merged = merge(features, dataDict)\r\n    // for (let n=1; n < joinDataNames.length; n++){\r\n    //   merged = merge(merged, dataDict[joinDataNames[n]])\r\n    // }\r\n    \r\n    // clean data\r\n    let rtn = [];\r\n    let keys = Object.keys(merged)\r\n    \r\n    for (let i = 0; i < keys.length; i++) {\r\n      // if (Object.keys(merged[keys[i]]).length == (joinDataNames.length+baseColumnLength)) rtn.push(merged[keys[i]])\r\n      rtn.push(merged[keys[i]])\r\n    }\r\n\r\n    return rtn;\r\n}\r\n\r\nexport default mergeData;","// These actions are part of the verbose boilerplate of redux\r\n// As part of the Flux architecture, these connect the dispatch from a component to the reducers\r\n\r\n// set active GEOID \r\n// currently not used\r\nexport const setGeoid = (geoid) => {\r\n    return {\r\n        type: 'SET_GEOID',\r\n        payload: {\r\n            geoid\r\n        }\r\n    }\r\n}\r\n\r\nexport const dataLoad = ( load ) => {\r\n    return {\r\n        type: 'DATA_LOAD',\r\n        payload: {\r\n            load\r\n        }\r\n    }\r\n}\r\n\r\nexport const dataLoadExisting = ( load ) => {\r\n    return {\r\n        type: 'DATA_LOAD_EXISTING',\r\n        payload: {\r\n            load\r\n        }\r\n    }\r\n}\r\n\r\nexport const setNewBins = ( load ) => {\r\n    return {\r\n        type: 'SET_NEW_BINS',\r\n        payload: {\r\n            load\r\n        }\r\n    }\r\n}\r\n\r\n// main store for map and tabular data\r\nexport const storeData = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_DATA',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\n// store GEOJSON and pseudo-hash table\r\nexport const storeGeojson = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_GEOJSON',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\nexport const storeMobilityData = (data) => {\r\n    return {\r\n        type: 'SET_STORED_MOBILITY_DATA',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// store lisa values with specific variable combination\r\nexport const storeLisaValues = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_LISA_DATA',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\n// store cartogra data, just like lisa\r\nexport const storeCartogramData = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_CARTOGRAM_DATA',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\n// sets the name of the current data set, usually a geojson\r\nexport const setCurrentData = (data) => {\r\n    return {\r\n        type: 'SET_CURRENT_DATA',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// not used -- this stored the Geoda Proxy, but was a bad idea\r\nexport const setGeodaProxy = (proxy) => {\r\n    return {\r\n        type: 'SET_GEODA_PROXY',\r\n        payload: {\r\n            proxy\r\n        }\r\n    }\r\n}\r\n\r\n// stores parsed centroid data \r\nexport const setCentroids = (data, name) => {\r\n    return {\r\n        type: 'SET_CENTROIDS',\r\n        payload: {\r\n            data,\r\n            name\r\n        }\r\n    }\r\n}\r\n\r\n// stores valid dates in current data set\r\nexport const setDates = (data, name) => {\r\n    return {\r\n        type: 'SET_DATES',\r\n        payload: {\r\n            data,\r\n            name\r\n        }\r\n    }\r\n}\r\n\r\n// not used -- stores the current data parsing function in the store\r\nexport const setDataFunction = (fn) => {\r\n    return {\r\n        type: 'SET_DATA_FUNCTION',\r\n        payload: {\r\n            fn\r\n        }\r\n    }\r\n}\r\n\r\n// stores a pseudo-hash table or lookup table\r\n// the data attached to the geojson is stored in arrays / list,\r\n// so a lookup table is needed to find the key-value pairs\r\nexport const setColumnNames = (data, name) => {\r\n    return {\r\n        type: 'SET_COLUMN_NAMES',\r\n        payload: {\r\n            data,\r\n            name\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// sets the current date as text\r\nexport const setDate = (date) => {\r\n    return {\r\n        type: 'SET_CURR_DATE',\r\n        payload: {\r\n            date\r\n        }\r\n    }\r\n}\r\n\r\n// sets the index of the date within the current dataset(s)\r\nexport const setDateIndex = (index) => {\r\n    return {\r\n        type: 'SET_DATE_INDEX',\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\n// the first valid date in the main data columns (cases, deaths, etc.)\r\nexport const setStartDateIndex = (index) => {\r\n    return {\r\n        type: 'SET_START_DATE_INDEX',\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\n// stores the current bins (bin names / descriptions)\r\n// and breaks (numerical breaks)\r\nexport const setBins = (bins, breaks) => {\r\n    return {\r\n        type: 'SET_BINS',\r\n        payload: {\r\n            bins,\r\n            breaks\r\n        }\r\n    }\r\n}\r\n\r\n// not used -- set map to 3d\r\nexport const set3D = () => {\r\n    return {\r\n        type: 'SET_3D'\r\n    }\r\n}\r\n\r\n// loads data for the data/info sidebar\r\nexport const setDataSidebar = ( data ) => {\r\n    return {\r\n        type: 'SET_DATA_SIDEBAR',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// increments the date by 1, for use with the animation\r\nexport const incrementDate = ( index ) => {\r\n    return {\r\n        type: 'INCREMENT_DATE',\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\n// sets the variables parameters (index and range, numerator, denominator, etc.)\r\nexport const setVariableParams = ( params ) => {\r\n    return {\r\n        type: 'SET_VARIABLE_PARAMS',\r\n        payload: {\r\n            params\r\n        }\r\n    }\r\n}\r\n\r\n// sets the map parameters (color mode, viz type, etc.)\r\nexport const setMapParams = ( params ) => {\r\n    return {\r\n        type: 'SET_MAP_PARAMS',\r\n        payload: {\r\n            params\r\n        }\r\n    }\r\n}\r\n\r\n// loads in chart data from current data\r\nexport const setChartData = ( data ) => {\r\n    return {\r\n        type: 'SET_CHART_DATA',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// sets current text-based variable name (eg. Death Count)\r\nexport const setVariableName = ( name ) => {\r\n    return {\r\n        type: 'SET_VARIABLE_NAME',\r\n        payload: {\r\n            name\r\n        }\r\n    }\r\n}\r\n\r\n// sets the anchor element for the inforational tooltip\r\nexport const setAnchorEl = ( anchorEl ) => {\r\n    return {\r\n        type: 'SET_ANCHOR_EL',\r\n        payload: {\r\n            anchorEl\r\n        }\r\n    }\r\n}\r\n\r\n// sets the left, right, and dock panel states\r\nexport const setPanelState = ( params ) => {\r\n    return {\r\n        type: 'SET_PANELS',\r\n        payload: {\r\n            params\r\n        }\r\n    }\r\n}\r\n\r\nexport const setMapLoaded = ( loaded ) => {\r\n    return {\r\n        type: 'SET_MAP_LOADED',\r\n        payload: {\r\n            loaded\r\n        }\r\n    }\r\n}\r\n\r\nexport const setNotification = ( info ) => {\r\n    return {\r\n        type: 'SET_NOTIFICATION',\r\n        payload: {\r\n            info\r\n        }\r\n    }\r\n}\r\n\r\nexport const setUrlParams = ( load ) => {\r\n    return {\r\n        type: 'SET_URL_PARAMS',\r\n        payload: {\r\n            load\r\n        }\r\n    }\r\n}","// this components houses the slider, legend, and bottom dock chart\r\nimport React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { Legend } from '../components';\r\nimport { setPanelState } from '../actions';\r\nimport { colors } from '../config';\r\n\r\n// helper function to get dock offset\r\nconst getChartHeight = () => { try { return document.querySelector('#main-chart-container').offsetHeight} catch { return 0} }\r\n\r\n// Styled components\r\nconst BottomDrawer = styled.div`\r\n    position: fixed;\r\n    bottom:0;\r\n    left:50%;\r\n    background:${colors.gray};\r\n    transform:translateX(-50%);\r\n    width:90vw;\r\n    max-width: 500px;\r\n    box-sizing: border-box;\r\n    padding:0 0 5px 0;\r\n    margin:0;\r\n    box-shadow: 0px 0px 5px rgba(0,0,0,0.7);\r\n    border-radius:0.5vh 0.5vh 0 0;\r\n    transition:250ms all;\r\n    hr {\r\n        opacity:0.5;\r\n    }\r\n    @media (max-width:1024px){\r\n        div {\r\n            padding-bottom:5px;\r\n        }\r\n        #binModeSwitch {\r\n            position:absolute !important;\r\n            right: 10px !important;\r\n            top: 10px !important;\r\n        }\r\n        #dateRangeSelector {\r\n            position:absolute !important;\r\n            left: 66% !important;\r\n            transform:translateX(-50%) !important;\r\n            top: 10px !important;\r\n        }\r\n    }\r\n    \r\n    @media (max-width:768px){\r\n    \r\n        width:100%;\r\n        max-width:100%;\r\n        padding:0;\r\n        left:0;\r\n        transform:none;\r\n    }\r\n    @media (max-width:750px) and (orientation: landscape) {\r\n        // bottom all the way down for landscape phone\r\n    }\r\n`\r\n\r\nconst BottomPanel = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const panelState = useSelector(state => state.panelState);\r\n\r\n    // offset for the bottom panel based on the chart height, \r\n    // managed through props via styled-components\r\n    const [bottomMargin, setBottomMargin] = useState(0);\r\n\r\n    const handleResize = () => setBottomMargin(getChartHeight())\r\n    window.addEventListener(\"resize\", handleResize);\r\n    \r\n    return (\r\n        <BottomDrawer bottom={panelState.chart ? 0 : bottomMargin }>\r\n            <Legend />\r\n            {/* <DateSlider /> */}\r\n            {/* <hr />\r\n            <MainLineChart />\r\n            <OpenCloseButton onClick={handleBottomOpen} bottom={panelState.chart ? 5 : bottomMargin}>\r\n                <svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                    <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n                        <path d=\"M38,33.8L23.9,47.9c-1.2,1.2-1.2,3.1,0,4.2L38,66.2l4.2-4.2l-9-9H71v17c0,0.6-0.4,1-1,1H59v6h11\r\n                        c3.9,0,7-3.1,7-7V30c0-3.9-3.1-7-7-7H59v6h11c0.6,0,1,0.4,1,1v17H33.2l9-9L38,33.8z\"/>\r\n                    </g>\r\n                </svg>\r\n                <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                    <g>\r\n                        <path d=\"M52.5,21.4c-1.9,0-3.6,1.3-4.1,3.1L37.9,63.7l-6.4-11.1c-1.2-2-3.7-2.7-5.7-1.5c-0.3,0.2-0.6,0.4-0.9,0.7\r\n                            L10.1,66.6c-1.7,1.6-1.7,4.2-0.2,5.9c1.6,1.7,4.2,1.7,5.9,0.2c0.1,0,0.1-0.1,0.1-0.1L27,61.5l8.7,15.1c1.2,2,3.7,2.7,5.7,1.5\r\n                            c0.9-0.6,1.6-1.5,1.9-2.5l9.1-33.9l4.6,17.2c0.6,2.2,2.9,3.5,5.1,2.9c1.1-0.3,2-1,2.5-1.9l10.4-18l8.9,9.4c1.6,1.7,4.2,1.8,5.9,0.3\r\n                            s1.8-4.2,0.3-5.9c0,0-0.1-0.1-0.1-0.1L77.3,32.1c-1.6-1.7-4.2-1.8-5.9-0.2c-0.3,0.3-0.6,0.6-0.8,1L62.5,47l-6-22.5\r\n                            C56,22.7,54.4,21.4,52.5,21.4L52.5,21.4z\"/>\r\n                    </g>\r\n                </svg>\r\n\r\n            </OpenCloseButton> */}\r\n        </BottomDrawer>\r\n    )\r\n\r\n}\r\n\r\nexport default BottomPanel","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { setAnchorEl } from '../actions';\r\n\r\nconst TooltipContainer = styled.button`\r\n    width:12.5px;\r\n    height:12.5px;\r\n    background:url('${process.env.PUBLIC_URL}/assets/img/info.png');\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    outline:none;\r\n    border:none;\r\n    padding:0;\r\n    margin:4px;\r\n`\r\n\r\nconst Tooltip = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleMouseOver = (event) => {\r\n        dispatch(setAnchorEl(event.currentTarget))\r\n    }\r\n\r\n    const handleMouseLeave = () => {\r\n        dispatch(setAnchorEl(null))\r\n    }\r\n\r\n    return (\r\n        <TooltipContainer id={props.id} key={props.id} onMouseEnter={handleMouseOver} onMouseLeave={handleMouseLeave} />\r\n    )\r\n}\r\n\r\nexport default Tooltip","import React from 'react';\r\nimport {\r\n    LineChart, Line, YAxis\r\n} from 'recharts';\r\nimport styled from 'styled-components';\r\nimport * as d3 from 'd3-scale';\r\n\r\nconst LineContainer = styled.div`\r\n    display:inline;\r\n    padding:0;\r\n    margin:0;\r\n    align-self:flex-start;\r\n`\r\n\r\nconst CustomizedDot = (props) => {\r\n    const {\r\n      cx, cy, index, color, angle\r\n    } = props;\r\n    if (index === 13) {\r\n      return (\r\n        <svg x={cx - 10} y={cy - 10} width={20} height={20} fill={color} viewBox=\"0 0 500 500\" >\r\n\t\t    <polygon points=\"50,125 50,375 375,250\" transform={`rotate(${angle} 250 250)`}  />\r\n\t  </svg>\r\n      );\r\n    }\r\n  \r\n    return null;\r\n  };\r\n\r\nconst TwoWeekLineChart = ( props ) => {\r\n    \r\n    // map data into object\r\n    let data = props.data.map(d => {\r\n        return {val: d/props.data[0]}\r\n    })\r\n    \r\n    let schemas = {\r\n        'cases/deaths': ['green', 'yellow', 'red'],\r\n        'testingCap': ['#f7fbff', '#f7fbff', '#08306b'],\r\n        'testingPos': ['#0d0887', '#cb4679', '#f0f921'],\r\n    }\r\n    \r\n    // colors derived from green - yellow - red diverging scale\r\n    const colorScale = d3.scaleLinear()\r\n        .domain([0, 0.5, 1])\r\n        .range(schemas[props.schema])\r\n\r\n    // change over past two weeks\r\n    const delta = props.data[13] - props.data[0]\r\n\r\n    const lineColor = (delta, start) => {\r\n        let pctChange = delta/start\r\n        return colorScale(pctChange + 0.5);\r\n    }\r\n\r\n    const calcAngle = (delta, start) => {\r\n        let pctChange = delta/start;\r\n        if (pctChange >= 0.5) {\r\n            return -60\r\n        } else if (pctChange <= -0.5) {\r\n            return 60\r\n        } else { \r\n            return pctChange*-1*60\r\n        }\r\n    }\r\n\r\n    return (\r\n        <LineContainer>\r\n            <LineChart data={data} width={60} height={30}>\r\n                <YAxis domain={['dataMin', 'dataMax']}  hide={true} />\r\n                <Line \r\n                    type=\"linear\" \r\n                    dataKey=\"val\" \r\n                    stroke={lineColor(delta, props.data[0])}\r\n                    strokeWidth={2} \r\n                    isAnimationActive={false}\r\n                    dot={\r\n                        <CustomizedDot color={lineColor(delta, props.data[0])} angle={calcAngle(delta, props.data[12])} />\r\n                        }\r\n                />\r\n            </LineChart>\r\n        </LineContainer>\r\n    );\r\n}\r\n\r\nexport default TwoWeekLineChart;\r\n  ","export const compact = <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 19.6 32\">\r\n        <path d=\"M1,0h17.6c0.6,0,1,0.5,1,1v3.1c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1V1C0,0.5,0.4,0,1,0z\"/>\r\n        <path d=\"M1,9h17.6c0.6,0,1,0.5,1,1v3.1c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1V10C0,9.4,0.4,9,1,9z\"/>\r\n        <path d=\"M1,17.9h17.6c0.6,0,1,0.5,1,1V22c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1v-3.1C0,18.4,0.4,17.9,1,17.9z\"/>\r\n        <path d=\"M1,26.9h17.6c0.6,0,1,0.5,1,1V31c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1v-3.1C0,27.3,0.4,26.9,1,26.9z\"/>\r\n    </svg>\r\n\r\nexport const expand = <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 19.6 32\" >\r\n        <path d=\"M1,0h17.6c0.6,0,1,0.5,1,1v3.1c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1V1C0,0.5,0.4,0,1,0z\"/>\r\n        <path d=\"M1,9h17.6c0.6,0,1,0.5,1,1v21c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1V10C0,9.4,0.4,9,1,9z\"/>\r\n    </svg>\r\n\r\nexport const settings = <svg viewBox=\"0 0 50 50\">\r\n            <circle className=\"cls-1\" cx=\"25.43\" cy=\"24.63\" r=\"15.4\" transform=\"translate(-3.28 3.92) rotate(-8.28)\"/>\r\n            <path className=\"cls-2\" d=\"M28.87,47.49l-7.07,0L22,41.58a17.18,17.18,0,0,0,6.74,0Z\"/>\r\n            <path className=\"cls-2\" d=\"M28.84,7.68a17.18,17.18,0,0,0-6.74,0l-.16-5.89H29Z\"/>\r\n            <path className=\"cls-2\" d=\"M44,38.35l-5,5L35,39a17.33,17.33,0,0,0,4.78-4.76Z\"/>\r\n            <path className=\"cls-2\" d=\"M15.85,10.22A17.19,17.19,0,0,0,11.07,15L6.8,10.92l5-5Z\"/>\r\n            <path className=\"cls-2\" d=\"M48.27,21.17l0,7.08-5.88-.19a17.23,17.23,0,0,0,0-6.75Z\"/>\r\n            <path className=\"cls-2\" d=\"M8.45,21.2a17.37,17.37,0,0,0,0,6.74l-5.89.16,0-7.08Z\"/>\r\n            <path className=\"cls-2\" d=\"M39.12,6l5,5-4.29,4a17.43,17.43,0,0,0-4.75-4.78Z\"/>\r\n            <path className=\"cls-2\" d=\"M11,34.2A17.16,17.16,0,0,0,15.75,39L11.7,43.25l-5-5Z\"/>\r\n    </svg>\r\n\r\nexport const report = <svg viewBox=\"0 0 50 50\">\r\n        <rect x=\"0.03\" y=\"0.19\" width=\"49.93\" height=\"3.85\" rx=\"1\"/>\r\n        <rect x=\"0.03\" y=\"8.4\" width=\"46.19\" height=\"3.85\" rx=\"1\"/>\r\n        <rect x=\"0.03\" y=\"21.12\" width=\"49.93\" height=\"3.85\" rx=\"1\"/>\r\n        <rect x=\"0.03\" y=\"29.58\" width=\"49.93\" height=\"3.85\" rx=\"1\"/><rect x=\"0.03\" y=\"38.04\" width=\"43.69\" height=\"3.85\" rx=\"1\"/>\r\n        <rect x=\"0.03\" y=\"46.15\" width=\"49.93\" height=\"3.85\" rx=\"1\"/>\r\n    </svg>\r\n\r\nexport const chart = <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n        <g>\r\n            <path d=\"M52.5,21.4c-1.9,0-3.6,1.3-4.1,3.1L37.9,63.7l-6.4-11.1c-1.2-2-3.7-2.7-5.7-1.5c-0.3,0.2-0.6,0.4-0.9,0.7\r\n                L10.1,66.6c-1.7,1.6-1.7,4.2-0.2,5.9c1.6,1.7,4.2,1.7,5.9,0.2c0.1,0,0.1-0.1,0.1-0.1L27,61.5l8.7,15.1c1.2,2,3.7,2.7,5.7,1.5\r\n                c0.9-0.6,1.6-1.5,1.9-2.5l9.1-33.9l4.6,17.2c0.6,2.2,2.9,3.5,5.1,2.9c1.1-0.3,2-1,2.5-1.9l10.4-18l8.9,9.4c1.6,1.7,4.2,1.8,5.9,0.3\r\n                s1.8-4.2,0.3-5.9c0,0-0.1-0.1-0.1-0.1L77.3,32.1c-1.6-1.7-4.2-1.8-5.9-0.2c-0.3,0.3-0.6,0.6-0.8,1L62.5,47l-6-22.5\r\n                C56,22.7,54.4,21.4,52.5,21.4L52.5,21.4z\"/>\r\n        </g>\r\n    </svg>\r\n\r\nexport const info =  <svg viewBox=\"0 0 100 100\" x=\"0px\" y=\"0px\">\r\n        <g>\r\n            <path d=\"M 62.0763 27.4552 C 64.0258 25.642 65 23.4406 65 20.8589 C 65 18.2815 64.0258 16.0809 62.0763 14.2511 C 60.1273 12.4207 57.7859 11.5 55.0413 11.5 C 52.3076 11.5 49.9438 12.4207 47.9833 14.2511 C 46.0343 16.0809 45.0487 18.2815 45.0487 20.8589 C 45.0487 23.4406 46.0343 25.642 47.9833 27.4552 C 49.9438 29.2682 52.3076 30.178 55.0413 30.178 C 57.7859 30.178 60.1273 29.2682 62.0763 27.4552 ZM 57.5841 88.0802 C 61.1017 86.4348 62.9616 83.3419 61.1353 81.9274 C 60.0823 81.1132 58.7041 82.4604 57.6963 82.4604 C 55.5343 82.4604 54.0103 82.1065 53.1367 81.3939 C 52.2518 80.6754 51.8261 79.3446 51.8261 77.3796 C 51.8261 76.5942 51.9493 75.4433 52.2182 73.9213 C 52.487 72.395 52.8007 71.0302 53.1367 69.8404 L 57.3153 55.0418 C 57.7073 53.683 57.9988 52.1893 58.1554 50.5672 C 58.301 48.9276 58.3798 47.7935 58.3798 47.1533 C 58.3798 44.0378 57.2817 41.5004 55.0971 39.5465 C 52.9237 37.5991 49.8094 36.6159 45.7765 36.6159 C 43.5361 36.6159 41.1501 36.9472 38.652 37.8117 C 33.7564 39.5293 34.8432 43.7968 35.9296 43.7968 C 38.1364 43.7968 39.6152 44.1722 40.3995 44.9193 C 41.1837 45.6604 41.5868 46.9796 41.5868 48.8828 C 41.5868 49.9269 41.4413 51.1007 41.1947 52.3689 C 40.9369 53.6381 40.635 54.9909 40.2541 56.4111 L 36.053 71.2659 C 35.6947 72.8267 35.4253 74.2246 35.2463 75.4648 C 35.0784 76.7058 35 77.9187 35 79.1091 C 35 82.1578 36.12 84.6722 38.3716 86.6596 C 40.6238 88.6528 44.0854 90.5 48.1405 90.5 C 50.7731 90.5 54.537 89.518 57.5841 88.0802 Z\">\r\n            </path>\r\n        </g>\r\n    </svg>\r\n\r\nexport const verticalGrip = <svg viewBox=\"0 0 12.1 50\" >\r\n        <rect width=\"2.4\" height=\"50\"/>\r\n        <rect x=\"4.9\" width=\"2.4\" height=\"50\"/>\r\n        <rect x=\"9.8\" width=\"2.4\" height=\"50\"/>\r\n    </svg>\r\n","// This components formats the data for the selected geography\r\n// and displays it in the right side panel.\r\n\r\nimport React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport Tooltip from './tooltip';\r\nimport TwoWeekChart from './twoWeekLineChart';\r\nimport { setPanelState } from '../actions';\r\nimport {dataFn, colLookup} from '../utils';\r\nimport { colors } from '../config';\r\nimport { compact, expand, report, verticalGrip} from '../config/svg';\r\n\r\n// Styled components CSS\r\nconst DataPanelContainer = styled.div`\r\n  position:fixed;\r\n  right:0;\r\n  top:50px;\r\n  overflow-x:visible;\r\n  height:calc(100vh - 50px);\r\n  background-color: ${colors.gray}fa;\r\n  box-shadow: -2px 0px 5px rgba(0,0,0,0.7);\r\n  padding:20px;\r\n  box-sizing: border-box;\r\n  transition:250ms all;\r\n  font: 'Lato', sans-serif;\r\n  color: white;\r\n  font-size:100%;\r\n  padding:0;\r\n  z-index:5;\r\n  transform: translateX(100%);\r\n  &.open {\r\n    transform:none;\r\n  }\r\n  @media (max-width:1024px) {\r\n    min-width:50vw;\r\n  }  \r\n  @media (max-width:600px) {\r\n    width:100%;\r\n    left:0;\r\n    transform:translateX(-100%);\r\n    z-index:51;\r\n    &.open {\r\n      transform:none;\r\n    }\r\n    display: ${props => props.otherPanels ? 'none' : 'initial'};\r\n  }\r\n  button#showHideRight {\r\n    position:absolute;    \r\n    right:calc(100% - 20px);\r\n    top:20px;\r\n    width:40px;\r\n    height:40px;\r\n    padding:0;\r\n    margin:0;\r\n    background-color: ${colors.gray};\r\n    box-shadow: 0px 0px 6px rgba(0,0,0,1);\r\n    outline:none;\r\n    border:none;\r\n    cursor: pointer;\r\n    transition:500ms all;\r\n    svg {\r\n      width:15px;\r\n      height:15px;\r\n      margin:12.5px 0 0 0;\r\n      @media (max-width:600px){\r\n        width:20px;\r\n        height:20px;\r\n        margin:5px;\r\n      }\r\n      fill:white;\r\n      transform:rotate(180deg);\r\n      transition:500ms all;\r\n    }\r\n    :after {\r\n      opacity:0;\r\n      font-weight:bold;\r\n      color:white;\r\n      position: relative;\r\n      top:-17px;\r\n      transition:500ms all;\r\n      content: 'Report';\r\n      right:50px;\r\n      z-index:4;\r\n    }  \r\n    &.hidden {\r\n      right:100%;\r\n      svg {\r\n        transform:rotate(0deg);\r\n      }\r\n      :after {\r\n        opacity:1;\r\n      }\r\n    }\r\n    @media (max-width:768px){\r\n      top:120px;\r\n    }\r\n    @media (max-width:600px) {\r\n      left:100%;\r\n      width:30px;\r\n      height:30px;\r\n      top:160px;\r\n      &.hidden svg {\r\n        transform:rotate(0deg);\r\n      }\r\n      :after {\r\n        display:none;\r\n      }\r\n      &.active {\r\n        left:90%;\r\n      }\r\n      &.active svg {\r\n        transform:rotate(90deg);\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n  div {\r\n    div {\r\n      p {\r\n        line-height:1.5;\r\n        margin:0;\r\n        display:inline-block;\r\n      }\r\n    }\r\n  }\r\n  h2 {\r\n    padding:15px 0 5px 0;\r\n    margin:0;\r\n    display:inline-block;\r\n  }\r\n  h6 {\r\n    padding:0 0 15px 0;\r\n    margin:0;\r\n    a {\r\n      color:${colors.yellow};\r\n      text-decoration:none;\r\n    }\r\n  }\r\n  .extraPadding {\r\n    padding-bottom:20vh;\r\n  }\r\n`\r\n\r\nconst ReportWrapper = styled.div`\r\n  height:100vh;\r\n  overflow-y:scroll;\r\n`\r\n\r\nconst ReportContainer = styled.div`\r\n    padding:5px 0 0 30px;\r\n    box-sizing:border-box;\r\n    overflow-x:visible;\r\n    // display:flex;\r\n    // flex-direction:column;\r\n    // flex-wrap:wrap;\r\n    width:500px;\r\n    columns:${props => props.cols} 250px;\r\n    column-gap:10px;\r\n    display:inline-block;\r\n`\r\n\r\nconst ReportSection = styled.span`\r\n    padding-right:20px;\r\n    box-sizing:border-box;\r\n    width:100%;\r\n    display:inline-block;\r\n    padding: 0;\r\n    margin: 0;\r\n`\r\n\r\nconst BigNumber = styled.h2`\r\n  font-size:1.15rem;\r\n  padding:0 0 15px 0 !important;\r\n`\r\n\r\nconst NumberChartContainer = styled.div`\r\n  width:100%;\r\n  display:flex;\r\n  align-items: center;\r\n`\r\n\r\nconst ExpandButtons = styled(ButtonGroup)`\r\n  outline:none;\r\n  border:none;\r\n  position:absolute;\r\n  right:20px;\r\n  top:15px;\r\n  svg {\r\n    fill:${colors.white}44;\r\n    transition:250ms all;\r\n    height:15px;\r\n    &:hover {\r\n      fill:${colors.white}77;\r\n    }\r\n  }\r\n  .MuiButton-root {\r\n    outline:none !important;\r\n    border:none !important;\r\n    min-width:0;\r\n    padding:10px;\r\n    box-sizing:border-box;\r\n    outline:none !important;\r\n    color:white !important;\r\n  }\r\n  .MuiButton-root.active {\r\n    svg {\r\n      fill:white;\r\n      &:hover: {\r\n        fill:white;\r\n      }\r\n    }\r\n  }\r\n`\r\nconst ResizeButton = styled.button`\r\n    position:absolute;\r\n    left:5px;\r\n    bottom:50%;\r\n    background:none;\r\n    outline:none;\r\n    border:none;\r\n    transform: translateY(-50%);\r\n    cursor:grab;\r\n    width:10px;\r\n    padding:0;\r\n    margin:0;\r\n    height:20px;\r\n    svg {\r\n      width:15px;\r\n      height:30px;\r\n      fill:white;\r\n    }\r\n    @media (max-width:1024px) {\r\n      display:none;\r\n    }\r\n`\r\n\r\nconst DataPanel = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // de-structure sidebarData, which houses selected geography data\r\n  const { properties, cases, deaths, predictions,\r\n    chr_health_factors, chr_life, chr_health_context,\r\n    testing_ccpt, testing_tcap, testing_wk_pos, testing\r\n   } = useSelector(state => state.sidebarData);\r\n  // name of current data set\r\n\r\n  const currentData = useSelector(state => state.currentData);\r\n  // panels open/close state\r\n  const panelState = useSelector(state => state.panelState);\r\n  //column names\r\n  const cols = useSelector(state => state.cols);\r\n\r\n  const [expanded, setExpanded] = useState(true)\r\n  const [width, setWidth] = useState(250);\r\n  const [colCount, setColCount] = useState(1);\r\n  const [currXPos, setCurrXPos] = useState(false);\r\n\r\n  // helper for predictions data\r\n  const parsePredictedDate = (list) => `${list.slice(-2,)[0]}/${list.slice(-1,)[0]}`\r\n\r\n  // handles panel open/close\r\n  const handleOpenClose = () => panelState.info ? dispatch(setPanelState({info:false})) : dispatch(setPanelState({info:true}))\r\n  \r\n  const listener = (e) => {\r\n    setWidth(prevWidth => {\r\n      if ((prevWidth - (window.innerWidth-e.screenX) < 25) && (prevWidth - (window.innerWidth-e.screenX) > -25)){\r\n        return prevWidth;\r\n      } else if ((window.innerWidth-e.screenX) < 300) {\r\n        setColCount(1);\r\n        return 300;\r\n      } else {\r\n        setColCount(Math.floor((window.innerWidth-e.screenX)/300));\r\n        return window.innerWidth-e.screenX\r\n      }\r\n    })\r\n  }\r\n\r\n  const touchListener = (e) => {\r\n      setWidth(prev => (e?.targetTouches[0]?.clientX-currXPos) || prev)\r\n  }\r\n\r\n  const removeListener = () => {\r\n      window.removeEventListener('mousemove', listener)\r\n      window.removeEventListener('mouseup', removeListener)\r\n  }\r\n\r\n  const removeTouchListener = () => {\r\n      window.removeEventListener('touchmove', touchListener);\r\n      window.removeEventListener('touchend', removeTouchListener);\r\n  }\r\n\r\n  const handleDown = () => {\r\n      window.addEventListener('mousemove', listener)\r\n      window.addEventListener('mouseup', removeListener)\r\n  }\r\n\r\n  const handleTouch = (e) => {\r\n      setCurrXPos(+e.target.parentNode.parentNode.parentNode.style.left.slice(0,-2))\r\n      window.addEventListener('touchmove', touchListener)\r\n      window.addEventListener('touchend', removeTouchListener)\r\n  }\r\n\r\n  return (\r\n    <DataPanelContainer className={panelState.info ? 'open' : ''} id=\"data-panel\"  otherPanels={panelState.variables}>\r\n      {properties && <ExpandButtons>\r\n        <Button onClick={() => setExpanded(true)} className={expanded ? 'active' : ''}>{expand}</Button>\r\n        <Button onClick={() => setExpanded(false)} className={expanded ? '' : 'active'}>{compact}</Button>\r\n      </ExpandButtons>}\r\n      <ReportWrapper>\r\n        <ReportContainer cols={colCount} style={{width: width}}>\r\n          <ReportSection>\r\n            {properties && <h2>{properties.NAME}{properties.state_name && `, ${properties.state_name}`}</h2>}\r\n            <br/>\r\n          {properties && ( \r\n            expanded ? \r\n              <span>\r\n                <p>Population</p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber>{properties.population?.toLocaleString('en')}</BigNumber>\r\n                </NumberChartContainer> \r\n              </span>\r\n            :\r\n              <p>Population: {properties.population?.toLocaleString('en')}</p>\r\n          )}       \r\n          </ReportSection>\r\n          {(cases && deaths) && ( \r\n            expanded ? \r\n              <ReportSection><br/>\r\n                <p>Total Cases</p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{cases.slice(-1,)[0]?.toLocaleString('en')}</BigNumber>\r\n                  <TwoWeekChart data={cases.slice(-14,)} schema='cases/deaths'/>\r\n                </NumberChartContainer>\r\n                \r\n                <p>Total Deaths </p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{deaths.slice(-1,)[0]?.toLocaleString('en')}</BigNumber>\r\n                  <TwoWeekChart data={deaths.slice(-14,)} schema='cases/deaths'/>\r\n                </NumberChartContainer>\r\n\r\n                <p>Cases per 100k Population</p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{dataFn(cases, properties, {nProperty: null, nIndex: cases.length-1, nRange: null, dProperty: 'population', dIndex: null, dRange: null, scale: 100000})?.toFixed(2).toLocaleString('en')}</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Deaths per 100k Population</p><br/>               \r\n                <NumberChartContainer>\r\n                  <BigNumber>{dataFn(deaths, properties, {nProperty: null, nIndex: deaths.length-1, nRange: null, dProperty: 'population', dIndex: null, dRange: null, scale: 100000})?.toFixed(2).toLocaleString('en')}</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>New Cases per 100k Population</p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber>{dataFn(cases, properties, {nProperty: null, nIndex: cases.length-1, nRange: 1, dProperty: 'population', dIndex: null, dRange: null, scale: 100000})?.toFixed(2).toLocaleString('en')}</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>New Deaths per 100k Population</p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber>{dataFn(deaths, properties, {nProperty: null, nIndex: deaths.length-1, nRange: 1, dProperty: 'population', dIndex: null, dRange: null, scale: 100000})?.toFixed(2).toLocaleString('en')}</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Licensed Hospital Beds</p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber>{properties.beds?.toLocaleString('en')}</BigNumber>\r\n                </NumberChartContainer> \r\n                {/* <p>Cases per Bed: {dataFn(cases, null, cases.length-1, null, properties, 'beds', null, null, 1)?.toFixed(2)?.toLocaleString('en')}</p><br/> */}\r\n              </ReportSection>\r\n            :\r\n            <ReportSection><br/>\r\n              <p>Total Cases: {cases.slice(-1,)[0]?.toLocaleString('en')}</p><br/>            \r\n              <p>Total Deaths: {deaths.slice(-1,)[0]?.toLocaleString('en')}</p><br/>\r\n              <p>Cases per 100k Population: {dataFn(cases, properties, {nProperty: null, nIndex: cases.length-1, nRange: null, dProperty: 'population', dIndex: null, dRange: null, scale: 100000})?.toFixed(2).toLocaleString('en')}</p><br/>\r\n              <p>Deaths per 100k Population: {dataFn(deaths, properties, {nProperty: null, nIndex: deaths.length-1, nRange: null, dProperty: 'population', dIndex: null, dRange: null, scale: 100000})?.toFixed(2).toLocaleString('en')}</p><br/>\r\n              <p>New Cases per 100k Population: {dataFn(cases, properties, {nProperty: null, nIndex: cases.length-1, nRange: 1, dProperty: 'population', dIndex: null, dRange: null, scale: 100000})?.toFixed(2).toLocaleString('en')}</p><br/>\r\n              <p>New Deaths per 100k Population: {dataFn(deaths, properties, {nProperty: null, nIndex: deaths.length-1, nRange: 1, dProperty: 'population', dIndex: null, dRange: null, scale: 100000})?.toFixed(2).toLocaleString('en')}</p><br/>\r\n              <p>Licensed Hospital Beds: {properties.beds?.toLocaleString('en')}</p><br/>\r\n              {/* <p>Cases per Bed: {dataFn(cases, null, cases.length-1, null, properties, 'beds', null, null, 1)?.toFixed(2)?.toLocaleString('en')}</p><br/> */}\r\n            </ReportSection>\r\n            \r\n          )}\r\n          {testing && ( \r\n            expanded ? \r\n              <ReportSection>\r\n                <h2>Testing</h2><br/>\r\n                <p>7-Day Positivity Rate</p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{(testing_wk_pos[testing_wk_pos.length-1]*100).toFixed(2)}%</BigNumber>\r\n                  <TwoWeekChart data={testing_wk_pos.slice(-14,)} schema='testingPos'/>\r\n                </NumberChartContainer>\r\n\r\n                <p>7-Day Testing Capacity per 100k People</p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{(testing_tcap[testing_tcap.length-1]).toLocaleString('en')}</BigNumber>\r\n                  <TwoWeekChart data={testing_tcap.slice(-14,)} schema='testingCap'/>\r\n                </NumberChartContainer>\r\n\r\n                <p>Total Testing: {(testing[testing.length-1]).toLocaleString('en')}</p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{(testing_tcap[testing_tcap.length-1]).toLocaleString('en')}</BigNumber>\r\n                </NumberChartContainer>\r\n\r\n                <p>7-Day Confirmed Cases per Testing</p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{(testing_ccpt[testing_ccpt.length-1]*100).toFixed(2)}%</BigNumber>\r\n                </NumberChartContainer>\r\n\r\n                <p>Testing Criterion</p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber> {properties.criteria}</BigNumber>\r\n                </NumberChartContainer>\r\n\r\n              </ReportSection>\r\n            :\r\n              <ReportSection>\r\n                <h2>Testing</h2><br/>\r\n                <p>7-Day Positivity Rate: {(testing_wk_pos[testing_wk_pos.length-1]*100).toFixed(2)}%</p><br/>\r\n                <p>7-Day Testing Capacity per 100k People: {(testing_tcap[testing_tcap.length-1]).toLocaleString('en')}</p><br/>\r\n                <p>Total Testing: {(testing[testing.length-1]).toLocaleString('en')}</p><br/>\r\n                <p>7-Day Confirmed Cases per Testing: {(testing_ccpt[testing_ccpt.length-1]*100).toFixed(2)}%</p><br/>\r\n                <p>Testing Criterion: {properties.criteria}</p><br/>\r\n              </ReportSection>\r\n          )}\r\n          {chr_health_factors && ( \r\n            expanded ? \r\n              <ReportSection>\r\n                <h2>Community Health Factors<Tooltip id=\"healthfactor\"/></h2>\r\n                <h6>Source: <a href=\"https://www.countyhealthrankings.org/\" target=\"_blank\" rel=\"noopener noreferrer\">County Health Rankings</a></h6>\r\n                <p>Children in poverty</p><Tooltip id=\"PovChldPrc\"/><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'PovChldPrc')]}%</BigNumber>\r\n                </NumberChartContainer>\r\n\r\n                <p>Income inequality<Tooltip id=\"IncRt\"/></p>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'IncRt')]}</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Median household income</p><Tooltip id=\"MedianHouseholdIncome\"/><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>${chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'MedianHouseholdIncome')]?.toLocaleString('en')}</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Food insecurity</p><Tooltip id=\"FdInsPrc\"/><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'FdInsPrc')]}%</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Unemployment</p><Tooltip id=\"UnEmplyPrc\"/><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'UnEmplyPrc')]}%</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Uninsured</p><Tooltip id=\"UnInPrc\"/><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'UnInPrc')]}%</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Primary care physicians</p><Tooltip id=\"PrmPhysRt\"/><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'PrmPhysRt')]}</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Preventable hospital stays</p><Tooltip id=\"PrevHospRt\"/><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'PrevHospRt')]?.toLocaleString('en')}</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Residential segregation-black/white</p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'RsiSgrBlckRt')]||'NA'}</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Severe housing problems</p><Tooltip id=\"SvrHsngPrbRt\"/><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'SvrHsngPrbRt')]}%</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n              </ReportSection>\r\n            : \r\n              <ReportSection>\r\n                <h2>Community Health Factors<Tooltip id=\"healthfactor\"/></h2>\r\n                <h6>Source: <a href=\"https://www.countyhealthrankings.org/\" target=\"_blank\" rel=\"noopener noreferrer\">County Health Rankings</a></h6>\r\n                <p>Children in poverty: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'PovChldPrc')]}%<Tooltip id=\"PovChldPrc\"/></p><br/>\r\n                <p>Income inequality: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'IncRt')]}<Tooltip id=\"IncRt\"/></p><br/>\r\n                <p>Median household income: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'MedianHouseholdIncome')]?.toLocaleString('en')}<Tooltip id=\"MedianHouseholdIncome\"/></p><br/>\r\n                <p>Food insecurity: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'FdInsPrc')]}<Tooltip id=\"FdInsPrc\"/></p><br/>\r\n                <p>Unemployment: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'UnEmplyPrc')]}%<Tooltip id=\"UnEmplyPrc\"/></p><br/>\r\n                <p>Uninsured: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'UnInPrc')]}%<Tooltip id=\"UnInPrc\"/></p><br/>\r\n                <p>Primary care physicians: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'PrmPhysRt')]}<Tooltip id=\"PrmPhysRt\"/></p><br/>\r\n                <p>Preventable hospital stays: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'PrevHospRt')]?.toLocaleString('en')}<Tooltip id=\"PrevHospRt\"/></p><br/>\r\n                <p>Residential segregation-black/white: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'RsiSgrBlckRt')]||'NA'}</p><br/>\r\n                <p>Severe housing problems: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'SvrHsngPrbRt')]}%<Tooltip id=\"SvrHsngPrbRt\"/></p><br/>\r\n              </ReportSection>\r\n          )}\r\n          {chr_health_context && ( \r\n            expanded ? \r\n              <ReportSection>\r\n                <h2>Community Health Context</h2><Tooltip id=\"healthcontext\"/>\r\n                <h6>Source: <a href=\"https://www.countyhealthrankings.org/\" target=\"_blank\" rel=\"noopener noreferrer\">County Health Rankings</a></h6>\r\n\r\n                <p>65 and older<Tooltip id=\"Over65YearsPrc\"/></p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'Over65YearsPrc')]}%</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Adult obesity<Tooltip id=\"AdObPrc\"/></p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'AdObPrc')]}%</BigNumber>\r\n                </NumberChartContainer>  \r\n\r\n                <p>Diabetes prevalence<Tooltip id=\"AdDibPrc\"/></p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'AdDibPrc')]}%</BigNumber>\r\n                </NumberChartContainer>  \r\n\r\n                <p>Adult smoking<Tooltip id=\"SmkPrc\"/></p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'SmkPrc')]}%</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n                <p>Excessive drinking<Tooltip id=\"ExcDrkPrc\"/></p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'ExcDrkPrc')]}%</BigNumber>\r\n                </NumberChartContainer>  \r\n\r\n                <p>Drug overdose deaths<Tooltip id=\"DrOverdMrtRt\"/></p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'DrOverdMrtRt')]||'0'}</BigNumber>\r\n                </NumberChartContainer> \r\n              </ReportSection>\r\n            :  \r\n              <ReportSection>\r\n                <h2>Community Health Context</h2><Tooltip id=\"healthcontext\"/>\r\n                <h6>Source: <a href=\"https://www.countyhealthrankings.org/\" target=\"_blank\" rel=\"noopener noreferrer\">County Health Rankings</a></h6>\r\n                <p>65 and older: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'Over65YearsPrc')]}% <Tooltip id=\"Over65YearsPrc\"/></p><br/>\r\n                <p>Adult obesity: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'AdObPrc')]}%<Tooltip id=\"AdObPrc\"/></p><br/>\r\n                <p>Diabetes prevalence: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'AdDibPrc')]}% <Tooltip id=\"AdDibPrc\"/></p><br/>\r\n                <p>Adult smoking: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'SmkPrc')]}% <Tooltip id=\"SmkPrc\"/></p><br/>\r\n                <p>Excessive drinking: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'ExcDrkPrc')]}% <Tooltip id=\"ExcDrkPrc\"/></p><br/>\r\n                <p>Drug overdose deaths: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'DrOverdMrtRt')]||'0'}<Tooltip id=\"DrOverdMrtRt\"/></p><br/>\r\n              </ReportSection>\r\n          )}\r\n          {chr_life && ( \r\n            expanded ? \r\n              <ReportSection>\r\n                <h2>Length and Quality of Life<Tooltip id=\"healthlife\"/></h2>\r\n                <h6>Source: <a href=\"https://www.countyhealthrankings.org/\" target=\"_blank\" rel=\"noopener noreferrer\">County Health Rankings</a></h6>\r\n                <p>Life expectancy<Tooltip id=\"LfExpRt\"/></p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_life[colLookup(cols, currentData, 'chr_life', 'LfExpRt')]}</BigNumber>\r\n                </NumberChartContainer>  \r\n\r\n                <p>Self-rated health<Tooltip id=\"SlfHlthPrc\"/></p><br/>\r\n                <NumberChartContainer>\r\n                  <BigNumber>{chr_life[colLookup(cols, currentData, 'chr_life', 'SlfHlthPrc')]}%</BigNumber>\r\n                </NumberChartContainer> \r\n\r\n              </ReportSection>\r\n            :\r\n              <ReportSection>\r\n                <h2>Length and Quality of Life<Tooltip id=\"healthlife\"/></h2>\r\n                <h6>Source: <a href=\"https://www.countyhealthrankings.org/\" target=\"_blank\" rel=\"noopener noreferrer\">County Health Rankings</a></h6>\r\n                <p>Life expectancy: {chr_life[colLookup(cols, currentData, 'chr_life', 'LfExpRt')]}<Tooltip id=\"LfExpRt\"/></p><br/>\r\n                <p>Self-rated health: {chr_life[colLookup(cols, currentData, 'chr_life', 'SlfHlthPrc')]}% <Tooltip id=\"SlfHlthPrc\"/></p><br/>\r\n              </ReportSection>\r\n          )}\r\n          {(predictions && cols[currentData] && cols[currentData].predictions) && ( \r\n            expanded ? \r\n              <ReportSection>\r\n                <h2>Forecasting</h2><br/>            \r\n                <h6>Source: <a href=\"https://github.com/Yu-Group/covid19-severity-prediction/\" target=\"_blank\" rel=\"noopener noreferrer\">Yu Group at Berkeley</a></h6>            \r\n                <p>5-Day Severity Index<Tooltip id=\"SeverityIndex\"/></p><br />\r\n                <NumberChartContainer>\r\n                  <BigNumber> {['','Low','Medium','High'][predictions[1]]}</BigNumber>\r\n                </NumberChartContainer> \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[2].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber>{predictions[2]}</BigNumber>\r\n                </NumberChartContainer> \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[4].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber> {predictions[4]}</BigNumber>\r\n                </NumberChartContainer> \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[6].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber>{predictions[6]}</BigNumber>\r\n                </NumberChartContainer> \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[8].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber>{predictions[8]}</BigNumber>\r\n                </NumberChartContainer> \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[10].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber>{predictions[10]}</BigNumber>\r\n                </NumberChartContainer> \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[12].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber>{predictions[12]}</BigNumber>\r\n                </NumberChartContainer> \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[14].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p><br/> \r\n                <NumberChartContainer>\r\n                  <BigNumber>{predictions[14]}</BigNumber>\r\n                </NumberChartContainer> \r\n              </ReportSection>\r\n            : \r\n              <ReportSection>\r\n                <h2>Forecasting</h2><br/>            \r\n                <h6>Source: <a href=\"https://github.com/Yu-Group/covid19-severity-prediction/\" target=\"_blank\" rel=\"noopener noreferrer\">Yu Group at Berkeley</a></h6>            \r\n                <p>5-Day Severity Index: {['','Low','Medium','High'][predictions[1]]}<Tooltip id=\"SeverityIndex\"/></p><br />\r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[2].split('_'))}: {predictions[2]}<Tooltip id=\"PredictedDeaths\"/></p><br/>\r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[4].split('_'))}: {predictions[4]}<Tooltip id=\"PredictedDeaths\"/></p><br/>\r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[6].split('_'))}: {predictions[6]}<Tooltip id=\"PredictedDeaths\"/></p><br/>\r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[8].split('_'))}: {predictions[8]}<Tooltip id=\"PredictedDeaths\"/></p><br/>\r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[10].split('_'))}: {predictions[10]}<Tooltip id=\"PredictedDeaths\"/></p><br/>\r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[12].split('_'))}: {predictions[12]}<Tooltip id=\"PredictedDeaths\"/></p><br/>\r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[14].split('_'))}: {predictions[14]}<Tooltip id=\"PredictedDeaths\"/></p><br/>\r\n              </ReportSection>\r\n          )}\r\n          \r\n          <div className=\"extraPadding\"></div>\r\n          \r\n          {properties && <button onClick={handleOpenClose} id=\"showHideRight\" className={panelState.info ? 'active' : 'hidden'}>{report}</button>}\r\n          {properties && <ResizeButton \r\n                  id=\"resize\"\r\n                  onMouseDown={handleDown}\r\n                  onTouchStart={handleTouch}\r\n                  style={{zIndex:10}}\r\n              >\r\n                  {verticalGrip}\r\n              </ResizeButton>}\r\n        </ReportContainer>\r\n      </ReportWrapper>\r\n    </DataPanelContainer>\r\n  );\r\n}\r\n\r\nexport default DataPanel;","import styled from 'styled-components';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { colors } from '../config';\r\n\r\nexport const StyledDropDown = styled(FormControl)`\r\n  padding:0 0 ${props => props.component === 'radios' ? '20' : '40'}px 0!important;\r\n  color:white;\r\n  padding:0;\r\n  margin: 0 10px 40px 0;\r\n  .MuiInputBase-root {\r\n    font-family: 'Lato', sans-serif;\r\n  }\r\n  .MuiFormLabel-root {\r\n    color: white;\r\n    font-family: 'Lato', sans-serif;\r\n  }\r\n  .Mui-focused {\r\n    color: white !important;\r\n  }\r\n  .MuiInput-underline:before {\r\n    border-bottom:1px solid rgba(255,255, 255, 0.42);\r\n  }\r\n  .MuiInput-underline:after {\r\n    border-bottom: 2px solid white\r\n  }\r\n  .MuiInputBase-root {\r\n    color: white;\r\n    .MuiSvgIcon-root {\r\n      color: rgba(255,255,255,0.54);\r\n    },\r\n    .MuiPopover-paper {\r\n      color:white;\r\n    }\r\n  }\r\n  .MuiFormGroup-root {\r\n    .MuiFormControlLabel-root{\r\n      color:white;\r\n      span {\r\n        font-family: 'Lato', sans-serif;\r\n      }\r\n      .MuiRadio-root {\r\n        color: rgba(255,255,255,0.54);\r\n      }\r\n    }\r\n  }\r\n  .MuiRadio-root {\r\n    color:white;\r\n  }\r\n  .MuiRadio-colorSecondary.Mui-checked {\r\n    color:white;\r\n  }\r\n  div.radioContainer {\r\n    display:block;\r\n      .MuiFormControlLabel-root {\r\n        margin-right:0;\r\n      }\r\n      button {\r\n        transform:translateY(4px);\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const StyledDropDownNoLabel = styled(StyledDropDown)`\r\n  .MuiFormLabel-root {\r\n    display:none;\r\n  }\r\n  padding:10px 0 5px 20px !important;\r\n  label + .MuiInput-formControl {\r\n    margin-top:0;\r\n  }\r\n`\r\n\r\nexport const SwitchContainer = styled(Grid)`\r\n  padding-top:4px !important;\r\n  p { \r\n    display: inline;\r\n    color:white;\r\n    transform:translateY(5px);\r\n  }\r\n  span.MuiSwitch-track {\r\n      background-color:${colors.buttongray};\r\n  }\r\n  .MuiSwitch-colorSecondary.Mui-checked {\r\n      color:${colors.lightblue};\r\n  }\r\n  .MuiSwitch-colorSecondary.Mui-checked + .MuiSwitch-track {\r\n      background-color: ${colors.lightblue};\r\n  }\r\n  .MuiSwitch-colorSecondary:hover {\r\n      background-color:${colors.lightblue}55;\r\n  }\r\n`","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport styled from 'styled-components';\r\nimport { setDate, setVariableParams, incrementDate, setMapParams } from '../actions';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { StyledDropDownNoLabel, SwitchContainer } from '../styled_components';\r\nimport { Dock } from '../components';\r\n// import { getParseCSV, getJson, mergeData, colIndex, getDataForBins } from './utils';\r\n\r\nconst SliderContainer = styled.div`\r\n    color: white;\r\n    box-sizing:border-box;\r\n    padding:0 20px;\r\n    width:100%;\r\n`\r\n\r\nconst PlayPauseButton = styled(Button)`\r\n    background:none;\r\n    padding:0;\r\n    margin:0;\r\n    transform:translateY(16px);\r\n    svg {\r\n        width: 30px;\r\n        height:30px;\r\n        g {\r\n            fill: white;\r\n        },\r\n        path {\r\n            fill:white;\r\n        }\r\n    }\r\n    &.MuiButton-text {\r\n        padding:6px 0;\r\n    }\r\n`\r\n\r\nconst LineSlider = styled(Slider)`\r\ntransform:translateY(22px);\r\n    &.MuiSlider-root {\r\n        width:90%;\r\n        margin-left:3%;\r\n        box-sizing:border-box;\r\n    }\r\n    span.MuiSlider-rail {\r\n        color:white;\r\n        height:4px;\r\n    }\r\n    span.MuiSlider-track {\r\n        color:white;\r\n        height:4px;\r\n    }\r\n    span.MuiSlider-thumb {\r\n        color:white;\r\n        width:15px;\r\n        height:15px;\r\n        transform:translate(-1.5px, -1.5px);\r\n        .MuiSlider-valueLabel {\r\n            transform:translateY(-10px);\r\n            pointer-events:none;\r\n            font-size:15px;\r\n            span {\r\n                background: none;\r\n            }\r\n        }\r\n    }\r\n    // .MuiSlider-valueLabel span{\r\n    //     transform:translateX(-100%);        \r\n    // }\r\n    span.MuiSlider-thumb.MuiSlider-active {\r\n        box-shadow: 0px 0px 10px rgba(200,200,200,0.5);\r\n    }\r\n`\r\n\r\nconst RangeSlider = styled(Slider)`\r\n    box-sizing:border-box;\r\n    transform:translateY(22px);\r\n    &.MuiSlider-root {\r\n        width:90%;\r\n        margin-left:3%;\r\n        box-sizing:border-box;\r\n    }\r\n    span.MuiSlider-rail {\r\n        color:white;\r\n        height:4px;\r\n    }\r\n    span.MuiSlider-track {\r\n        color:white;\r\n        height:4px;\r\n    }\r\n    span.MuiSlider-thumb {\r\n        color:white;\r\n        .MuiSlider-valueLabel {\r\n            transform:translateY(0px);\r\n            pointer-events:none;\r\n            span {\r\n                background: none;\r\n            }\r\n        }\r\n    }\r\n    span.MuiSlider-thumb.MuiSlider-active: {\r\n        box-shadow: 0px 0px 10px rgba(200,200,200,0.5);\r\n    }\r\n`\r\n\r\nconst DateTitle = styled.h3`\r\n    width:100%;\r\n    position:absolute;\r\n    font-size:1.05rem;\r\n    top:-5px;\r\n    left:0;\r\n    text-align:center;\r\n    pointer-events:none;\r\n\r\n`\r\nconst InitialDate = styled.p`\r\n    position:absolute;\r\n    left:7%;\r\n    top:0;\r\n    font-size:75%;\r\n`\r\n\r\nconst EndDate = styled(InitialDate)`\r\n    left:initial;\r\n    right:10px;\r\n`\r\nconst DateSlider = () => {\r\n    const dispatch = useDispatch();  \r\n\r\n    const currentData = useSelector(state => state.currentData);\r\n    const dates = useSelector(state => state.dates);\r\n    const dataParams = useSelector(state => state.dataParams);\r\n    const startDateIndex = useSelector(state => state.startDateIndex);\r\n    const mapParams = useSelector(state => state.mapParams);\r\n    const currentVariable = useSelector(state => state.currentVariable);\r\n    \r\n    const [timerId, setTimerId] = useState(null);\r\n    const [customRange, setCustomRange] = useState(false);\r\n    const [rangeSelectVal, setRangeSelectVal] = useState(7);\r\n    \r\n    const handleChange = (event, newValue) => {\r\n\r\n        let tempRange = null;\r\n\r\n        if ((newValue - startDateIndex < 7) && (dataParams.nRange === 7)) tempRange = newValue-startDateIndex || 1\r\n\r\n        if (dataParams.nType === \"time-series\" && dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({nIndex: newValue, dIndex: newValue, nRange: tempRange || dataParams.nRange, dRange: tempRange || dataParams.nRange }))\r\n        } else if (dataParams.nType === \"time-series\") {\r\n            dispatch(setVariableParams({nIndex: newValue, nRange: tempRange || dataParams.nRange}))\r\n        } else if (dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({dIndex: newValue, dRange: tempRange  || dataParams.nRange }))\r\n        } else if (currentVariable.includes('Testing')){\r\n            dispatch(setVariableParams({nIndex: newValue}))\r\n        }\r\n        dispatch(setDate(dates[currentData][newValue]));\r\n    };\r\n\r\n    \r\n    const handleSwitch = () => {\r\n        if (mapParams.binMode === 'dynamic') {\r\n            dispatch(setMapParams({binMode:''}))\r\n        } else {\r\n            dispatch(setMapParams({binMode:'dynamic'}))\r\n        }\r\n    }\r\n    \r\n    // const handleBinChange = (event, newValue) => {\r\n    //     dispatch(setVariableParams(\r\n    //         {\r\n    //             binIndex: newValue \r\n    //         }\r\n    //     ))\r\n    // }\r\n    \r\n    const handleRangeChange = (event, newValue) => { \r\n        if (dataParams.dRange) {\r\n            dispatch(setVariableParams(\r\n                {\r\n                    nIndex: newValue[1], \r\n                    nRange: newValue[1]-newValue[0],\r\n                    rIndex: newValue[1], \r\n                    rRange: newValue[1]-newValue[0]\r\n                }\r\n            ))\r\n        } else {\r\n            dispatch(setVariableParams(\r\n                {\r\n                    nIndex: newValue[1], \r\n                    nRange: newValue[1]-newValue[0]\r\n                }\r\n            ))\r\n        }\r\n    }\r\n\r\n    const handlePlayPause = (timerId, rate, interval) => {\r\n        if (timerId === null) {\r\n            setTimerId(setInterval(o => dispatch(incrementDate(rate)), interval))\r\n        } else {\r\n            clearInterval(timerId);\r\n            setTimerId(null)\r\n        }\r\n    }\r\n    \r\n\r\n    const handleRangeButton = (event) => {\r\n        let val = event.target.value;\r\n\r\n        if (val === 'custom') { // if swapping over to a custom range, which will use a 2-part slider to scrub the range\r\n            setCustomRange(true)\r\n            if (dataParams.nType === \"time-series\" && dataParams.dType === \"time-series\") {\r\n                dispatch(setVariableParams({nRange: 30, dRange: 30}))\r\n            } else if (dataParams.nType === \"time-series\") {\r\n                dispatch(setVariableParams({nRange: 30}))\r\n            } else if (dataParams.dType === \"time-series\") {\r\n                dispatch(setVariableParams({dRange: 30}))\r\n            } \r\n        } else { // use the new value -- null for cumulative, 1 for daily, 7 for weekly\r\n            setCustomRange(false)\r\n            if (dataParams.nType === \"time-series\" && dataParams.dType === \"time-series\") {\r\n                dispatch(setVariableParams({nRange: val, dRange: val}))\r\n            } else if (dataParams.nType === \"time-series\") {\r\n                dispatch(setVariableParams({nRange: val}))\r\n            } else if (dataParams.dType === \"time-series\") {\r\n                dispatch(setVariableParams({dRange: val}))\r\n            }    \r\n        }\r\n        \r\n        setRangeSelectVal(val);\r\n    }\r\n\r\n    const valuetext = (value) => `${dates[currentData][value-startDateIndex].slice(0,-3)}`;\r\n    \r\n    const formatDate = (date) => {\r\n        const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n        let rawDate = new Date(date);\r\n        return rawDate.toLocaleDateString('en-US', options);\r\n    }\r\n\r\n    if (dates[currentData] !== undefined) {\r\n        return (\r\n            <SliderContainer style={{display: ((dataParams.nType === 'time-series' || currentVariable.includes('Testing')) ? 'initial' : 'none')}}>\r\n                <Grid container spacing={2} style={{display:'flex', padding: currentVariable.includes('Testing') ? '0 0 20px 0' : '0'}}>\r\n                    {!customRange && <DateTitle>{formatDate(dates[currentData][dataParams.nIndex-startDateIndex])}</DateTitle>}\r\n                    <Grid item xs={1}>\r\n                        <PlayPauseButton id=\"playPause\" onClick={() => handlePlayPause(timerId, 1, 100)}>\r\n                            {timerId === null ? \r\n                                <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" ><path d=\"M78.627,47.203L24.873,16.167c-1.082-0.625-2.227-0.625-3.311,0C20.478,16.793,20,17.948,20,19.199V81.27  c0,1.25,0.478,2.406,1.561,3.031c0.542,0.313,1.051,0.469,1.656,0.469c0.604,0,1.161-0.156,1.703-0.469l53.731-31.035  c1.083-0.625,1.738-1.781,1.738-3.031C80.389,48.984,79.71,47.829,78.627,47.203z\"></path></svg>\r\n                                : \r\n                                <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                                    <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n                                        <g>\r\n                                            <path d=\"M22.4,0.6c3.4,0,6.8,0,10.3,0c6.5,0,11.8,5.3,11.8,11.8c0,25,0,50.1,0,75.2c0,6.5-5.3,11.8-11.8,11.8\r\n                                                c-3.4,0-6.8,0-10.3,0c-6.5,0-11.8-5.3-11.8-11.8c0-25.1,0-50.2,0-75.2C10.6,5.9,15.9,0.6,22.4,0.6z M22.4,6.5c3.4,0,6.8,0,10.3,0\r\n                                                c3.2,0,5.9,2.6,5.9,5.9c0,25,0,50.1,0,75.2c0,3.2-2.7,5.9-5.9,5.9c-3.4,0-6.8,0-10.3,0c-3.2,0-5.9-2.7-5.9-5.9\r\n                                                c0-25.1,0-50.2,0-75.2C16.5,9.1,19.2,6.5,22.4,6.5z M67.3,6.5c3.4,0,6.8,0,10.2,0s6,2.6,6,5.9c0,25,0,50.1,0,75.2\r\n                                                c0,3.2-2.7,5.9-6,5.9s-6.7,0-10.2,0c-3.3,0-5.9-2.7-5.9-5.9c0-25.1,0-50.2,0-75.2C61.4,9.1,64,6.5,67.3,6.5z M67.3,0.6\r\n                                                c3.4,0,6.8,0,10.2,0c6.5,0,11.8,5.3,11.8,11.8c0,25,0,50.1,0,75.2c0,6.5-5.3,11.8-11.8,11.8c-3.3,0-6.7,0-10.2,0\r\n                                                c-6.5,0-11.8-5.3-11.8-11.8c0-25.1,0-50.2,0-75.2C55.5,5.9,60.8,0.6,67.3,0.6z\"/>\r\n                                        </g>\r\n                                    </g>\r\n                                </svg>\r\n\r\n                            }\r\n                        </PlayPauseButton>\r\n                    </Grid>\r\n                    <Grid item xs={11}> {/* Sliders Grid Item */}\r\n                        {/* Main Slider for changing date */}\r\n                        {!customRange && \r\n                            <LineSlider \r\n                                value={dataParams.nIndex} \r\n                                // valueLabelDisplay=\"on\"\r\n                                onChange={handleChange} \r\n                                // getAriaValueText={valuetext}\r\n                                // valueLabelFormat={valuetext}\r\n                                // aria-labelledby=\"aria-valuetext\"\r\n                                min={startDateIndex}\r\n                                step={1}\r\n                                max={startDateIndex+dates[currentData].length-1}\r\n                        />}\r\n                        {/* Slider for bin date */}\r\n                        {/* {!customRange && \r\n                            <BinSlider \r\n                                value={dataParams.binIndex} \r\n                                valueLabelDisplay=\"auto\"\r\n                                onChange={handleBinChange} \r\n                                getAriaValueText={binValuetext}\r\n                                valueLabelFormat={binValuetext}\r\n                                aria-labelledby=\"aria-valuetext\"\r\n                                min={startDateIndex}\r\n                                step={1}\r\n                                max={startDateIndex+dates[currentData].length-1}\r\n                        />} */}\r\n                        {/* Slider for changing date range */}\r\n                        {customRange && <RangeSlider \r\n                            value={[dataParams.nIndex-dataParams.nRange, dataParams.nIndex]} \r\n                            valueLabelDisplay=\"on\"\r\n                            onChange={handleRangeChange} \r\n                            getAriaValueText={valuetext}\r\n                            valueLabelFormat={valuetext}\r\n                            aria-labelledby=\"aria-valuetext\"\r\n                            min={startDateIndex}\r\n                            step={1}\r\n                            max={startDateIndex+dates[currentData].length-1}\r\n                        />}\r\n                    </Grid>\r\n                    {dataParams.nType !== 'characteristic' &&\r\n                        <Grid item xs={6} id=\"dateRangeSelector\" style={{transform:'translateX(25%)'}}>\r\n                            <StyledDropDownNoLabel>\r\n                                <InputLabel htmlFor=\"date-select\">Date Range</InputLabel>\r\n                                <Select  \r\n                                    id=\"date-select\"\r\n                                    value={rangeSelectVal}\r\n                                    onChange={handleRangeButton}\r\n                                    displayEmpty\r\n                                    inputProps={{ 'aria-label': 'Without label' }}\r\n                                >\r\n                                    <MenuItem value={null} key={'cumulative'}>Cumulative</MenuItem>\r\n                                    <MenuItem value={1} key={'daily'}>New Daily</MenuItem>\r\n                                    <MenuItem value={7} key={'weekly'}>Weekly Average</MenuItem>\r\n                                    <MenuItem value={'custom'} key={'customRange'}>Custom Range</MenuItem>\r\n                                </Select>\r\n                            </StyledDropDownNoLabel>\r\n                        </Grid>\r\n                    }\r\n                    \r\n                    {dataParams.nType !== 'characteristic' &&\r\n                        <SwitchContainer item xs={6} \r\n                            style={{float:'right', transform:'translate(25%, 5px)'}}\r\n                            id=\"binModeSwitch\"\r\n                        >\r\n                            <Switch\r\n                                checked={mapParams.binMode === 'dynamic'}\r\n                                onChange={handleSwitch}\r\n                                name=\"bin chart switch\"\r\n                            />\r\n                            <p>{mapParams.binMode === 'dynamic' ? 'Dynamic Bins' : 'Fixed Bins'}</p>\r\n                        </SwitchContainer>\r\n                    }\r\n                    {!customRange && <InitialDate>{dates[currentData][0]}</InitialDate>}\r\n                    {!customRange && <EndDate>{dates[currentData][dates[currentData].length-1]}</EndDate>}\r\n                </Grid>\r\n                \r\n                <Dock />\r\n            </SliderContainer>\r\n        );\r\n    } else {\r\n        return <SliderContainer />\r\n    }\r\n}\r\n\r\nexport default DateSlider","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\nimport { chart, info } from '../config/svg';\r\nimport { colors } from '../config';\r\n\r\nimport { setPanelState } from '../actions';\r\n\r\nconst DockContainer = styled.div`\r\n    position:absolute;\r\n    left:calc(100% + 1px);\r\n    top:-2px;\r\n    @media (max-width:1024px) {\r\n        position:fixed;\r\n        left:0px;\r\n        top:210px;\r\n    }\r\n    @media (max-width:600px) {\r\n        top:240px;\r\n    }\r\n`\r\n\r\nconst DockButton = styled.button`\r\n    background:${props => props.isActive ? colors.lightgray : colors.gray};\r\n    border:none;\r\n    outline:none;\r\n    padding:10px;\r\n    height:51.5px;\r\n    box-sizing:border-box;\r\n    font-family:'Lato', sans-serif;\r\n    font-weight:bold;\r\n    margin-top:2px;\r\n    box-shadow: 2px 0px 5px rgba(0,0,0,0.7);\r\n    border-radius: 0 0.5vh 0.5vh 0;\r\n    cursor:pointer;\r\n    transition:150ms transform, 150ms background;\r\n    font-size:115%;\r\n    svg {\r\n        width:20px;\r\n        height:20px;\r\n        fill:${props => props.isActive ? colors.darkgray : colors.white};\r\n    }\r\n    &:hover {\r\n        background:${props => props.isActive ? colors.white : colors.darkgray};\r\n        svg {\r\n            fill:${props => props.isActive ? colors.darkgray : colors.lightgray};\r\n        }\r\n    }\r\n    @media (max-width:1024px) {\r\n        height:40px;\r\n        width:40px;\r\n        margin-top:10px;\r\n        display:block;\r\n        border-radius:0;\r\n    }\r\n    \r\n    @media (max-width:600px) {\r\n        height:30px;\r\n        width:30px;\r\n        padding:0;\r\n        svg {\r\n            width:20px;\r\n            height:20px;\r\n        }\r\n    }\r\n`\r\n\r\nconst Dock = () => {\r\n    const panelState = useSelector(state => state.panelState);\r\n    const dispatch = useDispatch();\r\n    const handlePanelButton = (panel) => panelState[panel] ? dispatch(setPanelState({[panel]: false})) : dispatch(setPanelState({[panel]: true}))\r\n    return (\r\n        <DockContainer>\r\n            <DockButton\r\n                title=\"Show Line Chart\"\r\n                isActive={panelState.lineChart}\r\n                onClick={() => handlePanelButton('lineChart')}\r\n            >   \r\n                {chart}\r\n            </DockButton>\r\n            <DockButton\r\n                title=\"Show Tutorial\"\r\n                isActive={panelState.tutorial}\r\n                onClick={() => handlePanelButton('tutorial')}\r\n            >\r\n                {info}\r\n            </DockButton>\r\n        </DockContainer>\r\n    )\r\n} \r\n\r\nexport default Dock","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components'\r\n\r\nimport { colors } from '../config';\r\nimport { setPanelState } from '../actions';\r\n\r\nconst DragContainer = styled.div`\r\n    position:fixed;\r\n    overflow:hidden;\r\n    background:${colors.gray};\r\n    padding:20px 20px 0 20px;\r\n    box-sizing: border-box;\r\n    box-shadow: 0px 0px 5px rgba(0,0,0,0.7);\r\n    border-radius: 0.5vh;\r\n    &.collapsed {\r\n        display:none;\r\n    };\r\n`\r\nconst DragButton = styled.button`\r\n    position:absolute;\r\n    left:0;\r\n    top:5px;\r\n    background:none;\r\n    outline:none;\r\n    border:none;\r\n    cursor:move;\r\n    svg {\r\n        fill:white;\r\n        width:20px;\r\n        height:20px;\r\n    }\r\n`\r\n\r\n\r\nconst CollapseButton = styled.button`\r\n    position: absolute;\r\n    top: 3px;\r\n    right: 5px;\r\n    font-size: 200%;\r\n    cursor: pointer;\r\n    padding:0;\r\n    background:none;\r\n    outline:none;\r\n    border:none;\r\n    color:white;\r\n    p {\r\n        font-size:50%;\r\n        display:inline;\r\n        font-family:'Montserrat', sans-serif;\r\n        line-height:1;\r\n    }\r\n    svg {\r\n        fill:white;\r\n        width:40px;\r\n        height:30px;\r\n    }\r\n`\r\n\r\nconst Draggable = (props) => {\r\n    const dispatch = useDispatch();\r\n    const open = useSelector(state => state.panelState[props.title]);\r\n\r\n    const [X, setX] = useState(props.defaultX);\r\n    const [Y, setY] = useState(props.defaultY);\r\n    const [isDragging, setIsDragging] = useState(false)\r\n\r\n    const listener = (e) => {\r\n        setX(prevWidth => prevWidth+e.movementX)\r\n        setY(prevHeight => prevHeight+e.movementY)\r\n    }\r\n\r\n    const touchListener = (e) => {\r\n        setX(e?.targetTouches[0]?.clientX-15)\r\n        setY(e?.targetTouches[0]?.clientY-15)\r\n    }\r\n\r\n    const removeListener = () => {\r\n        window.removeEventListener('mousemove', listener)\r\n        window.removeEventListener('mouseup', removeListener)\r\n        setIsDragging(false)\r\n    }\r\n\r\n    const removeTouchListener = () => {\r\n        window.removeEventListener('touchmove', touchListener);\r\n        window.removeEventListener('touchend', removeTouchListener);\r\n    }\r\n    \r\n    const handleDown = () => {\r\n        window.addEventListener('mousemove', listener)\r\n        window.addEventListener('mouseup', removeListener)\r\n        setIsDragging(true)\r\n    }\r\n\r\n    const handleTouch = () => {\r\n        window.addEventListener('touchmove', touchListener)\r\n        window.addEventListener('touchend', removeTouchListener)\r\n    }\r\n\r\n    const handleCollapse = () => dispatch(setPanelState({[props.title]: false}))\r\n\r\n    useEffect(() => {\r\n        setX(props.defaultX);\r\n        setY(props.defaultY);\r\n    },[open, props.defaultX, props.defaultY])\r\n\r\n    return (\r\n        <DragContainer style={{left:`${X}px`, top: `${Y}px`, zIndex: props.z || 1}} className={open ? '' : 'collapsed'} isDragging={isDragging}>\r\n            {props.content}\r\n            <DragButton \r\n                id=\"resize\"\r\n                onMouseDown={handleDown}\r\n                onTouchStart={handleTouch}\r\n                style={{zIndex:10}}\r\n            >\r\n                <svg viewBox=\"0 0 64 64\" x=\"0px\" y=\"0px\"><g><path d=\"M53.39,32.57a1.52,1.52,0,0,0-.33-1.63l-5.84-5.85a1.51,1.51,0,0,0-2.13,2.13l3.29,3.28H33.5V15.62l3.28,3.29a1.51,1.51,0,0,0,2.13-2.13l-5.85-5.84a1.5,1.5,0,0,0-2.12,0l-5.85,5.84a1.51,1.51,0,0,0,2.13,2.13l3.28-3.29V30.5H15.62l3.29-3.28a1.51,1.51,0,0,0-2.13-2.13l-5.84,5.85a1.5,1.5,0,0,0,0,2.12l5.84,5.85a1.51,1.51,0,0,0,2.13-2.13L15.62,33.5H30.5V48.38l-3.28-3.29a1.51,1.51,0,0,0-2.13,2.13l5.85,5.84a1.5,1.5,0,0,0,2.12,0l5.85-5.84a1.51,1.51,0,0,0-2.13-2.13L33.5,48.38V33.5H48.38l-3.29,3.28a1.51,1.51,0,0,0,2.13,2.13l5.84-5.85A1.51,1.51,0,0,0,53.39,32.57Z\"></path></g></svg>\r\n            </DragButton>\r\n            <CollapseButton onClick={handleCollapse}>×</CollapseButton>\r\n        </DragContainer>\r\n    )\r\n}\r\n\r\nexport default Draggable;","import React, {useState} from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport { colors } from '../config';\r\n\r\nconst InfoContainer = styled.div`\r\n    background: ${colors.gray};\r\n    color: ${colors.white};\r\n    padding: 0;\r\n    overflow: hidden;\r\n    display: ${props => props.active ? 'initial' : 'none'};\r\n    border-radius: 4px;\r\n    -moz-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    -webkit-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    box-shadow: 0 0 0 2px rgba(0,0,0,.1);\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    svg {\r\n        width: 10px;\r\n        height: 10px;\r\n        padding: 5px;\r\n        fill: ${colors.white};\r\n        display: inline;\r\n        transition: 250ms all;\r\n        cursor: pointer;\r\n    }\r\n    a {\r\n       color: ${colors.yellow}; \r\n       text-decoration:none;\r\n    }\r\n    @media (max-width:1024px) {\r\n        right:50%;\r\n        bottom:50%;\r\n        transform: translate(50%, 50%);\r\n        overflow:hidden;\r\n        -moz-box-shadow: 0 0 5px rgba(0,0,0,.2);\r\n        -webkit-box-shadow: 0 0 5px rgba(0,0,0,.2);\r\n        box-shadow: 0 0 0 5px rgba(0,0,0,.2);\r\n    }\r\n`\r\n\r\nconst PanelContainer = styled.div`\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: ${props => props.position*-100}%;\r\n    display: flex;\r\n    -ms-flex: 1;\r\n    transition: 250ms all;\r\n    width: ${props => props.panelCount*100}%;\r\n`\r\n\r\nconst Panel = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: 20px;\r\n    box-sizing: border-box;\r\n    h3 {\r\n        margin:0;\r\n    }\r\n    p.subtitle {\r\n        font-size:75%;\r\n        padding:0;\r\n        margin:1px;\r\n    } \r\n    ul {\r\n       padding-inline-start: 15px;\r\n    }\r\n    img {\r\n        width: 25px;\r\n        height: 25px;\r\n        padding:5px 10px 0 0;\r\n        transition: 250ms all;\r\n        opacity: 0.7;\r\n    }\r\n    img:hover {\r\n        opacity:1;\r\n    }\r\n\r\n`\r\n\r\nconst DotsContainer = styled.div`\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: calc(100% - 60px);\r\n    height: 25px;\r\n    margin-left: 30px;\r\n    padding: 0 20px;\r\n    box-sizing: border-box;\r\n`\r\n\r\nconst Dot = styled.button`\r\n    background:none;\r\n    outline:none;\r\n    border:none;\r\n    &.active {\r\n        svg {\r\n            transform: scale(1.5);\r\n        }\r\n    }\r\n`\r\n\r\nconst Arrow = styled.svg`\r\n    position: absolute;\r\n    bottom:0;\r\n    &#right-arrow {\r\n        right: 0;\r\n        width: 20px;\r\n        height: 20px;\r\n    }\r\n    &#left-arrow {\r\n        left: 0;\r\n        transform: rotate(180deg);\r\n        width: 20px;\r\n        height: 20px;\r\n    }\r\n`\r\n\r\nconst InfoBox = () => {\r\n    const panelOpen = useSelector(state => state.panelState.tutorial)\r\n\r\n    const [panelPosition, setPanelPosition] = useState(0);\r\n\r\n    const panels = [\r\n        {\r\n            title:`Welcome to the US Covid Atlas`,\r\n            subtitle:`11/22 Hotfix Notes`,\r\n            content: `Please note that we are now using UsaFacts State level data by default. You can explore this dataset under \"Data Source\" and then \"By State\"<br/><br/>          \r\n            If you are returning to this site, please try clearing your\r\n            page cache with a hard refresh (control + shift + R or\r\n            command + shift + R) to avoid any display issues.`\r\n        },\r\n        {\r\n            title:`New Features`,\r\n            subtitle:`November Release Notes`,\r\n            content:`The November release includes state level testing data, new resource layers for hospitals and clinics, map sharing capabilities, and improved data loading times.<br><br>\r\n            State level testing data has a variables for testing positivity, capacity, and confirmed cases. With the new map share button on the right, you can share a link to the map you are viewing. Using the re-designed map overlays, you can overlay a collection of map resources and regional highlights.`\r\n        },\r\n        {\r\n            title:`Getting Started`,\r\n            subtitle:`November Release Notes`,\r\n            content:`To get started, try the following:\r\n            <ul>\r\n              <li>Click the play button in the <a href=\"#\" onclick=\"highlightElement('sliderdiv', 'id')\">timeline</a> on the top of the page to see how the pandemic has unfolded</li>\r\n              <li>Explore <a href=\"#\" onclick=\"highlightElement('select-source', 'id')\">state level data</a> on testing positivity rates and capacities</li>\r\n              <li>Use the <a href=\"#\" onclick=\"highlightElement('mapboxgl-ctrl-geolocate', 'class')\">geolocation</a> function and <a href=\"#\" onclick=\"highlightElement('select-resource', 'id')\">Health Clinics layers</a> to find COVID-19 testing near you</li>\r\n              <li><a href=\"#\" onclick=\"highlightElement('share-container', 'id')\">Share your map</a> on Social Media, or with a colleague or community member</li>\r\n            </ul>`\r\n        },\r\n        {\r\n            title:`Found a bug or have a suggestion?`,\r\n            subtitle:`November Release Notes`,\r\n            content:`The US Covid Atlas team is always working to improve the platform and its ability to generate insights.<br><br>\r\n                Please contact the team at <a href=\"mailto:contact@theuscovidatlas.org\">contact@theuscovidatlas.org</a>\r\n                or reach out on social media below.\r\n                <div class=\"social-container\">\r\n                    <a href=\"https://twitter.com/covid_atlas\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <img src=\"${process.env.PUBLIC_URL}/icons/twitter-icon.png\" alt=\"Twitter Icon\">\r\n                    </a>\r\n                    <a href=\"https://github.com/GeoDaCenter/covid\"  target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <img src=\"${process.env.PUBLIC_URL}/icons/github-icon.png\" alt=\"Twitter Icon\">\r\n                    </a>\r\n                </div>`\r\n        }\r\n    ]\r\n    return (\r\n        <InfoContainer active={panelOpen}>\r\n            <PanelContainer panelCount={panels.length} position={panelPosition}>\r\n                {panels.map((panel,index) => {\r\n                    return (\r\n                        <Panel key={`panel-${index}`}>\r\n                            <h3>{panel.title}</h3>\r\n                            <p className=\"subtitle\">{panel.subtitle}</p>\r\n                            <p dangerouslySetInnerHTML={{__html: panel.content}}></p>\r\n                        </Panel>\r\n                    )\r\n                })}\r\n            </PanelContainer>\r\n            <DotsContainer>\r\n                {panels.map((panel,index) => {\r\n                    return (\r\n                        <Dot key={`dot-${index}`} onClick={() => setPanelPosition(index)} className={panelPosition === index ? 'active' : ''}>\r\n                            <svg viewBox=\"0 0 100 100\" className=\"dot\"><circle cx=\"50\" cy=\"50\" r=\"40\"></circle></svg>\r\n                        </Dot>\r\n                    )\r\n                })}\r\n            </DotsContainer>\r\n            <Arrow viewBox=\"0 0 100 100\" id=\"right-arrow\" onClick={() => setPanelPosition(prev => (prev+1) % panels.length)}><g transform=\"translate(0,-952.36218)\"><path d=\"m 71.20311,1002.3622 -2.84375,-3.28121 -31.99997,-37 -7.5625,6.5624 29.15622,33.71881 -29.15622,33.7188 7.5625,6.5624 31.99997,-37 2.84375,-3.2812 z\"></path></g></Arrow>\r\n            <Arrow viewBox=\"0 0 100 100\" id=\"left-arrow\" onClick={() => setPanelPosition(prev => (prev-1) >= 0 ? prev-1 : panels.length-1)}><g transform=\"translate(0,-952.36218)\"><path d=\"m 71.20311,1002.3622 -2.84375,-3.28121 -31.99997,-37 -7.5625,6.5624 29.15622,33.71881 -29.15622,33.7188 7.5625,6.5624 31.99997,-37 2.84375,-3.2812 z\"></path></g></Arrow>\r\n        </InfoContainer>\r\n    )\r\n}\r\n\r\nexport default InfoBox;","import React from 'react';\r\n\r\nconst BinsList = (props) => {\r\n    let bins = props.data;\r\n\r\n    if (bins.slice(-1,)[0] === '>'+bins.slice(-2,-1)[0]) {\r\n        bins.splice(-2,1)\r\n    }\r\n    return (\r\n        (bins.map(d => <div className=\"bin label\" key={`${d}_${Math.floor(Math.random()*10000)}`}>{d}</div>))\r\n    )\r\n}\r\n\r\nexport default BinsList;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport BinsList from './binsList';\r\n\r\nconst LegendContainer = styled.div`\r\n    width:100%;\r\n    padding:10px;\r\n    margin:0;\r\n    box-sizing: border-box;\r\n    div.MuiGrid-item {\r\n        padding:5px 5px 0 5px;\r\n    }\r\n`\r\n\r\nconst LegendTitle = styled.h3`\r\n    text-align: center;\r\n    font-family:'Playfair Display', serif;\r\n    padding:0;\r\n    font-weight:normal;\r\n    margin:0;\r\n    color:white;\r\n`\r\n\r\nconst BinLabels = styled.div`\r\n    width:100%;\r\n    display: flex;\r\n    margin-top:0px;\r\n    box-sizing: border-box;\r\n    padding: 0 ${props => props.binLength > 6 ? 100/props.binLength/2-1 : 0}%;\r\n    .bin { \r\n        height:10px;\r\n        display: inline;\r\n        border:0;\r\n        margin:0;\r\n        flex:2;\r\n        color:white;\r\n        font-size:10px;\r\n        text-align: center;\r\n    }\r\n    .bin:nth-of-type(1) {\r\n        transform: ${props => props.firstBinZero ? 'translateX(-45%)' : 'none'};\r\n    }\r\n`\r\nconst BinBars = styled.div`\r\n    width:100%;\r\n    display: flex;\r\n    margin-top:10px;\r\n    box-sizing: border-box;\r\n    .bin { \r\n        height:10px;\r\n        display: inline;\r\n        flex:1;\r\n        border:0;\r\n        margin:0;\r\n    }\r\n    .bin:nth-of-type(1) {\r\n        transform: ${props => props.firstBinZero ? 'scaleX(0.35)' : 'none'};\r\n    }\r\n`\r\n\r\n\r\nconst Legend =  () => {\r\n    \r\n    const mapParams = useSelector(state => state.mapParams)\r\n    const title = useSelector(state => state.currentVariable)\r\n\r\n    return (\r\n        <LegendContainer>\r\n            <Grid container spacing={2} id='legend-bins-container'>\r\n                <Grid item xs={12}>\r\n                    <LegendTitle>\r\n                        {title}\r\n                    </LegendTitle>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <BinBars firstBinZero={`${mapParams.colorScale[0]}` === `240,240,240` && mapParams.fixedScale === null}>\r\n                        {\r\n                            mapParams.colorScale !== undefined && \r\n                            mapParams.colorScale.map(color => <div className=\"bin color\" key={`${color[0]}${color[1]}`}style={{backgroundColor:`rgb(${color[0]},${color[1]},${color[2]})`}}></div>)\r\n                        }\r\n                    </BinBars>\r\n                    <BinLabels firstBinZero={`${mapParams.colorScale[0]}` === `240,240,240`} binLength={mapParams.bins.bins.length}>\r\n                        {(`${mapParams.colorScale[0]}` === `240,240,240` && mapParams.fixedScale === null) && <div className=\"bin firstBin\">0</div>}\r\n\r\n                        {\r\n                            mapParams.bins.bins !== undefined && \r\n                            <BinsList data={mapParams.bins.bins} />\r\n                        }\r\n                        \r\n                    </BinLabels>\r\n                </Grid>\r\n            </Grid>\r\n        </LegendContainer>\r\n    )\r\n}\r\n\r\nexport default Legend","import React, {useState} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, ReferenceArea, \r\n  Tooltip, Label, ResponsiveContainer\r\n} from 'recharts';\r\n\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport styled from 'styled-components';\r\nimport { colors } from '../config';\r\nimport { setVariableParams, setDate } from '../actions';\r\n\r\nconst ChartContainer = styled.span`\r\n    background:red;\r\n`\r\n\r\nconst StyledSwitch = styled.div`\r\n    float:left;\r\n    p {\r\n        color:white;\r\n        display:inline;\r\n    }\r\n    span.MuiSwitch-track {\r\n        background-color:${colors.lightgray};\r\n    }\r\n    .MuiSwitch-colorSecondary.Mui-checked {\r\n        color:${colors.lightblue};\r\n    }\r\n    .MuiSwitch-colorSecondary.Mui-checked + .MuiSwitch-track {\r\n        background-color: ${colors.lightblue};\r\n    }\r\n    .MuiSwitch-colorSecondary:hover {\r\n        background-color:${colors.lightblue}55;\r\n    }\r\n`\r\n\r\n\r\nconst ChartTitle = styled.h3`\r\n    text-align: center;\r\n    font-family:'Playfair Display', serif;\r\n    padding:0;\r\n    font-weight:normal;\r\n    margin:0;\r\n    color:white;\r\n`\r\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\nconst millionFormatter = val => { return `${val/1000000}M` };\r\nconst thousandFormatter = val => { return `${val/1000}K` };\r\n// const dateFormatter = val => { \r\n//     let tempDate = new Date(val).getMonth();\r\n//     return `${monthNames[tempDate]}`\r\n// };\r\n\r\nconst CustomTick = props => {\r\n    return <text {...props}>{props.labelFormatter(props.payload.value)}</text>\r\n};\r\n\r\nconst getStartDate = (range, index, data) => {\r\n    if (range === null) {\r\n        try {\r\n            return data.slice(0,1)[0].date\r\n        } catch {\r\n            return null\r\n        }\r\n    } else {\r\n        try {\r\n            return data[index-range].date\r\n        } catch {\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\nconst getEndDate = (index, data) => {\r\n    try {\r\n        return data[index].date;\r\n    } catch {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst CustomTooltip = props => {\r\n    if (props.active) {\r\n        let data = props.payload\r\n        return (\r\n            <div \r\n                style={{\r\n                    background:colors.darkgray,\r\n                    padding:'1px 10px',\r\n                    borderRadius:'4px',\r\n                    boxShadow: '0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12)'\r\n            \r\n            }}> \r\n            <p style={{color:'white', padding:0,}}>{data[0].payload.date}</p>\r\n                {data.map(data => \r\n                    <p style={{color: data.color, textShadow: `2px 2px 4px ${colors.black}`, fontWeight:600}}>{data.name}: {Number.isInteger(Math.floor(data.payload[data.dataKey])) ? \r\n                        Math.floor(data.payload[data.dataKey]).toLocaleString('en') \r\n                        : data.payload[data.dataKey]}\r\n                    </p>\r\n                    \r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n    return null;\r\n};\r\n\r\nconst MainLineChart = () => {\r\n    \r\n    const chartData = useSelector(state => state.chartData);\r\n    const dataParams = useSelector(state => state.dataParams);\r\n    const currentVariable = useSelector(state => state.currentVariable);\r\n    const dates = useSelector(state => state.dates);\r\n    const currentData = useSelector(state => state.currentData);\r\n    const startDateIndex = useSelector(state => state.startDateIndex);\r\n    const sidebarData = useSelector(state => state.sidebarData);\r\n    const [logChart, setLogChart] = useState(false)\r\n    const { properties\r\n       } = useSelector(state => state.sidebarData);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSwitch = () => {\r\n        setLogChart(prev => !prev);\r\n    }\r\n\r\n    const chartSetDate = (e) => {\r\n        if (e.activeTooltipIndex !== undefined) handleChange(e.activeTooltipIndex+startDateIndex)\r\n    }    \r\n\r\n    const handleChange = (newValue) => {\r\n        if (dataParams.nType === \"time-series\" && dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({nIndex: newValue, dIndex: newValue}))\r\n        } else if (dataParams.nType === \"time-series\") {\r\n            dispatch(setVariableParams({nIndex: newValue}))\r\n        } else if (dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({dIndex: newValue}))\r\n        } else if (currentVariable.includes('Testing')){\r\n            dispatch(setVariableParams({nIndex: newValue}))\r\n        }\r\n        dispatch(setDate(dates[currentData][newValue]));\r\n    };\r\n\r\n    return (\r\n        <ChartContainer>\r\n            <ChartTitle>Total Cases and 7-Day Average New Cases{properties && <span>: {properties.NAME}{properties.state_name && `, ${properties.state_name}`}</span>}</ChartTitle>\r\n            <ResponsiveContainer width=\"100%\" height=\"80%\">\r\n                <LineChart\r\n                    data={chartData}\r\n                    margin={{\r\n                        top: 0, right: 10, left: 10, bottom: 0,\r\n                    }}\r\n                    onClick={chartSetDate}\r\n                >\r\n                    <XAxis \r\n                        dataKey=\"date\"\r\n                        tick={\r\n                            <CustomTick\r\n                            style={{\r\n                                fill: `${colors.white}88`,\r\n                                fontSize: \"10px\",\r\n                                fontFamily: \"Lato\",\r\n                                fontWeight: 600,\r\n                                transform:'translateY(10px)'\r\n                            }}\r\n                            labelFormatter={chartSetDate}\r\n                            />\r\n                        }\r\n                    />\r\n                    {/* <YAxis type=\"number\" /> */}\r\n                    <YAxis yAxisId=\"left\" type=\"number\" dataKey=\"count\"  scale={logChart ? \"log\" : \"linear\"} domain={[0.01, 'dataMax']} allowDataOverflow \r\n                        ticks={Object.keys(sidebarData).length === 0 ? [2000000,4000000,6000000,8000000,10000000,12000000,14000000] : []} \r\n                        tick={\r\n                            <CustomTick\r\n                            style={{\r\n                                fill: colors.lightgray,\r\n                                fontSize: \"10px\",\r\n                                fontFamily: \"Lato\",\r\n                                fontWeight: 600\r\n                            }}\r\n                            labelFormatter={Object.keys(sidebarData).length === 0 ? millionFormatter : thousandFormatter}\r\n                            />\r\n                        }\r\n                        >\r\n                        <Label value=\"Total Cases\" position='insideLeft' style={{marginTop:10, fill:colors.lightgray, fontFamily: 'Lato', fontWeight: 600}} angle={-90}  />\r\n                    </YAxis>\r\n                    <YAxis yAxisId=\"right\" orientation=\"right\" dataKey=\"dailyNew\" scale={logChart ? \"log\" : \"linear\"} domain={[0.01, 'dataMax']} allowDataOverflow \r\n                        // ticks={[20000,40000,60000,80000,100000, 120000, 140000]} \r\n                        tick={\r\n                            <CustomTick\r\n                                style={{\r\n                                    fill: colors.lightgray,\r\n                                    fontSize: \"10px\",\r\n                                    fontFamily: \"Lato\",\r\n                                    fontWeight: 600,\r\n                                }}\r\n                                labelFormatter={thousandFormatter}\r\n                            />\r\n                        }\r\n                        >\r\n                        <Label value=\"7-Day Average New Cases\" position='insideTopRight' style={{marginTop:10, fill:colors.yellow, fontFamily: 'Lato', fontWeight: 600}} angle={-90}  />\r\n                    </YAxis>\r\n                    <Tooltip\r\n                        content={CustomTooltip}\r\n                    />\r\n                    <ReferenceArea \r\n                        yAxisId=\"left\"\r\n                        x1={getStartDate(dataParams.nRange, dataParams.nIndex-startDateIndex, chartData)}\r\n                        x2={getEndDate(dataParams.nIndex-startDateIndex, chartData)} \r\n                        fill=\"white\" \r\n                        fillOpacity={0.15}\r\n                        isAnimationActive={false}\r\n                    />\r\n                    <Line type=\"monotone\" yAxisId=\"left\" dataKey=\"count\" name=\"Total Cases\" stroke={colors.lightgray} dot={false} />\r\n                    <Line type=\"monotone\" yAxisId=\"right\" dataKey=\"dailyNew\" name=\"7-Day Average New Cases\" stroke={colors.yellow} dot={false} />\r\n                    <Line type=\"monotone\" yAxisId=\"right\" dataKey=\"selectedGeog\" name=\"Selected Geography Count\" stroke={colors.white} dot={false} />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n            <StyledSwitch>\r\n                <Switch\r\n                    checked={logChart}\r\n                    onChange={handleSwitch}\r\n                    name=\"log chart switch\"\r\n                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                />\r\n                <p>{logChart ? 'Log Scale' : 'Linear Scale'}</p>\r\n            </StyledSwitch>\r\n        </ChartContainer>\r\n    );\r\n}\r\n\r\nexport default MainLineChart\r\n\r\n// dataParams.nIndex-(dataParams.nRange||dataParams.nIndex)","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {fromJS} from 'immutable';\r\nimport {find} from 'lodash';\r\n\r\nimport DeckGL from '@deck.gl/react';\r\nimport {MapView, _GlobeView as GlobeView, FlyToInterpolator} from '@deck.gl/core';\r\nimport { GeoJsonLayer, PolygonLayer, ScatterplotLayer, IconLayer, TextLayer } from '@deck.gl/layers';\r\nimport {fitBounds} from '@math.gl/web-mercator';\r\n// import {SimpleMeshLayer} from '@deck.gl/mesh-layers';\r\n// import {IcoSphereGeometry} from '@luma.gl/engine';\r\n\r\nimport ReactMapGL, {NavigationControl, GeolocateControl, LinearInterpolator } from 'react-map-gl';\r\nimport Geocoder from 'react-map-gl-geocoder'\r\n\r\nimport { MapTooltipContent } from '../components';\r\nimport { setDataSidebar, setMapLoaded, setPanelState, setChartData } from '../actions';\r\nimport { mapFn, dataFn, getVarId, getCSV, getCartogramCenter, getDataForCharts, getURLParams } from '../utils';\r\nimport { colors, colorScales } from '../config';\r\nimport MAP_STYLE from '../config/style.json';\r\n\r\n// const cartoGeom = new IcoSphereGeometry({\r\n//   iterations: 1\r\n// });\r\nconst bounds = fitBounds({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n    bounds: [[-130.14, 53.96],[-67.12, 19]]\r\n})\r\n\r\nconst ICON_MAPPING = {\r\n    hospital: {x: 0, y: 0, width: 128, height: 128},\r\n    clinic: {x: 128, y: 0, width: 128, height: 128},\r\n  };\r\n\r\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoibGl4dW45MTAiLCJhIjoiY2locXMxcWFqMDAwenQ0bTFhaTZmbnRwaiJ9.VRNeNnyb96Eo-CorkJmIqg';\r\n\r\nconst defaultMapStyle = fromJS(MAP_STYLE);\r\n\r\nconst MapContainer = styled.div`\r\n    position:absolute;\r\n    left:0;\r\n    top:0;\r\n    width:100%;\r\n    height:calc(100% - 50px);\r\n    background:${colors.darkgray};\r\n    @media (max-width:600px) {\r\n        div.mapboxgl-ctrl-geocoder {\r\n            display:none;\r\n        }\r\n    }\r\n`\r\n\r\nconst HoverDiv = styled.div`\r\n    background:${colors.gray};\r\n    padding:20px;\r\n    color:white;\r\n    box-shadow: 0px 0px 5px rgba(0,0,0,0.7);\r\n    border-radius:0.5vh 0.5vh 0 0;\r\n    transition:0s all;\r\n    h3 {\r\n        margin:2px 0;\r\n    }\r\n`;\r\n\r\nconst NavInlineButton = styled.button`\r\n    width:29px;\r\n    height:29px;\r\n    padding:5px;\r\n    margin-bottom:10px;\r\n    display:block;\r\n    background-color: ${props => props.isActive ? colors.lightblue : colors.buttongray};\r\n    -moz-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    -webkit-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    box-shadow: 0 0 0 2px rgba(0,0,0,.1);\r\n    border-radius: 4px;\r\n    outline:none;\r\n    border:none;\r\n    transition:250ms all;\r\n    cursor:pointer;\r\n    &:last-of-type {\r\n        margin-top:10px;\r\n    }\r\n    :after {\r\n        opacity: ${props => props.shareNotification ? 1 : 0};\r\n        content:'Map Link Copied to Clipboard!';\r\n        background:${colors.buttongray};\r\n        -moz-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n        -webkit-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n        box-shadow: 0 0 0 2px rgba(0,0,0,.1);\r\n        border-radius: 4px;\r\n        position: absolute;\r\n        transform:translate(-120%, -25%);\r\n        padding:5px;\r\n        width:150px;\r\n        pointer-events:none;\r\n        max-width:50vw;\r\n        transition:250ms all;\r\n    }\r\n`\r\n\r\nconst MapGeocoder = styled(Geocoder)`\r\n    @media (max-width:600px) {\r\n        display:none !important;\r\n    }\r\n`\r\n\r\nconst MapButtonContainer = styled.div`\r\n    position: absolute;\r\n    right: ${props => props.infoPanel ? 317 : 10}px;\r\n    bottom: 30px;\r\n    zIndex: 10;\r\n    transition: 250ms all;\r\n    @media (max-width:768px) {\r\n        bottom:100px;\r\n    }\r\n    @media (max-width: 400px) {\r\n        transform:scale(0.75) translate(20%, 20%);\r\n    }\r\n`\r\n\r\nconst ShareURL = styled.input`\r\n    position:fixed;\r\n    left:110%;\r\n`\r\n\r\nconst viewGlobe = new GlobeView({id: 'globe', controller: false, resolution:1});\r\nconst view = new MapView({repeat: true});\r\n\r\nconst Map = () => { \r\n\r\n    const { storedData, storedGeojson, currentData, storedLisaData,\r\n        storedCartogramData, panelState, dates, dataParams, mapParams,\r\n        currentVariable, startDateIndex, urlParams } = useSelector(state => state);\r\n\r\n    const [hoverInfo, setHoverInfo] = useState(false);\r\n    const [highlightGeog, setHighlightGeog] = useState(false);\r\n    // const [globalMap, setGlobalMap] = useState(false);\r\n    const globalMap = false;\r\n    const [mapStyle, setMapStyle] = useState(defaultMapStyle);\r\n    const [currLisaData, setCurrLisaData] = useState({})\r\n    const [viewState, setViewState] = useState({\r\n        latitude: +urlParams.lat || bounds.latitude,\r\n        longitude: +urlParams.lon || bounds.longitude,\r\n        zoom: +urlParams.z || bounds.zoom,\r\n        bearing:0,\r\n        pitch:0\r\n    })\r\n    const [cartogramData, setCartogramData] = useState([]);\r\n    const [currVarId, setCurrVarId] = useState(null);\r\n    const [hospitalData, setHospitalData] = useState(null);\r\n    const [clinicData, setClinicData] = useState(null);\r\n    const [storedCenter, setStoredCenter] = useState(null);\r\n    const [shared, setShared] = useState(false);\r\n    // const [mobilityData, setMobilityData] = useState([]);\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => { \r\n        window.addEventListener('storage', () => {\r\n            // When local storage changes, dump the list to\r\n            // the console.\r\n            const SHARED_GEOID =  parseInt(localStorage.getItem('SHARED_GEOID'));\r\n            \r\n            if (SHARED_GEOID !== null && Number.isInteger(SHARED_GEOID)) {\r\n                setHighlightGeog(parseInt(SHARED_GEOID)); \r\n            }\r\n            \r\n            const SHARED_VIEW =  JSON.parse(localStorage.getItem('SHARED_VIEW'));\r\n            \r\n            if (SHARED_VIEW !== null && SHARED_VIEW.hasOwnProperty('latitude')) {\r\n                setViewState(\r\n                    prevView => ({\r\n                        ...prevView,\r\n                        longitude: SHARED_VIEW.longitude,\r\n                        latitude: SHARED_VIEW.latitude,\r\n                        zoom: SHARED_VIEW.zoom,\r\n                        transitionDuration: 1000,\r\n                        transitionInterpolator: new FlyToInterpolator()\r\n                    })\r\n                )   \r\n            }\r\n        });\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        let arr = [];\r\n        if (storedData[currentData] && mapParams.vizType === 'cartogram') {\r\n            for (let i=0; i<storedData[currentData].length; i++) {\r\n                arr.push({id:i})\r\n            }\r\n        }\r\n        setCartogramData(arr)\r\n    }, [storedData, currentData, mapParams.vizType])\r\n\r\n    useEffect(() => {\r\n        setCurrVarId(getVarId(currentData, dataParams))\r\n    }, [dataParams, mapParams])\r\n\r\n\r\n    useEffect(() => {\r\n        switch(mapParams.vizType) {\r\n            case '2D': \r\n                setViewState(view => ({\r\n                    ...view,\r\n                    latitude: +urlParams.lat || bounds.latitude,\r\n                    longitude: +urlParams.lon || bounds.longitude,\r\n                    zoom: +urlParams.z || bounds.zoom,\r\n                    bearing:0,\r\n                    pitch:0\r\n                }));\r\n                setStoredCenter(null)\r\n                break\r\n            case '3D':\r\n                setViewState(view => ({\r\n                    ...view,\r\n                    latitude: +urlParams.lat || 39.8283,\r\n                    longitude: +urlParams.lon || -98.5795,\r\n                    zoom: +urlParams.z || bounds.zoom,\r\n                    bearing:-30,\r\n                    pitch:30\r\n                }));\r\n                setStoredCenter(null)\r\n                break\r\n            // case 'cartogram':\r\n            //     useCallback(() => {\r\n            //         let center = getCartogramCenter(storedCartogramData[getVarId(currentData, dataParams)])\r\n            //         setViewState(view => ({\r\n            //             ...view,\r\n            //             latitude: center[1],\r\n            //             longitude: center[0],\r\n            //             zoom: 5,\r\n            //             bearing:0,\r\n            //             pitch:0\r\n            //         }));\r\n            //     }, [cartogramData])\r\n            //     break\r\n            default:\r\n                //\r\n        }\r\n    }, [mapParams.vizType, currentData])\r\n\r\n    useEffect(() => {\r\n        let tempData = storedLisaData[getVarId(currentData, dataParams)]\r\n        if (tempData !== undefined) setCurrLisaData(tempData);\r\n    }, [storedLisaData, dataParams, mapParams])\r\n\r\n    useEffect(() => {\r\n        const defaultLayers = defaultMapStyle.get('layers');\r\n        let tempLayers;\r\n\r\n        if (mapParams.vizType === 'cartogram' || globalMap) {\r\n            tempLayers = defaultLayers.map(layer => {\r\n                return layer.setIn(['layout', 'visibility'], 'none');\r\n            });\r\n        } else if (mapParams.vizType === '3D') {\r\n            tempLayers = defaultLayers.map(layer => {\r\n                if ((layer.get('id').includes('label')) && !(layer.get('id').includes('water'))) return layer;\r\n                return layer.setIn(['layout', 'visibility'], 'none');\r\n            });\r\n        } else {\r\n            tempLayers = defaultLayers.map(layer => {\r\n                if (mapParams.resource.includes(layer.get('id')) || mapParams.overlay.includes(layer.get('id'))) {\r\n                    return layer.setIn(['layout', 'visibility'], 'visible');\r\n                } else {\r\n                    return layer;\r\n                }\r\n            });\r\n        }\r\n        setMapStyle(defaultMapStyle.set('layers', tempLayers));\r\n\r\n    }, [mapParams.overlay, mapParams.vizType])\r\n\r\n    useEffect(() => {\r\n        if (hospitalData === null) {\r\n            getCSV(`${process.env.PUBLIC_URL}/csv/us_healthcare_capacity-facility-CovidCareMap.csv`)\r\n            .then(values => setHospitalData(values))\r\n        }\r\n\r\n        if (clinicData === null) {\r\n            getCSV(`${process.env.PUBLIC_URL}/csv/health_centers.csv`)\r\n            .then(values => setClinicData(values))\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (storedCartogramData[getVarId(currentData, dataParams)]){\r\n            let center = getCartogramCenter(storedCartogramData[getVarId(currentData, dataParams)])\r\n            let roundedCenter = [Math.floor(center[0]),Math.floor(center[1])]\r\n            if (storedCenter === null || roundedCenter[0] !== storedCenter[0]) {\r\n                setViewState(view => ({\r\n                    ...view,\r\n                    latitude: center[1],\r\n                    longitude: center[0],\r\n                    zoom: 5,\r\n                    bearing:0,\r\n                    pitch:0\r\n                }));\r\n                setStoredCenter(roundedCenter)\r\n            }\r\n        }\r\n    }, [storedCartogramData, currentData])\r\n\r\n    useEffect(() => {\r\n        setViewState(view => ({\r\n            ...view,\r\n            latitude: +urlParams.lat || bounds.latitude,\r\n            longitude: +urlParams.lon || bounds.longitude,\r\n            zoom: +urlParams.z || bounds.zoom,\r\n            bearing:0,\r\n            pitch:0\r\n        }));\r\n    }, [urlParams])\r\n    \r\n    const GetFillColor = (f, bins, mapType) => {\r\n        if (!bins.hasOwnProperty(\"bins\")) {\r\n            return [0,0,0]\r\n        } else if (mapType === 'lisa') {\r\n            return colorScales.lisa[currLisaData[storedGeojson[currentData]['geoidOrder'][f.properties.GEOID]]]\r\n        } else {\r\n            return mapFn(dataFn(f[dataParams.numerator], f[dataParams.denominator], dataParams), bins.breaks, mapParams.colorScale, mapParams.mapType) \r\n        }\r\n    }\r\n    \r\n    const GetHeight = (f, bins) => bins.hasOwnProperty(\"bins\") ? dataFn(f[dataParams.numerator], f[dataParams.denominator], dataParams)*(dataParams.scale3D/((dataParams.nType === \"time-series\" && dataParams.nRange === null) ? (dataParams.nIndex-startDateIndex)/10 : 1)) : 0\r\n        \r\n    const handleGeolocate = (viewState) => {\r\n        setViewState(view => ({\r\n            ...view,\r\n            latitude: viewState.coords.latitude,\r\n            longitude: viewState.coords.longitude,\r\n            zoom: 8,\r\n            transitionInterpolator: new FlyToInterpolator(),\r\n            transitionDuration: 250,\r\n        }))\r\n    }\r\n\r\n    const getCartogramFillColor = (val, id, bins, mapType) => {\r\n        \r\n        if (!bins.hasOwnProperty(\"bins\")) {\r\n            return [0,0,0]\r\n        } else if (mapType === 'lisa') {\r\n            return colorScales.lisa[currLisaData[id]]\r\n        } else {\r\n            return mapFn(val, bins.breaks, mapParams.colorScale, mapParams.mapType) \r\n        }\r\n    }\r\n\r\n    const mapRef = useRef();\r\n\r\n    const Layers = [\r\n        // new SolidPolygonLayer({\r\n        //     id: 'background',\r\n        //     data: [\r\n        //       [[-180, 90], [0, 90], [180, 90], [180, -90], [0, -90], [-180, -90]]\r\n        //     ],\r\n        //     getPolygon: d => d,\r\n        //     stroked: false,\r\n        //     filled: true,\r\n        //     visible: globalMap,\r\n        //     updateTriggers: {\r\n        //         visible: globalMap\r\n        //     },\r\n        //     getFillColor: [40, 40, 40]\r\n        //   }),\r\n        new GeoJsonLayer({\r\n            id: 'choropleth',\r\n            data: {\r\n                \"type\": \"FeatureCollection\",\r\n                \"name\": currentData,\r\n                \"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\r\n                \"features\": storedData[currentData] ? storedData[currentData] : [],\r\n            },\r\n            visible: mapParams.vizType !== 'cartogram',\r\n            pickable: mapParams.vizType !== 'cartogram',\r\n            stroked: false,\r\n            filled: true,\r\n            wireframe: mapParams.vizType === '3D',\r\n            extruded: mapParams.vizType === '3D',\r\n            opacity: 0.8,\r\n            material:false,\r\n            getFillColor: f => GetFillColor(f, mapParams.bins, mapParams.mapType),\r\n            getElevation: f => GetHeight(f, mapParams.bins, mapParams.mapType),\r\n            // getLineColor: [255, 80, 80],\r\n            // getLineWidth:50,\r\n            // minLineWidth:20,\r\n            // lineWidthScale: 20,\r\n            updateTriggers: {\r\n                data: currentData,\r\n                pickable: mapParams.vizType,\r\n                getFillColor: [dataParams, mapParams],\r\n                getElevation: [dataParams, mapParams],\r\n            },\r\n            onHover: info => {\r\n                try {\r\n                    setHoverInfo(info)\r\n                } catch {\r\n                    setHoverInfo(null)\r\n                }\r\n            },\r\n            onClick: info => {\r\n                try {\r\n                    dispatch(setDataSidebar(info.object));\r\n                    setHighlightGeog(info.object.properties.GEOID); \r\n                    dispatch(setChartData(getDataForCharts({data: info.object}, 'cases', startDateIndex, dates[currentData], info.object?.properties?.population/100000||1)));\r\n                    window.localStorage.setItem('SHARED_GEOID', info.object.properties.GEOID);\r\n                    window.localStorage.setItem('SHARED_VIEW', JSON.stringify(mapRef.current.props.viewState));\r\n                    // if (mapParams.overlay === \"mobility-county\") {\r\n                    //     setMobilityData(parseMobilityData(info.object.properties.GEOID, storedMobilityData.flows[info.object.properties.GEOID], storedMobilityData.centroids));\r\n                    // }\r\n                } catch {}\r\n\r\n            },\r\n                // parameters: {\r\n                //     depthTest: false\r\n                // }\r\n        }),\r\n        new GeoJsonLayer({\r\n            id: 'highlightLayer',\r\n            data: {\r\n                \"type\": \"FeatureCollection\",\r\n                \"name\": currentData,\r\n                \"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\r\n                \"features\": storedData[currentData] ? storedData[currentData] : [],\r\n            },\r\n            pickable: false,\r\n            stroked: true,\r\n            filled:false,\r\n            getLineColor: f => (highlightGeog === f.properties.GEOID ? [20,20,20] : [20,20,20,0]), \r\n            lineWidthScale: 500,\r\n            getLineWidth: 5,\r\n            lineWidthMinPixels: 3,\r\n            lineWidthMaxPixels: 10,\r\n            updateTriggers: {\r\n                data: currentData,\r\n                getLineColor: highlightGeog,\r\n            },\r\n        }),\r\n        // new LineLayer({\r\n        //     id: 'mobility flows',\r\n        //     data: mobilityData,\r\n        //     pickable: false,\r\n        //     visible: mapParams.overlay === \"mobility-county\",\r\n        //     widthUnits: 'meters',\r\n        //     widthScale: 10000,\r\n        //     getSourcePosition: d => [d[1],d[2]],\r\n        //     getTargetPosition: d => [d[3],d[4]],\r\n        //     getWidth: d => d[5] < 10 ? d[5] : 0,\r\n        //     updateTriggers: {\r\n        //         data: [mobilityData],\r\n        //         visible: [mapParams.overlay]\r\n        //     }\r\n        // }),\r\n        new IconLayer({\r\n            id: 'hospital-layer',\r\n            data: hospitalData,\r\n            pickable:true,\r\n            visible: mapParams.resource.includes('hospital'),\r\n            iconAtlas: `${process.env.PUBLIC_URL}/assets/img/icon_atlas.png`,\r\n            iconMapping: ICON_MAPPING,\r\n            getIcon: d => 'hospital',\r\n            getPosition: d => [d.Longitude, d.Latitude],\r\n            sizeUnits: 'meters',\r\n            getSize: 20000,\r\n            sizeMinPixels:12,\r\n            sizeMaxPixels:24,\r\n            updateTriggers: {\r\n                data: hospitalData,\r\n                visible: mapParams\r\n            },\r\n            onHover: info => {\r\n                try {\r\n                    setHoverInfo(info)\r\n                } catch {\r\n                    setHoverInfo(null)\r\n                }\r\n            },\r\n        }),\r\n        new IconLayer({\r\n            id: 'clinics-layer',\r\n            data: clinicData,\r\n            pickable:true,\r\n            visible: mapParams.resource.includes('clinic'),\r\n            iconAtlas: `${process.env.PUBLIC_URL}/assets/img/icon_atlas.png`,\r\n            iconMapping: ICON_MAPPING,\r\n            getIcon: d => 'clinic',\r\n            getSize: 20000,\r\n            getPosition: d => [d.lon, d.lat],\r\n            sizeUnits: 'meters',\r\n            sizeMinPixels:7,\r\n            sizeMaxPixels:20,\r\n            updateTriggers: {\r\n                data: clinicData,\r\n                visible: mapParams\r\n            },\r\n            onHover: info => {\r\n                try {\r\n                    setHoverInfo(info)\r\n                } catch {\r\n                    setHoverInfo(null)\r\n                }\r\n            },\r\n        }),\r\n        new PolygonLayer({\r\n            id: 'background',\r\n            data: [\r\n                // prettier-ignore\r\n                [[-180, 90], [0, 90], [180, 90], [180, -90], [0, -90], [-180, -90]]\r\n            ],\r\n            opacity: 1,\r\n            getPolygon: d => d,\r\n            stroked: false,\r\n            filled: true,\r\n            visible: mapParams.vizType === 'cartogram',\r\n            getFillColor: [10,10,10],\r\n            updateTriggers: {\r\n                visible: mapParams.vizType,\r\n            }\r\n        }),\r\n        new ScatterplotLayer({\r\n            id: 'cartogram layer',\r\n            data: cartogramData,\r\n            pickable:true,\r\n            visible: mapParams.vizType === 'cartogram',\r\n            getPosition: f => {\r\n                try {\r\n                    return storedCartogramData[currVarId][f.id].position;\r\n                } catch {\r\n                    return [0,0];\r\n                }\r\n            },\r\n            getFillColor: f => {\r\n                try {\r\n                    return getCartogramFillColor(storedCartogramData[currVarId][f.id].value, f.id, mapParams.bins, mapParams.mapType);\r\n                } catch {\r\n                    return [0,0,0];\r\n                }\r\n            },\r\n            getRadius: f => {\r\n                try {\r\n                    return storedCartogramData[currVarId][f.id].radius*10;\r\n                } catch {\r\n                    return 0;\r\n                }\r\n            },\r\n            // transitions: {\r\n            //     getPosition: 1,\r\n            //     getFillColor: 1,\r\n            //     getRadius: 1\r\n            // },   \r\n            onHover: f => {\r\n                try {\r\n                    setHoverInfo(\r\n                        {\r\n                            ...f,\r\n                            object: find(storedData[currentData], o => o.properties.GEOID === storedGeojson[currentData]['indexOrder'][f.object?.id]),\r\n                        }\r\n                    )\r\n                } catch {\r\n                    setHoverInfo(null)\r\n                }\r\n            },\r\n            updateTriggers: {\r\n                getPosition: [cartogramData, mapParams, dataParams, currVarId],\r\n                getFillColor: [cartogramData, mapParams, dataParams, currVarId],\r\n                getRadius: [cartogramData, mapParams, dataParams, currVarId],\r\n                visible: [cartogramData, mapParams, dataParams, currVarId]\r\n            }\r\n          }),\r\n          new TextLayer({\r\n            id: 'cartogram text layer',\r\n            data: cartogramData,\r\n            pickable:false,\r\n            visible: mapParams.vizType === 'cartogram' && currentData.includes('state'),\r\n            getPosition: f => {\r\n                try {\r\n                    return storedCartogramData[currVarId][f.id].position;\r\n                } catch {\r\n                    return [0,0];\r\n                }\r\n            },\r\n            sizeUnits: 'meters',\r\n            fontWeight: 'bold',\r\n            getTextAnchor: 'middle',\r\n            getAlignmentBaseline: 'center',\r\n            maxWidth: 500,\r\n            wordBreak: 'break-word',\r\n            getSize: f => {\r\n                try {\r\n                    return storedCartogramData[currVarId][f.id].radius*5;\r\n                } catch {\r\n                    return 0;\r\n                }\r\n            },\r\n            getText: f => {\r\n                try {\r\n                    if (currentData.includes('state')) return find(storedData[currentData], o => +o.properties.GEOID === storedGeojson[currentData].indexOrder[f.id]).properties.NAME;\r\n                    return '';\r\n                } catch {\r\n                    return '';\r\n                }\r\n            },\r\n            updateTriggers: {\r\n                getPosition: [cartogramData, mapParams, dataParams, currVarId],\r\n                getFillColor: [cartogramData, mapParams, dataParams, currVarId],\r\n                getSize: [cartogramData, mapParams, dataParams, currVarId],\r\n                getRadius: [cartogramData, mapParams, dataParams, currVarId],\r\n                visible: [cartogramData, mapParams, dataParams, currVarId]\r\n            }\r\n          }),\r\n        // new SimpleMeshLayer({\r\n        //     id: 'cartogram layer',\r\n        //     data: cartogramData,\r\n        //     // texture: 'texture.png',\r\n        //     sizeScale:10,\r\n        //     visible: mapParams.vizType === 'cartogram',\r\n        //     mesh: cartoGeom,\r\n        //     getPosition: f => {\r\n        //         try {\r\n        //             return storedCartogramData[currVarId][f.id].position;\r\n        //         } catch {\r\n        //             return [0,0];\r\n        //         }\r\n        //     },\r\n        //     getColor: f => getCartogramFillColor(storedCartogramData[currVarId][f.id].value, mapParams.bins, mapParams.mapType),\r\n        //     getScale: f => 500,\r\n        //     // getTranslation: f => getCartogramTranslation(storedCartogramData[currVarId][f.id]),\r\n        //     transitions: {\r\n        //         getPosition: 150,\r\n        //         getColor: 150,\r\n        //         getScale: 150,\r\n        //         getTranslation: 150\r\n        //     },   \r\n        //     updateTriggers: {\r\n        //         getPosition: [mapParams, dataParams, currVarId],\r\n        //         getColor: [mapParams, dataParams, currVarId],\r\n        //         getScale: [mapParams, dataParams, currVarId],\r\n        //         getTranslation: [mapParams, dataParams, currVarId]\r\n        //     }\r\n        //   })\r\n    ]\r\n\r\n    const handleShare = async (params) => {\r\n        const shareData = {\r\n            title: 'The US Covid Atlas',\r\n            text: 'Near Real-Time Exploration of the COVID-19 Pandemic.',\r\n            url: `${window.location.href}${getURLParams(params)}`,\r\n        }\r\n\r\n        try {\r\n            await navigator.share(shareData)\r\n          } catch(err) {\r\n            let copyText = document.querySelector(\"#share-url\");\r\n            copyText.value = `${shareData.url}`;\r\n            copyText.style.display = 'block'\r\n            copyText.select();\r\n            copyText.setSelectionRange(0, 99999);\r\n            document.execCommand(\"copy\");\r\n            copyText.style.display = 'none';\r\n            setShared(true)\r\n            setTimeout(() => setShared(false), 5000);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MapContainer>\r\n            <DeckGL\r\n                initialViewState={viewState}\r\n                controller={true}\r\n                layers={Layers}\r\n                views={globalMap ? viewGlobe : view} //enable this for globe view \r\n                onViewPortChange={() => console.log('moved')}\r\n            >\r\n                <ReactMapGL\r\n                    reuseMaps\r\n                    ref={mapRef}\r\n                    mapStyle={mapStyle} //{globalMap || mapParams.vizType === 'cartogram' ? 'mapbox://styles/lixun910/ckhtcdx4b0xyc19qzlt4b5c0d' : 'mapbox://styles/lixun910/ckhkoo8ix29s119ruodgwfxec'}\r\n                    preventStyleDiffing={true}\r\n                    mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n                    onViewportChange={() => setHoverInfo(false)}\r\n                    // onViewportChange={viewState  => console.log(mapRef.current.props.viewState)} \r\n                    onLoad={() => {\r\n                        dispatch(setMapLoaded(true))\r\n                    }}\r\n                    >\r\n                        \r\n                    <MapGeocoder \r\n                    mapRef={mapRef}\r\n                    onViewportChange={viewState  => setViewState(viewState)} \r\n                    mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n                    position=\"top-right\"\r\n                    id=\"mapGeocoder\"\r\n                    style={{position: 'fixed', top:'5px', right:'5px'}}\r\n                    />\r\n                        \r\n                    <MapButtonContainer infoPanel={panelState.info}>\r\n                        {/* <NavInlineButton\r\n                            onClick={() => setGlobalMap(prev => !prev)}\r\n                            isActive={globalMap}\r\n                        >\r\n                            <svg  x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" >\r\n                                <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n                                    <g>\r\n                                        <path d=\"M50-21c-39.2,0-71,31.9-71,71c0,39.2,31.9,71,71,71c39.2,0,71-31.9,71-71C121,10.8,89.2-21,50-21z M50-10.9\r\n                                            c1.7,0,3.7,0.9,6.1,3.5c2.4,2.7,4.9,7,7.1,12.5c2.1,5.4,3.8,12.1,5.1,19.4H31.7c1.2-7.4,3-14,5.1-19.4c2.1-5.6,4.7-9.9,7.1-12.5\r\n                                            C46.3-10,48.3-10.9,50-10.9z M32-8.2c-1.7,2.9-3.3,6.1-4.7,9.7c-2.6,6.7-4.6,14.5-5.9,23.1H-5.3C1.8,9,15.4-3.1,32-8.2z M68-8.2\r\n                                            C84.6-3.1,98.2,9,105.3,24.6H78.6C77.2,16,75.2,8.2,72.7,1.5C71.3-2.1,69.7-5.3,68-8.2z M-8.9,34.8h29.1c-0.4,4.9-0.7,10-0.7,15.2\r\n                                            c0,5.2,0.2,10.3,0.7,15.2H-8.9c-1.3-4.9-2-10-2-15.2C-10.9,44.7-10.2,39.6-8.9,34.8z M30.5,34.8h39c0.5,4.9,0.8,9.9,0.8,15.2\r\n                                            c0,5.3-0.3,10.3-0.8,15.2h-39c-0.5-4.9-0.8-9.9-0.8-15.2C29.7,44.7,30,39.7,30.5,34.8z M79.8,34.8h29.1c1.3,4.9,2,10,2,15.2\r\n                                            c0,5.3-0.7,10.4-2,15.2H79.8c0.4-4.9,0.7-10,0.7-15.2C80.4,44.8,80.2,39.7,79.8,34.8z M-5.3,75.4h26.8c1.3,8.6,3.3,16.4,5.9,23.1\r\n                                            c1.4,3.6,2.9,6.8,4.7,9.7C15.4,103.1,1.8,91-5.3,75.4z M31.7,75.4h36.5c-1.2,7.4-3,14-5.1,19.5c-2.1,5.6-4.7,9.9-7.1,12.5\r\n                                            c-2.4,2.7-4.4,3.5-6.1,3.5s-3.7-0.9-6.1-3.5c-2.4-2.7-4.9-7-7.1-12.5C34.7,89.4,33,82.8,31.7,75.4z M78.6,75.4h26.8\r\n                                            C98.2,91,84.6,103.1,68,108.2c1.7-2.9,3.3-6.1,4.7-9.7C75.2,91.8,77.2,84,78.6,75.4z\"/>\r\n                                    </g>\r\n                                </g>\r\n                            </svg>\r\n                        </NavInlineButton> */}\r\n                        {/* <NavInlineButton\r\n                            onClick={() => console.log( getCartogramCenter(storedCartogramData[getVarId(currentData, dataParams)]))}\r\n                            isActive={mapParams.use3d}\r\n                        >\r\n                            <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                                <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n                                    <path d=\"M109,23.7c0-1-0.2-1.9-0.7-2.8c-0.1-0.2-0.3-0.4-0.5-0.7c-0.4-0.6-0.8-1.1-1.3-1.5l0,0L54.1-20.5c-2.3-1.7-5.5-1.7-7.9,0\r\n                                        L-6.2,18.8l0,0c-0.5,0.4-1,0.9-1.3,1.5C-7.7,20.5-7.8,20.7-8,21c-0.6,0.8-0.9,1.8-1,2.8v52.5c0,0,0,0,0,0.5c0.2,1.7,1,3.3,2.2,4.5\r\n                                        v0.3l52.5,39.3l0.9,0.5l0.7,0.4c1.5,0.6,3.2,0.6,4.7,0l0.7-0.4l0.9-0.5l52.5-39.3v-0.3c1.3-1.2,2.1-2.8,2.2-4.5c0,0,0,0,0-0.5\r\n                                        L109,23.7z M4.1,36.8l39.3,29.5v36.1L4.1,72.9V36.8z M56.6,66.3l39.3-29.5v36.1l-39.3,29.5V66.3z M50-7.4l41.5,31.1L50,54.9\r\n                                        L8.5,23.7L50-7.4z\"/>\r\n                                </g>\r\n                            </svg>\r\n                        </NavInlineButton> */}\r\n                        {/* <NavInlineButton\r\n                            title=\"Show Line Chart\"\r\n                            isActive={panelState.lineChart}\r\n                            onClick={() => handlePanelButton('lineChart')}\r\n                        >\r\n                            {chart}\r\n                        </NavInlineButton>\r\n                        <NavInlineButton\r\n                            title=\"Show Tutorial\"\r\n                            isActive={panelState.tutorial}\r\n                            onClick={() => handlePanelButton('tutorial')}\r\n                        >\r\n                            {info}\r\n                        </NavInlineButton> */}\r\n                        <GeolocateControl\r\n                            positionOptions={{enableHighAccuracy: false}}\r\n                            trackUserLocation={false}\r\n                            onGeolocate={viewState  => handleGeolocate(viewState)}\r\n                            style={{marginBottom: 10}}\r\n                        />\r\n                        <NavigationControl\r\n                            onViewportChange={viewState  => setViewState(viewState)} \r\n                        />\r\n                        \r\n                        <NavInlineButton\r\n                            title=\"Share this Map\"\r\n                            shareNotification={shared}\r\n                            onClick={() => handleShare({URLmapParams:mapParams, URLcurrentData:currentData, URLcurrentVariable:currentVariable, URLviewState: mapRef.current.props.viewState})}\r\n                        >\r\n                            <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                                <path d=\"M22.5,65c4.043,0,7.706-1.607,10.403-4.208l29.722,14.861C62.551,76.259,62.5,76.873,62.5,77.5c0,8.284,6.716,15,15,15   s15-6.716,15-15c0-8.284-6.716-15-15-15c-4.043,0-7.706,1.608-10.403,4.209L37.375,51.847C37.449,51.241,37.5,50.627,37.5,50   c0-0.627-0.051-1.241-0.125-1.847l29.722-14.861c2.698,2.601,6.36,4.209,10.403,4.209c8.284,0,15-6.716,15-15   c0-8.284-6.716-15-15-15s-15,6.716-15,15c0,0.627,0.051,1.241,0.125,1.848L32.903,39.208C30.206,36.607,26.543,35,22.5,35   c-8.284,0-15,6.716-15,15C7.5,58.284,14.216,65,22.5,65z\">\r\n                                </path>\r\n                            </svg>\r\n\r\n                        </NavInlineButton>\r\n                        <ShareURL type=\"text\" value=\"\" id=\"share-url\" />\r\n                    </MapButtonContainer>\r\n                    <div></div>\r\n                </ReactMapGL >\r\n                {hoverInfo.object && (\r\n                <HoverDiv style={{position: 'absolute', zIndex: 1, pointerEvents: 'none', left: hoverInfo.x, top: hoverInfo.y}}>\r\n                    <MapTooltipContent content={hoverInfo.object} />\r\n                </HoverDiv>\r\n                )}\r\n            </DeckGL>\r\n        </MapContainer>\r\n    ) \r\n}\r\n\r\nexport default Map","import React from 'react';\r\n\r\n\r\n// This component handles and formats the map tooltip info. \r\n// The props passed to this component should contain an object of the hovered object (from deck, info.object by default)\r\nconst MapTooltipContent = (props) => {\r\n    // destructure the object for cleaner formatting\r\n\r\n    const { properties, cases, deaths, // county data\r\n            testing_ccpt, testing_tcap, testing_wk_pos, testing // state data\r\n     } = props.content;\r\n\r\n    // get lengths of time series data for reference below\r\n    let caseN = cases && cases.length-1;\r\n    let deathN = deaths && deaths.length-1;\r\n    let testingN = testing && testing.length-1;\r\n\r\n    // conditional returns for combination of information\r\n    // this is not elegant but a bit more reliable than JSX conditional rendering\r\n    if (properties && cases && deaths && testing) { // State Feature\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    {properties.NAME}\r\n                </h3>\r\n                <div>\r\n                    <hr />\r\n                    Cases: {cases[caseN].toLocaleString('en')}<br/>\r\n                    New Cases: {(cases[caseN]-cases[caseN-1]).toLocaleString('en')}<br/>\r\n                    Deaths: {deaths[deathN].toLocaleString('en')}<br/>\r\n                    New Deaths: {(deaths[deathN]-deaths[deathN-1]).toLocaleString('en')}<br/>\r\n                    Total Testing: {(testing[testingN]).toLocaleString('en')}<br/>\r\n                    7-Day Positivity Rate: {(testing_wk_pos[testingN]*100).toFixed(2)}%<br/>\r\n                    7-Day Testing Capacity: {(testing_tcap[testingN]).toFixed(2)}<br/>\r\n                    7-Day Confirmed Cases per Testing: {(testing_ccpt[testingN]*100).toFixed(2)}%<br/>\r\n                    Testing Criterion: {properties.criteria}<br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (properties && cases && deaths){ // County Feature\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    {properties.NAME} {properties.state_name && `, ${properties.state_name}`}\r\n                </h3>\r\n                <div>\r\n                    <hr />\r\n                    Cases: {cases[caseN].toLocaleString('en')}<br/>\r\n                    Deaths: {deaths[deathN].toLocaleString('en')}<br/>\r\n                    New Cases: {(cases[caseN]-cases[caseN-1]).toLocaleString('en')}<br/>\r\n                    New Deaths: {(deaths[deathN]-deaths[deathN-1]).toLocaleString('en')}<br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (props.content['Hospital Type']) { // Hospital Feature\r\n        return (\r\n            <div>\r\n                <h3>{props.content['Name']}</h3>\r\n                <div>\r\n                    <hr />\r\n                    {props.content['Hospital Type']}<br/>\r\n                    {props.content.Address} <br />\r\n                    {props.content.Address_2 && `${props.content.Address_2}${<br/>}`}\r\n                    {props.content.City}, {props.content.State}<br/>\r\n                    {props.content.Zipcode}<br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (props.content.testing_status) { // clinic feature\r\n        return (\r\n            <div>\r\n                <h3>{props.content.name}</h3>\r\n                <div>\r\n                    <hr />\r\n                    {props.content.address}<br/>\r\n                    {props.content.city},{props.content.st_abbr} <br />\r\n                    {props.content.phone}<br/><br/>\r\n                    {props.content.testing_status === 'Yes' ? 'This location offers COVID-19 testing.' : 'Currently, this location does not offer COVID-19 testing.'}<br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    \r\n    } else {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapTooltipContent","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NavItems = styled.ul`\r\n  @media (max-width:1024px){\r\n    display:none !important;\r\n  }\r\n`\r\nconst NavBar = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"nav-logo\">\r\n              <img src={`${process.env.PUBLIC_URL}/favicon/android-icon-192x192.png`} style={{height: '30px', paddingRight: '5px'}} /><a href=\"index.html\">US COVID ATLAS </a>\r\n            </div>\r\n          <NavItems> \r\n            <li><a href=\"data.html\">DATA</a></li>\r\n            <li><a href=\"api.html\">API</a></li>\r\n            <li><a href=\"methods.html\">METHODS</a></li>\r\n            <li><a href=\"faq.html\">FAQ</a></li>\r\n            <li><a href=\"about.html\">INSIGHTS</a></li>\r\n            <li><a href=\"about.html\">ABOUT</a></li>\r\n            <li><a href=\"contact.html\">CONTACT</a></li>\r\n          </NavItems>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport { setNotification } from '../actions'\r\nimport { colors } from '../config'\r\n\r\nconst Notification = styled.div`\r\n    width: 300px;\r\n    max-width: 90vw;\r\n    position: fixed;\r\n    left: 50%;\r\n    top: 50%;\r\n    z-index: 15;\r\n    background: ${colors.gray};\r\n    color: ${colors.white};\r\n    padding: 0;\r\n    overflow: hidden;\r\n    border-radius: 4px;\r\n    padding:20px 30px 20px 20px;\r\n    -moz-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    -webkit-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    box-shadow: 0 0 0 2px rgba(0,0,0,.1);\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    transform:translate(-50%, -50%);\r\n`\r\n\r\nconst CloseTutorial = styled.button`\r\n    position: absolute;\r\n    top: 12px;\r\n    right: 10px;\r\n    font-size: 200%;\r\n    cursor: pointer;\r\n    padding:0;\r\n    background:none;\r\n    outline:none;\r\n    border:none;\r\n    color:white;\r\n`\r\n\r\nconst NotificationBox = () => {\r\n    const dispatch = useDispatch();\r\n    const notification = useSelector(state => state.notification);\r\n\r\n    return (\r\n        notification && \r\n        <Notification>\r\n            {notification}\r\n            <CloseTutorial onClick={() => dispatch(setNotification(null))}>×</CloseTutorial>\r\n        </Notification>\r\n    )\r\n}\r\n\r\nexport default NotificationBox","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { colLookup, getArrayCSV, getGzipData } from '../utils';\r\nimport Tooltip from './tooltip';\r\nimport { StyledDropDown } from '../styled_components';\r\nimport { setVariableParams, setVariableName, setMapParams, setCurrentData, setPanelState, setNotification, storeMobilityData } from '../actions';\r\nimport { fixedScales, colorScales, dataPresets, legacyVariableOrder, colors } from '../config';\r\nimport { settings } from '../config/svg';\r\n\r\nconst VariablePanelContainer = styled.div`\r\n  position:fixed;\r\n  left:0;\r\n  top:50px;\r\n  height:auto;\r\n  min-height:calc(100vh - 50px);\r\n  min-width:200px;\r\n  background-color: ${colors.gray}fa;\r\n  box-shadow: 2px 0px 5px rgba(0,0,0,0.7);\r\n  padding:0;\r\n  box-sizing: border-box;\r\n  transition:250ms all;\r\n  font: 'Lato', sans-serif;\r\n  color:white;\r\n  z-index:50;\r\n  @media (max-width:1024px) {\r\n    min-width:50vw;\r\n  }  \r\n  @media (max-width:600px) {\r\n    width:100%;\r\n    display: ${props => props.otherPanels ? 'none' : 'initial'};\r\n  }\r\n  div.noteContainer {\r\n    position: absolute;\r\n    bottom:0;\r\n    left:0;\r\n    padding:20px;\r\n    box-sizing:border-box;\r\n    background:${colors.gray};\r\n    width:calc(100%);\r\n    box-shadow: 0px -5px 10px rgba(0,0,0,0.25);\r\n    a {  \r\n      color: ${colors.yellow};\r\n      -webkit-text-decoration: none;\r\n      text-decoration: none;\r\n      }\r\n    }\r\n  }\r\n  p.note {\r\n    font-family: 'Lato', sans-serif;\r\n    font-weight:300;\r\n    font-size:90%;\r\n  }\r\n  div.poweredByGeoda {\r\n    color:white;\r\n    width:100%;\r\n    text-align:center;\r\n    @media (max-height:900px){\r\n    }\r\n    a {\r\n      color:white;\r\n      margin:0 auto;\r\n      text-decoration: none;\r\n      letter-spacing: 2px;\r\n      font-size:75%;\r\n      img {\r\n        width:23px;\r\n        height:27px;\r\n        transform: translate(-50%,40%);\r\n      }\r\n    }\r\n  }\r\n  button#showHideLeft {\r\n    position:absolute;\r\n    left:95%;\r\n    top:20px;\r\n    width:40px;\r\n    height:40px;\r\n    box-sizing:border-box;\r\n    padding:0;\r\n    margin:0;\r\n    background-color: ${colors.gray};\r\n    box-shadow: 0px 0px 6px rgba(0,0,0,1);\r\n    outline:none;\r\n    border:none;\r\n    cursor: pointer;\r\n    transition:500ms all;\r\n    svg { \r\n      width:20px;\r\n      height:20px;\r\n      margin:10px 0 0 0;\r\n      @media (max-width:600px){\r\n        width:20px;\r\n        height:20px;\r\n        margin:5px;\r\n      }\r\n      fill:white;\r\n      transform:rotate(0deg);\r\n      transition:500ms all;\r\n      .cls-1 {\r\n        fill:none;\r\n        stroke-width:6px;\r\n        stroke:white;\r\n      }\r\n    }\r\n    :after {\r\n      opacity:0;\r\n      font-weight:bold;\r\n      content: 'Variables';\r\n      color:white;\r\n      position: relative;\r\n      right:-50px;\r\n      top:-22px;\r\n      transition:500ms all;\r\n      z-index:4;\r\n    }\r\n    @media (max-width:768px){\r\n      top:120px;\r\n    }\r\n    @media (max-width:600px) {\r\n      left:90%;\r\n      width:30px;\r\n      height:30px;\r\n      :after {\r\n        display:none;\r\n      }\r\n    }\r\n  }\r\n  button#showHideLeft.hidden {\r\n    left:100%;\r\n    svg {\r\n      transform:rotate(90deg);\r\n    }\r\n    :after {\r\n      opacity:1;\r\n    }\r\n  }\r\n`\r\nconst StyledButtonGroup = styled(ButtonGroup)`\r\n  color:white;\r\n  padding-bottom:20px;\r\n  .MuiButtonGroup-grouped {\r\n    color:white;\r\n    border-color:${colors.white}77;\r\n    &:hover {\r\n      border-color:white;\r\n    }\r\n    &.active {\r\n      background:white;\r\n      color:${colors.gray};\r\n    }\r\n  }\r\n`\r\n\r\nconst TwoUp = styled.div`\r\n  width:100%;\r\n  .MuiFormControl-root {\r\n    width:45%;\r\n    min-width:60px;\r\n    margin-right:5px;\r\n  }\r\n`\r\n\r\nconst ControlsContainer = styled.div`\r\n  max-height:74vh;\r\n  overflow-y:visible;\r\n  box-sizing:border-box;\r\n  padding:20px;\r\n\r\n  @media (max-height:1079px){\r\n    overflow-y:scroll;\r\n    padding:20px 20px 25vh 20px;\r\n  }\r\n  \r\n  @media (max-width:600px) {\r\n    width:100%;\r\n    padding:0 10px 25vh 10px;\r\n  }\r\n`\r\n\r\nconst ListSubheader = styled(MenuItem)`\r\n  font-variant: small-caps;\r\n  font-weight:800;\r\n`\r\n\r\nconst VariablePanel = (props) => {\r\n\r\n  const getGzipAndCentroids = async (gzipUrl, centroidsUrl) => {\r\n    Promise.all([\r\n        getGzipData(gzipUrl),\r\n        getArrayCSV(centroidsUrl)\r\n      ]).then(\r\n        values => dispatch(storeMobilityData({centroids: values[1], flows: values[0]}))\r\n    )\r\n  } \r\n\r\n  const dispatch = useDispatch();    \r\n\r\n  const { cols, currentData, currentVariable, dataParams,\r\n    mapParams, panelState, urlParams, storedMobilityData } = useSelector(state => state);\r\n\r\n  const PresetVariables = {\r\n    \"HEADER:cases\":{},\r\n    \"Confirmed Count\": {\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: null,\r\n        dProperty: null,\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:1,\r\n        scale3D: 100\r\n    },\r\n    \"Confirmed Count per 100K Population\": {\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100000,\r\n        scale3D: 1000\r\n    },\r\n    \"Confirmed Count per Licensed Bed\": {\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'beds',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:1,\r\n        scale3D: 100000\r\n    },\r\n    \"HEADER:deaths\":{},\r\n    \"Death Count\":{\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      scale3D: 10000\r\n        \r\n    }, \r\n    \"Death Count per 100K Population\":{\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'properties',\r\n      dType: 'characteristic',\r\n      dProperty: 'population',\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:100000,\r\n      scale3D: 15000\r\n\r\n    },\r\n    \"Death Count / Confirmed Count\":{\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'cases',\r\n      dType: 'time-series',\r\n      dProperty: null,\r\n      scale:1\r\n\r\n    },\r\n    \"HEADER:community health\":{},\r\n    \"Uninsured % (Community Health Factor)\":{\r\n      numerator: 'chr_health_factors',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(cols, currentData, 'chr_health_factors', 'UnInPrc'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      colorScale: 'uninsured',\r\n      scale3D: 15000\r\n\r\n    },\r\n    \"Over 65 Years % (Community Health Context)\":{\r\n      numerator: 'chr_health_context',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(cols, currentData, 'chr_health_context', 'Over65YearsPrc'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      colorScale: 'over65',\r\n      scale3D: 15000\r\n    },\r\n    \"Life expectancy (Length and Quality of Life)\":{\r\n      numerator: 'chr_life',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(cols, currentData, 'chr_life', 'LfExpRt'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      colorScale: 'lifeExp',\r\n      scale3D: 1000\r\n    }\r\n  }\r\n\r\n  const CountyVariables = {\r\n    \"HEADER:forecasting\":{},\r\n    \"Forecasting (5-Day Severity Index)\": {\r\n      numerator: 'predictions',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(cols, currentData, 'predictions', 'severity_index'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      colorScale: 'forecasting',\r\n      fixedScale: 'forecasting',\r\n      scale3D: 50000\r\n    }\r\n  }\r\n\r\n  const StateVariables = {\r\n    \"HEADER:testing\":{},\r\n    \"7 Day Testing Positivity Rate %\": {\r\n      numerator: 'testing_wk_pos',\r\n      nType: 'characteristic',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: 'testing',\r\n      colorScale: 'testing',\r\n      scale3D: 10000000\r\n    },\r\n    \"7 Day Testing Capacity\": {\r\n      numerator: 'testing_tcap',\r\n      nType: 'characteristic',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: 'testingCap',\r\n      colorScale: 'testingCap',\r\n      scale3D: 3000\r\n    }, \r\n    \"7 Day Confirmed Cases per Testing %\":{\r\n      numerator: 'testing_ccpt',\r\n      nType: 'characteristic',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: 'testing',\r\n      colorScale: 'testing',\r\n      scale3D: 10000000\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (urlParams.var) handleVariable({event: { target: { \r\n      value: legacyVariableOrder[urlParams.src||'county_usfacts.geojson'][urlParams.var]\r\n      }}})\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    if (mapParams.overlay === \"mobility-county\" && storedMobilityData === {}) {\r\n      getGzipAndCentroids(\r\n        `${process.env.PUBLIC_URL}/gz/county_lex_2020-11-28.csv.gz`,\r\n        `${process.env.PUBLIC_URL}/csv/county_centroids.csv`\r\n      )\r\n      console.log('loaded mobility data')\r\n    }\r\n  },[mapParams.overlay])\r\n\r\n  const handleVariable = (event) => {\r\n    let variable = event.target.value;\r\n    let tempParams = PresetVariables[variable] || CountyVariables[variable] || StateVariables[variable] || null;\r\n    \r\n    // dispatch(variableChange({\r\n    //   variable,\r\n    //   mapParams: {\r\n    //     customScale: tempParams.colorScale || '', \r\n    //     fixedScale: tempParams.fixedScale || null\r\n    //   },\r\n    //   variableParams: {\r\n    //     ...tempParams\r\n    //   }\r\n    // }))\r\n\r\n    // transitioning from a static characteristic (null time range)\r\n    // to a time-series data set \r\n    if (dataParams.nType === 'characteristic' && tempParams.nType === 'time-series') tempParams.nRange = 7;\r\n\r\n    // if time series over time series, coordinate index and range\r\n    if (tempParams.nType === 'time-series' && tempParams.dType === 'time-series') {\r\n      tempParams.dIndex = dataParams.nIndex;\r\n      tempParams.dRange = tempParams.nRange || dataParams.nRange;\r\n    }\r\n\r\n    console.log(dataParams.nRange)\r\n    console.log(dataParams.nIndex)\r\n\r\n    dispatch(setVariableParams({...tempParams}))\r\n    dispatch(setVariableName(variable))\r\n    dispatch(setMapParams({customScale: tempParams.colorScale || '', fixedScale: tempParams.fixedScale || null}))\r\n  };\r\n\r\n  const handleDataSource = (event) => {\r\n    let newDataSet = event.target.value\r\n    if ((newDataSet.includes(\"state\") && CountyVariables.hasOwnProperty(currentVariable))||(newDataSet.includes(\"county\") && StateVariables.hasOwnProperty(currentVariable))) {\r\n\r\n      // dispatch(resetVariable({\r\n      //   mapParams: {\r\n      //     customScale: '', \r\n      //     fixedScale: null\r\n      //   },\r\n      //   variableParams: {\r\n      //     ...PresetVariables[\"Confirmed Count per 100K Population\"]\r\n      //   },\r\n      //   variable: \"Confirmed Count per 100K Population\",\r\n      //   notification: `${dataPresets[newDataSet].plainName} data do not have ${currentVariable}. The Atlas will default to Confirmed Cases Per 100k People.`\r\n      // }))\r\n\r\n      dispatch(setMapParams({customScale: '', fixedScale: null}))\r\n      dispatch(setVariableParams({...PresetVariables[\"Confirmed Count per 100K Population\"]}))\r\n      dispatch(setVariableName(\"Confirmed Count per 100K Population\"))\r\n      dispatch(setNotification(`${dataPresets[newDataSet].plainName} data do not have ${currentVariable}. The Atlas will default to Confirmed Cases Per 100k People.`))  \r\n\r\n      setTimeout(() => {dispatch(setCurrentData(newDataSet))}, 250);\r\n      setTimeout(() => {dispatch(setNotification(null))},10000);\r\n    } else {\r\n      dispatch(setCurrentData(newDataSet)); \r\n    }\r\n  };\r\n\r\n\r\n  const handleMapType = (event, newValue) => {\r\n    let nBins = newValue === 'hinge15_breaks' ? 6 : 8\r\n    if (newValue === 'lisa') {\r\n      dispatch(\r\n        setMapParams(\r\n          {\r\n            mapType: newValue,\r\n            nBins: 4,\r\n            bins: fixedScales[newValue],\r\n            colorScale: colorScales[newValue]\r\n          }\r\n        )\r\n      )\r\n    } else {\r\n      dispatch(\r\n        setMapParams(\r\n          {\r\n            nBins,\r\n            mapType: newValue\r\n          }\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n  const handleMapOverlay = (event) =>{\r\n    dispatch(\r\n      setMapParams(\r\n        {\r\n          overlay: event.target.value\r\n        }\r\n      )\r\n    )\r\n  }\r\n\r\n  const handleMapResource = (event) =>{\r\n    dispatch(\r\n      setMapParams(\r\n        {\r\n          resource: event.target.value\r\n        }\r\n      )\r\n    )\r\n  }\r\n\r\n  const handleOpenClose = () => {\r\n    if (panelState.variables) {\r\n      dispatch(setPanelState({variables:false}))\r\n    } else {\r\n      dispatch(setPanelState({variables:true}))\r\n    }\r\n  }\r\n\r\n  const handleVizTypeButton = (vizType) => {\r\n    if (mapParams.vizType !== vizType) {\r\n      dispatch(setMapParams({vizType}))\r\n    }\r\n  }\r\n  return (\r\n    <VariablePanelContainer style={{transform: (panelState.variables ? '' : 'translateX(-100%)')}} otherPanels={panelState.info}>\r\n      <ControlsContainer>\r\n        <h2>Data Sources &amp;<br/> Map Variables</h2>\r\n        <StyledDropDown>\r\n          <InputLabel htmlFor=\"data-select\">Data Source</InputLabel>\r\n          <Select  \r\n            id=\"data-select\"\r\n            value={currentData}\r\n            onChange={handleDataSource}\r\n          >\r\n            \r\n          <ListSubheader disabled>county data</ListSubheader>\r\n            <MenuItem value={'county_usfacts.geojson'} key={'county_usfacts.geojson'}>USA Facts (County)</MenuItem>\r\n            <MenuItem value={'county_nyt.geojson'} key={'county_nyt.geojson'}>New York Times (County)</MenuItem>\r\n            <MenuItem value={'county_1p3a.geojson'} key={'county_1p3a.geojson'}>1point3acres (County)</MenuItem>\r\n            <MenuItem value={'cdc.geojson'} key={'cdc.geojson'}>CDC (County)</MenuItem>\r\n          <ListSubheader disabled>state data</ListSubheader>\r\n            <MenuItem value={'state_usafacts.geojson'} key={'state_usafacts.geojson'}>USA Facts (State)</MenuItem>\r\n            <MenuItem value={'state_nyt.geojson'} key={'state_nyt.geojson'}>New York Times (State)</MenuItem>\r\n          {/* <ListSubheader disabled>global data</ListSubheader>\r\n            <MenuItem value={'global_jhu.geojson'} key={'global_jhu.geojson'}>John Hopkins University (Global)</MenuItem> */}\r\n            \r\n          </Select>\r\n        </StyledDropDown>\r\n        <br />\r\n        <StyledDropDown>\r\n          <InputLabel htmlFor=\"numerator-select\">Select Variable</InputLabel>\r\n          <Select \r\n            value={currentVariable} \r\n            id=\"numerator-select\"\r\n            onChange={handleVariable}\r\n          >\r\n            {\r\n              Object.keys(PresetVariables).map((variable) => {\r\n                if (variable.split(':')[0]===\"HEADER\") {\r\n                  return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                } else {\r\n                  return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                }\r\n              })\r\n            }\r\n            \r\n            {\r\n              currentData.includes(\"county\") && Object.keys(CountyVariables).map((variable) => {\r\n                if (variable.split(':')[0]===\"HEADER\") {\r\n                  return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                } else {\r\n                  return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                }\r\n              })\r\n            }\r\n            \r\n            {\r\n              (currentData.includes(\"state\")||currentData.includes(\"cdc\")) && Object.keys(StateVariables).map((variable) => {\r\n                if (variable.split(':')[0]===\"HEADER\") {\r\n                  return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                } else {\r\n                  return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                }\r\n              })\r\n            }\r\n          </Select>\r\n        </StyledDropDown>\r\n        <br/>\r\n        <StyledDropDown component=\"Radio\" >\r\n          <FormLabel component=\"legend\">Map Type</FormLabel>\r\n          <RadioGroup \r\n            aria-label=\"maptype\" \r\n            name=\"maptype1\" \r\n            onChange={handleMapType} \r\n            value={mapParams.mapType}\r\n            className=\"radioContainer\"\r\n            >\r\n            <FormControlLabel \r\n              value=\"natural_breaks\" \r\n              key=\"natural_breaks\" \r\n              control={<Radio />} \r\n              label=\"Natural Breaks\"\r\n            /><Tooltip id=\"NaturalBreaks\"/>\r\n            <br/>\r\n            <FormControlLabel \r\n              value=\"hinge15_breaks\" \r\n              key=\"hinge15_breaks\" \r\n              control={<Radio />} \r\n              label=\"Box Map\" \r\n            /><Tooltip id=\"BoxMap\"/>\r\n            <br/>\r\n            <FormControlLabel \r\n              value=\"lisa\" \r\n              key=\"lisa\" \r\n              control={<Radio />} \r\n              label=\"Hotspot\" \r\n            /><Tooltip id=\"Hotspot\"/>\r\n            <br/>\r\n          </RadioGroup>\r\n        </StyledDropDown>\r\n        <p>Visualization Type</p>\r\n        <StyledButtonGroup color=\"primary\" aria-label=\"text button group\">\r\n          <Button className={mapParams.vizType === '2D' ? 'active' : ''} data-val=\"2D\" key=\"2D-btn\" onClick={() => handleVizTypeButton('2D')}>2D</Button>\r\n          <Button className={mapParams.vizType === '3D' ? 'active' : ''} data-val=\"3D\" key=\"3D-btn\" onClick={() => handleVizTypeButton('3D')}>3D</Button>\r\n          <Button className={mapParams.vizType === 'cartogram' ? 'active' : ''} data-val=\"cartogram\" key=\"cartogram-btn\" onClick={() => handleVizTypeButton('cartogram')}>Cartogram</Button>\r\n        </StyledButtonGroup>\r\n        <br/>\r\n        <TwoUp>\r\n          <StyledDropDown>\r\n            <InputLabel htmlFor=\"overlay-select\">Overlay</InputLabel>\r\n            <Select  \r\n              id=\"overlay-select\"\r\n              value={mapParams.overlay}\r\n              onChange={handleMapOverlay}\r\n            >\r\n              <MenuItem value=\"\" key={'None'}>None</MenuItem> \r\n              <MenuItem value={'native_american_reservations'} key={'native_american_reservations'}>Native American Reservations</MenuItem>\r\n              <MenuItem value={'segregated_cities'} key={'segregated_cities'}>Hypersegregated Cities<Tooltip id=\"Hypersegregated\"/></MenuItem>\r\n              <MenuItem value={'blackbelt'} key={'blackbelt'}>Black Belt Counties<Tooltip id=\"BlackBelt\" /></MenuItem>\r\n              <MenuItem value={'uscongress-districts'} key={'uscongress-districts'}>US Congressional Districts <Tooltip id=\"USCongress\" /></MenuItem>\r\n              {/* <MenuItem value={'mobility-county'} key={'mobility-county'}>Mobility Flows (County) WARNING BIG DATA</MenuItem> */}\r\n            </Select>\r\n          </StyledDropDown>\r\n          <StyledDropDown>\r\n            <InputLabel htmlFor=\"resource-select\">Resource</InputLabel>\r\n            <Select  \r\n              id=\"resource-select\"\r\n              value={mapParams.resource}\r\n              onChange={handleMapResource}\r\n            >\r\n              <MenuItem value=\"\" key='None'>None</MenuItem> \r\n              <MenuItem value={'clinics_hospitals'} key={'variable1'}>Clinics and Hospitals</MenuItem>\r\n              <MenuItem value={'clinics'} key={'variable2'}>Clinics</MenuItem>\r\n              <MenuItem value={'hospitals'} key={'variable3'}>Hospitals</MenuItem>\r\n            </Select>\r\n          </StyledDropDown>\r\n        </TwoUp>        \r\n      </ControlsContainer>\r\n      <div className=\"noteContainer\">\r\n        <h3>Help us improve the Atlas!</h3>\r\n        <p>\r\n          <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSf0KdYeVyvwnz0RLnZijY3kdyFe1SwXukPc--a1HFPE1NRxyw/viewform?usp=sf_link\" target=\"_blank\" rel=\"noopener noreferrer\">Take the Atlas v2 survey here </a>\r\n          or share your thoughts at <a href=\"mailto:contact@theuscovidatlas.org\" target=\"_blank\" rel=\"noopener noreferrer\">contact@theuscovidatlas.org.</a>\r\n        </p>\r\n        <hr></hr>\r\n        <p className=\"note\">\r\n          Data is updated with freshest available data at 3pm CST daily, at minimum. \r\n          In case of data discrepancy, local health departments are considered most accurate as per CDC recommendations. \r\n          More information on <a href=\"data.html\">data</a>, <a href=\"methods.html\">methods</a>, \r\n          and <a href=\"FAQ.html\">FAQ</a> at main site.\r\n        </p>\r\n        <div className=\"poweredByGeoda\">\r\n            <a href=\"https://geodacenter.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <img src={`${process.env.PUBLIC_URL}/assets/img/geoda-logo.png`} />\r\n              POWERED BY GEODA\r\n            </a>\r\n        </div> \r\n      </div>\r\n      <button onClick={handleOpenClose} id=\"showHideLeft\" className={panelState.variables ? 'active' : 'hidden'}>{settings}</button>\r\n\r\n    </VariablePanelContainer>\r\n  );\r\n}\r\n\r\nexport default VariablePanel;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\nimport Popper from '@material-ui/core/Popper';\r\n\r\nimport { tooltipInfo, colors } from '../config';\r\nimport { setAnchorEl } from '../actions';\r\n\r\nconst TooltipContentDiv = styled(Popper)`\r\n    z-index:10000;\r\n    max-width:200px;\r\n    background:none;\r\n    padding:0;\r\n    margin:0;\r\n    pointer-events: none;\r\n    div.tooltipContentContainer {\r\n        background:black;\r\n        padding:1px 10px;\r\n        margin:0;\r\n        borderRadius: 4px;\r\n        color:white;\r\n        // transform:translateX(65%);\r\n        box-shadow: 0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12);\r\n        pointer-events: all;\r\n        a {\r\n            color: ${colors.yellow};\r\n            text-decoration:none;\r\n        }\r\n    }\r\n`\r\n\r\nconst Popover = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const anchorEl = useSelector(state => state.anchorEl);\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'simple-popper' : undefined;\r\n    \r\n    const handleMouseOver = (event) => {\r\n        dispatch(setAnchorEl(anchorEl))\r\n    }\r\n\r\n    const handleMouseLeave = () => {\r\n        dispatch(setAnchorEl(null))\r\n    }\r\n    \r\n    return (\r\n        <TooltipContentDiv \r\n            id={id} \r\n            open={open} \r\n            anchorEl={anchorEl}\r\n            placement=\"left\"\r\n            disablePortal={false}\r\n            modifiers={{\r\n                flip: {\r\n                enabled: true,\r\n                },\r\n                preventOverflow: {\r\n                enabled: true,\r\n                boundariesElement: 'scrollParent',\r\n                }\r\n            }}\r\n            onMouseEnter={handleMouseOver} \r\n            onMouseLeave={handleMouseLeave}\r\n            >\r\n            <div className=\"tooltipContentContainer\">\r\n                {anchorEl && tooltipInfo[anchorEl.id]}\r\n            </div>\r\n        </TooltipContentDiv>\r\n    )\r\n}\r\n\r\nexport default Popover","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors } from '../config';\r\n\r\nconst PreloaderContainer = styled.div`\r\n    position:fixed;\r\n    width:100%;\r\n    height:100%;\r\n    z-index:500;\r\n    top:0;\r\n    left:0;\r\n    background:${colors.gray};\r\n    transition: 500ms opacity;\r\n    img {\r\n        width:100px;\r\n        height:86px;\r\n        position:fixed;\r\n        left:50%;\r\n        top:50%;\r\n        transform:translate(-50%, -50%);\r\n    }\r\n    @keyframes fade {\r\n        0% {fill-opacity:1};\r\n        50% {fill-opacity:0.25};\r\n        100% {fill-opacity:1};\r\n    }\r\n    &.fadeOut {\r\n        opacity:0;\r\n        pointer-events:none;\r\n    }\r\n`;\r\n\r\nconst Preloader = ( props ) => {\r\n    const [isHidden, setIsHidden] = useState(false);\r\n\r\n    if (props.loaded) {\r\n        setTimeout(() => {\r\n            setIsHidden(true)\r\n        }, 500)\r\n    }\r\n\r\n    return (\r\n        <PreloaderContainer className={props.loaded ? 'fadeOut' : ''} style={{display: (isHidden ? 'none' : 'initial')}} id=\"preloaderContainer\">\r\n            <img src={`${process.env.PUBLIC_URL}/assets/img/preloader.gif`} alt=\"Preloader\" />\r\n        </PreloaderContainer>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import React, { useState, useEffect } from 'react';\r\nimport {useSelector} from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nconst ResizeButton = styled.button`\r\n    position:absolute;\r\n    right:5px;\r\n    bottom:10px;\r\n    background:none;\r\n    outline:none;\r\n    border:none;\r\n    transform: rotate(90deg);\r\n    cursor:nw-resize;\r\n    display:${props => props.notScaleable ? 'none' : 'initial'};\r\n`\r\n\r\nconst Scaleable = (props) => {\r\n    \r\n    const [width, setWidth] = useState(props.defaultWidth);\r\n    const [height, setHeight] = useState(props.defaultHeight);\r\n    const [currXYPos, setCurrXYPos] = useState(false);\r\n\r\n    const listener = (e) => {\r\n        setWidth(prevWidth => prevWidth+e.movementX)\r\n        setHeight(prevHeight => prevHeight+e.movementY)\r\n    }\r\n\r\n    const touchListener = (e) => {\r\n        setWidth(prev => (e?.targetTouches[0]?.clientX-currXYPos[0]) || prev)\r\n        setHeight(prev => (e?.targetTouches[0]?.clientY-currXYPos[1]) || prev)\r\n    }\r\n\r\n    const removeListener = () => {\r\n        window.removeEventListener('mousemove', listener)\r\n        window.removeEventListener('mouseup', removeListener)\r\n    }\r\n\r\n    const removeTouchListener = () => {\r\n        window.removeEventListener('touchmove', touchListener);\r\n        window.removeEventListener('touchend', removeTouchListener);\r\n    }\r\n    \r\n    const handleDown = () => {\r\n        window.addEventListener('mousemove', listener)\r\n        window.addEventListener('mouseup', removeListener)\r\n    }\r\n\r\n    const handleTouch = (e) => {\r\n        setCurrXYPos([+e.target.parentNode.parentNode.parentNode.style.left.slice(0,-2), +e.target.parentNode.parentNode.parentNode.style.top.slice(0,-2)])\r\n        window.addEventListener('touchmove', touchListener)\r\n        window.addEventListener('touchend', removeTouchListener)\r\n    }\r\n    \r\n    const open = useSelector(state => state.panelState[props.title]);\r\n\r\n    useEffect(() => {\r\n        setWidth(props.defaultWidth)\r\n        setHeight(props.defaultHeight)\r\n    }, [open, props.defaultHeight, props.defaultWidth])\r\n\r\n    return (\r\n        <div style={{width: width, height: height, minHeight: props.minHeight, minWidth: props.minWidth}}>\r\n            {props.content}\r\n            <ResizeButton \r\n                id=\"resize\"\r\n                notScaleable={props.notScaleable}\r\n                onMouseDown={handleDown}\r\n                onTouchStart={handleTouch}\r\n                style={{zIndex:10}}\r\n            >\r\n                <svg height='20px' width='20px'  fill=\"white\" viewBox=\"0 0 8.4666667 8.4666667\" x=\"0px\" y=\"0px\"><g transform=\"translate(0,-288.53333)\"><path d=\"m 5.5562495,289.59166 v 0.52916 h 0.94878 l -1.665015,1.66502 0.3741367,0.37414 1.665015,-1.66502 v 0.94878 h 0.5291667 v -1.85208 z m -2.303735,3.78168 -1.665015,1.66501 v -0.94878 H 1.0583328 v 1.85209 h 1.8520834 v -0.52917 h -0.94878 l 1.665015,-1.66501 z\"></path></g></svg>\r\n            </ResizeButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scaleable;","// this components houses the slider, legend, and bottom dock chart\r\nimport React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { DateSlider } from '../components';\r\nimport { colors } from '../config';\r\n\r\n// Styled components\r\nconst TopDrawer = styled.div`\r\n    position: fixed;\r\n    top:50px;\r\n    left:calc(50% - 25px);\r\n    background:${colors.gray};\r\n    transform:translateX(-50%);\r\n    width:90vw;\r\n    max-width: 500px;\r\n    box-sizing: border-box;\r\n    padding:0;\r\n    margin:0;\r\n    box-shadow: 0px 0px 5px rgba(0,0,0,0.7);\r\n    border-radius:0 0 0.5vh 0.5vh ;\r\n    transition:250ms all;\r\n    hr {\r\n        opacity:0.5;\r\n    }\r\n    div.MuiGrid-item {\r\n        padding:0;\r\n    }\r\n    \r\n    @media (max-width:768px){\r\n        width:100%;\r\n        max-width:100%;\r\n        padding:0;\r\n        left:0;\r\n        transform:none;\r\n    }\r\n    @media (max-width:750px) and (orientation: landscape) {\r\n        // bottom all the way down for landscape phone\r\n    }\r\n`\r\nconst TopPanel = () => {\r\n    \r\n    return (\r\n        <TopDrawer>\r\n            <DateSlider />\r\n        </TopDrawer>\r\n    )\r\n\r\n}\r\n\r\nexport default TopPanel","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as jsgeoda from 'jsgeoda';\r\n\r\n// Helper and Utility functions //\r\n// first row: data loading\r\n// second row: data parsing for specific outputs\r\n// third row: data accessing\r\nimport { \r\n  getParseCSV, mergeData, getColumns, findDates, loadJson,\r\n  getDataForBins, getDataForCharts, getDataForLisa, \r\n  getLisaValues, getVarId, getCartogramValues } from './utils';\r\n\r\n// Actions -- Redux state manipulation following Flux architecture //\r\n// first row: data storage\r\n// second row: data and metadata handling \r\n// third row: map and variable parameters\r\nimport { \r\n  dataLoad, dataLoadExisting, storeLisaValues, storeCartogramData,\r\n  setCentroids, setMapParams, setNewBins, setUrlParams, setPanelState } from './actions';\r\n\r\nimport { Map, NavBar, VariablePanel, BottomPanel,  TopPanel, Preloader,\r\n  DataPanel, MainLineChart, Scaleable, Draggable, InfoBox,\r\n  NotificationBox, Popover } from './components';  \r\n\r\nimport { colorScales, fixedScales, dataPresets, \r\n  legacyOverlayOrder, legacyResourceOrder, legacySourceOrder } from './config';\r\n\r\n// Main function, App. This function does 2 things:\r\n// 1: App manages the majority of the side effects when the state changes.\r\n//    This takes the form of React's UseEffect hook, which listens\r\n//    for changes in the state and then performs the functions in the hook.\r\n//    App listens for different state changes and then calculates the relevant\r\n//    side effects (such as binning calculations and GeoDa functions, column parsing)\r\n//    and then dispatches new data to the store.\r\n// 2: App assembles all of the components together and sends Props down\r\n//    (as of 12/1 only Preloader uses props and is a higher order component)\r\n\r\n\r\nfunction App() {\r\n\r\n  // static variables for floating panel sizing\r\n  let [ defaultX, defaultXLong, defaultY, defaultWidth, defaultWidthLong, defaultHeight,\r\n    minHeight, minWidth] = window.innerWidth <= 1024 ? \r\n    [window.innerWidth*.1, window.innerWidth*.1, window.innerHeight*.25, window.innerWidth*.8, window.innerWidth*.8, window.innerHeight*.4, window.innerHeight*.2, window.innerWidth*.5] : \r\n    [window.innerWidth-400, window.innerWidth-575, 75, 300, 450, 300, 200, 200]\r\n\r\n\r\n  // These selectors access different pieces of the store. While App mainly\r\n  // dispatches to the store, we need checks to make sure side effects\r\n  // are OK to trigger. Issues arise with missing data, columns, etc.\r\n  const {storedData, storedGeojson, storedLisaData, storedCartogramData,\r\n    currentData, cols, dates, mapParams, dataParams, \r\n    startDateIndex, mapLoaded } = useSelector(state => state);\r\n  \r\n  // gda_proxy is the WebGeoda proxy class. Generally, having a non-serializable\r\n  // data in the state is poor for performance, but the App component state only\r\n  // contains gda_proxy.\r\n  const [gda_proxy, set_gda_proxy] = useState(null);\r\n  const dispatch = useDispatch();  \r\n  \r\n  // // Dispatch helper functions for side effects and data handling\r\n  // Get centroid data for cartogram\r\n  // const getCentroids = (geojson, gda_proxy) =>  dispatch(setCentroids(gda_proxy.GetCentroids(geojson), geojson))\r\n  \r\n  // Main data loader\r\n  // This functions asynchronously accesses the Geojson data and CSVs\r\n  //   then performs a join and loads the data into the store\r\n  const loadData = async (params, gda_proxy) => {\r\n    // destructure parameters\r\n    const { geojson, csvs, joinCols, tableNames, accumulate } = params\r\n\r\n    // promise all data fetching - CSV and Json\r\n    const csvPromises = csvs.map(csv => \r\n      getParseCSV(\r\n        `${process.env.PUBLIC_URL}/csv/${csv}.csv`, \r\n        joinCols[1], \r\n        accumulate.includes(csv)\r\n      ).then(result => {return result}))\r\n\r\n    Promise.all([\r\n      loadJson(`${process.env.PUBLIC_URL}/geojson/${geojson}`, gda_proxy).then(result => {return result}),\r\n      ...csvPromises\r\n    ]).then(values => {\r\n      // store geojson lookup table\r\n      // merge data and get results\r\n      let tempData = mergeData(values[0]['data'], joinCols[0], values.slice(1,), tableNames, joinCols[1]);\r\n      let ColNames = getColumns(values.slice(1,), tableNames);\r\n      let tempDates = findDates(ColNames.cases);\r\n      let chartData = getDataForCharts(tempData,'cases',tempDates[1],tempDates[0]);\r\n      let binData = getDataForBins(tempData, {...dataParams, nIndex: null});\r\n      // calculate breaks\r\n      let nb = gda_proxy.custom_breaks(\r\n        geojson, \r\n        mapParams.mapType,\r\n        mapParams.nBins,\r\n        null, \r\n        binData\r\n      );\r\n\r\n      // store data, data name, and column names\r\n      dispatch(\r\n        dataLoad({\r\n          storeData: {\r\n            data: tempData, \r\n            name: geojson\r\n          },\r\n          currentData: geojson,\r\n          columnNames: {\r\n            data: ColNames,\r\n            name: geojson\r\n          },\r\n          storeGeojson: {\r\n            data: values[0]['geoidIndex'],\r\n            name: geojson\r\n          },\r\n          chartData: chartData,\r\n          mapParams: {\r\n            bins: {\r\n              bins: mapParams.mapType === \"natural_breaks\" ? nb.bins : ['Lower Outlier','< 25%','25-50%','50-75%','>75%','Upper Outlier'],\r\n              breaks: [-Math.pow(10, 12), ...nb.breaks.slice(1,-1), Math.pow(10, 12)]\r\n            },\r\n            colorScale: colorScales[mapParams.customScale || mapParams.mapType]\r\n          },\r\n          dates: {\r\n            data:tempDates[0],\r\n            name:geojson\r\n          },\r\n          currDate: tempDates[0][tempDates.length-1],\r\n          startDateIndex: tempDates[1],\r\n          variableParams: {\r\n            nIndex: ColNames['cases'].length-1,\r\n            binIndex: ColNames['cases'].length-1\r\n          }\r\n        })\r\n      )\r\n    })\r\n  }\r\n\r\n  const updateBins = () => {\r\n    if (gda_proxy !== null && storedData.hasOwnProperty(currentData) && mapParams.mapType !== \"lisa\" && mapParams.binMode !== 'dynamic'){\r\n      if (mapParams.fixedScale === null || mapParams.mapType !== 'natural_breaks') {\r\n        let nb = gda_proxy.custom_breaks(\r\n          currentData, \r\n          mapParams.mapType, \r\n          mapParams.nBins, \r\n          null, \r\n          getDataForBins( storedData[currentData], {...dataParams, nIndex: null} )\r\n        )\r\n        \r\n        dispatch(\r\n          setMapParams({\r\n            bins: {\r\n              bins: mapParams.mapType === 'natural_breaks' ? nb.bins : ['Lower Outlier','< 25%','25-50%','50-75%','>75%','Upper Outlier'],\r\n              breaks: [-Math.pow(10, 12), ...nb.breaks.slice(1,-1), Math.pow(10, 12)]\r\n            },\r\n            colorScale: mapParams.mapType === 'natural_breaks' ? colorScales[mapParams.customScale || mapParams.mapType] : colorScales[mapParams.mapType || mapParams.customScale]\r\n          })\r\n        )\r\n      } else {\r\n        dispatch(\r\n          setMapParams({\r\n            bins: fixedScales[mapParams.fixedScale],\r\n            colorScale: colorScales[mapParams.fixedScale]\r\n          })\r\n        )\r\n      }\r\n    }\r\n  }\r\n  // After runtime is initialized, this loads in gda_proxy to the state\r\n  // TODO: Recompile WebGeoda and load it into a worker\r\n  useEffect(() => {\r\n    \r\n    let paramsDict = {}; \r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    for (const [key, value] of urlParams ) { paramsDict[key] = value; }\r\n\r\n    dispatch(\r\n      setUrlParams({\r\n        currentData: paramsDict['src'] ? legacySourceOrder[decodeURI(paramsDict['src'])] : 'county_usfacts.geojson',\r\n        paramsDict,\r\n        mapParams: {\r\n          vizType: paramsDict['cartogram'] ? 'cartogram' : paramsDict['3d'] ? '3D' : '2D',\r\n          mapType: paramsDict['mthd'] ? decodeURI(paramsDict['mthd']) : 'natural_breaks',\r\n          overlay: paramsDict['ovr'] !== undefined ? legacyOverlayOrder[paramsDict['ovr']] : '',\r\n          resource: paramsDict['res'] !== undefined ? legacyResourceOrder[paramsDict['res']] : ''\r\n        }\r\n      })\r\n    );\r\n\r\n    if (window.innerWidth <= 1024) {\r\n      dispatch(setPanelState({\r\n        variables:false,\r\n        info:false,\r\n        tutorial:false,\r\n        lineChart: false\r\n      }))\r\n    }\r\n\r\n    const newGeoda = async () => {\r\n      let geoda = await jsgeoda.New();\r\n      set_gda_proxy(geoda);\r\n    }\r\n\r\n    newGeoda()\r\n  },[])\r\n\r\n\r\n  // On initial load and after gda_proxy has been initialized, this loads in the default data sets (USA Facts)\r\n  // Otherwise, this side-effect loads the selected data.\r\n  // Each conditions checks to make sure gda_proxy is working.\r\n  useEffect(() => {\r\n    if (gda_proxy === null) {\r\n      return;\r\n    } else if (storedData === {}) {\r\n      loadData(\r\n        dataPresets[currentData],\r\n        gda_proxy\r\n      )\r\n    } else if (storedData[currentData] === undefined) {\r\n      loadData(\r\n        dataPresets[currentData],\r\n        gda_proxy\r\n      )\r\n    } else if (cols[currentData] !== undefined) {\r\n      let dateIndex = findDates(cols[currentData].cases)[1];\r\n      let dataLength = cols[currentData].cases.length;\r\n\r\n      dispatch(\r\n        dataLoadExisting({\r\n          currDate: dates[currentData][dates[currentData].length-1],\r\n          startDateIndex: dateIndex,\r\n          variableParams: {\r\n            nIndex: dataLength-1,\r\n            binIndex: dataLength-1\r\n          },\r\n          chartData: getDataForCharts(storedData[currentData],'cases',dateIndex,dates[currentData]),\r\n        })\r\n      )\r\n      \r\n      updateBins();\r\n    }\r\n  },[gda_proxy, currentData])\r\n\r\n  // This listens for gda_proxy events for LISA and Cartogram calculations\r\n  // Both of these are computationally heavy.\r\n  useEffect(() => {\r\n    if (gda_proxy !== null && mapParams.mapType === \"lisa\"){\r\n      let tempId = getVarId(currentData, dataParams)\r\n      if (!(storedLisaData.hasOwnProperty(tempId))) {\r\n        dispatch(\r\n          storeLisaValues(\r\n            getLisaValues(\r\n              gda_proxy, \r\n              currentData, \r\n              getDataForLisa(\r\n                storedData[currentData], \r\n                dataParams,\r\n                storedGeojson[currentData].indexOrder\r\n              )\r\n            ),\r\n            tempId\r\n          )\r\n        )\r\n      }\r\n    } \r\n    if (gda_proxy !== null && mapParams.vizType === 'cartogram'){\r\n      let tempId = getVarId(currentData, dataParams)\r\n      if (!(storedCartogramData.hasOwnProperty(tempId))) {\r\n        dispatch(\r\n          storeCartogramData(\r\n            getCartogramValues(\r\n              gda_proxy, \r\n              currentData, \r\n              getDataForLisa( storedData[currentData], dataParams, storedGeojson[currentData].indexOrder )\r\n            ),\r\n            tempId\r\n          )\r\n        )\r\n      }\r\n    }\r\n  }, [dataParams, mapParams])\r\n\r\n  // Trigger on parameter change for metric values\r\n  // Gets bins and sets map parameters\r\n  useEffect(() => {\r\n    console.log(dataParams)\r\n    updateBins();\r\n  }, [currentData, dataParams.numerator, dataParams.nProperty, \r\n    dataParams.nRange, dataParams.denominator, dataParams.dProperty,\r\n    dataParams.dRange, dataParams.scale, mapParams.mapType]\r\n  )\r\n\r\n  // trigger on date (index) change for dynamic binning\r\n  useEffect(() => {\r\n    if (gda_proxy !== null && mapParams.binMode === 'dynamic' && currentData !== '' && mapParams.mapType !== 'lisa'){\r\n      let nb = gda_proxy.custom_breaks(\r\n        currentData, \r\n        mapParams.mapType,\r\n        mapParams.nBins,\r\n        null, \r\n        getDataForBins( storedData[currentData], dataParams ), \r\n      );\r\n      dispatch(\r\n        setNewBins({\r\n          mapParams: {\r\n            bins: {\r\n              bins: mapParams.mapType === \"natural_breaks\" ? nb.bins : ['Lower Outlier','< 25%','25-50%','50-75%','>75%','Upper Outlier'],\r\n              breaks: [-Math.pow(10, 12), ...nb.breaks.slice(1,-1), Math.pow(10, 12)]\r\n            },\r\n            colorScale: colorScales[mapParams.customScale || mapParams.mapType]\r\n          },\r\n          variableParams: {\r\n            binIndex: dataParams.nIndex, \r\n          }\r\n        })\r\n      )\r\n    }\r\n\r\n  }, [dataParams.nIndex, dataParams.dIndex, mapParams.binMode])\r\n  \r\n\r\n  // default width handlers on resize\r\n  useEffect(() => {\r\n    [ defaultX, defaultXLong, defaultY, defaultWidth, defaultWidthLong, defaultHeight,\r\n      minHeight, minWidth] = window.innerWidth <= 1024 ? \r\n      [window.innerWidth*.1, window.innerWidth*.1, window.innerHeight*.25, window.innerWidth*.8, window.innerWidth*.8, window.innerHeight*.4, window.innerHeight*.2, window.innerWidth*.5] : \r\n      [window.innerWidth-400, window.innerWidth-575, 75, 300, 450, 300, 200, 200]\r\n  }, [window.innerHeight, window.innerWidth])\r\n  // const dragHandlers = {onStart: this.onStart, onStop: this.onStop};\r\n\r\n  const renderLoader = () => <p>Loading</p>;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Preloader loaded={mapLoaded} />\r\n      <NavBar />\r\n      <header className=\"App-header\" style={{position:'fixed', left: '20vw', top:'100px', zIndex:10}}>\r\n        {/* <button onClick={() => console.log(gda_proxy.wasm.GetNeighbors('county_usfacts.geojson','w_queencounty_usfacts.geojson100',100))}>LOG NEIGHBORS</button> */}\r\n        {/* <button onClick={() => updateBins()}>update bins</button>\r\n        <button onClick={() => console.log(dataParams)}>data params</button> */}\r\n      </header>\r\n      <div id=\"mainContainer\">\r\n        <Map />\r\n        <TopPanel />\r\n        <BottomPanel />\r\n        <VariablePanel />\r\n        <DataPanel />\r\n        <Popover />\r\n        <NotificationBox />  \r\n        <Draggable \r\n          z={9}\r\n          defaultX={defaultXLong}\r\n          defaultY={defaultY}\r\n          title=\"lineChart\"\r\n          content={\r\n          <Scaleable \r\n            content={\r\n              <MainLineChart />\r\n            } \r\n            title=\"lineChart\"\r\n            defaultWidth={defaultWidthLong}\r\n            defaultHeight={defaultHeight}\r\n            minHeight={minHeight}\r\n            minWidth={minWidth} />\r\n        }/>      \r\n        <Draggable \r\n          z={10}\r\n          defaultX={defaultX}\r\n          defaultY={defaultY+20}\r\n          title=\"tutorial\"\r\n          content={\r\n          <Scaleable \r\n            notScaleable={true}\r\n            content={\r\n              <InfoBox />\r\n            } \r\n            title=\"tutorial\"\r\n            defaultWidth={defaultWidth}\r\n            defaultHeight={defaultHeight}\r\n            minHeight={minHeight}\r\n            minWidth={minWidth} />\r\n        }/>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","export const INITIAL_STATE = {\r\n  geodaProxy: null,\r\n  storedData: {},\r\n  storedGeojson: {},\r\n  storedLisaData: {},\r\n  storedCartogramData: {},\r\n  storedCSV: {},\r\n  storedMobilityData: {},\r\n  cols: {},\r\n  currentData: 'county_usfacts.geojson',\r\n  chartData: [{}],\r\n  centroids: {},\r\n  dates: {},\r\n  currDate: '',\r\n  currDateIndex: '',\r\n  startDateIndex: '',\r\n  currentVariable: 'Confirmed Count per 100K Population',\r\n  currentMethod: 'natural_breaks',\r\n  currentOverlay: '',\r\n  currentResource: '',\r\n  dataParams: {\r\n    numerator: 'cases',\r\n    nType: 'time-series',\r\n    nProperty: null,\r\n    nRange: 7,\r\n    nIndex:null,\r\n    denominator: 'properties',\r\n    dType: 'characteristic',\r\n    dProperty: 'population',\r\n    dRange:null,\r\n    dIndex:null,\r\n    scale:100000,\r\n    binIndex: '',\r\n    scale3D: 1000\r\n  },\r\n  mapParams: {\r\n    mapType: 'natural_breaks',\r\n    bins: {\r\n      bins: [],\r\n      breaks: []\r\n    },\r\n    binMode: '',\r\n    fixedScale: null,\r\n    nBins: 8,\r\n    vizType: '2D',\r\n    activeGeoid: '',\r\n    overlay: '',\r\n    resource: '',\r\n    colorScale: [\r\n      [240,240,240],\r\n      [255,255,204],\r\n      [255,237,160],\r\n      [254,217,118],\r\n      [254,178,76],\r\n      [253,141,60],\r\n      [252,78,42],\r\n      [227,26,28],\r\n      [177,0,38],\r\n    ],\r\n  },\r\n  panelState: {\r\n    variables:true,\r\n    info:false,\r\n    tutorial:false,\r\n    lineChart:true,\r\n  },\r\n  storedRange: null,\r\n  currentGeoid: '',\r\n  sidebarData: {},\r\n  anchorEl: null,\r\n  mapLoaded: false,\r\n  notification: null,\r\n  urlParams: {}\r\n};","import { INITIAL_STATE } from '../constants/defaults';\r\n\r\nvar reducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case 'DATA_LOAD':\r\n            // main new data loading reducer\r\n            // I: Destructure payload (load) object\r\n            let { storeData, currentData, columnNames, \r\n                storeGeojson, chartData, mapParams, \r\n                dates, currDate, startDateIndex, variableParams} = action.payload.load;\r\n\r\n            // II: Create copies of existing state objects.\r\n            // This is necessary to avoid mutating the state\r\n            let [\r\n                    dataObj, colDataObj, geoDataObj, \r\n                    mapParamsDataObj, datesDataObj, \r\n                    variableParamsDataObj, panelsDataObj\r\n                ] = [\r\n                    {\r\n                    ...state.storedData\r\n                }, {\r\n                    ...state.cols\r\n                }, {\r\n                    ...state.storedGeojson,\r\n                }, {\r\n                    ...state.mapParams,\r\n                    ...mapParams\r\n                }, {\r\n                    ...state.dates\r\n                }, {\r\n                    ...state.dataParams,\r\n                    ...variableParams\r\n                }, {\r\n                    ...state.panelState,\r\n                    info: false\r\n                }];\r\n\r\n                dataObj[storeData.name] = storeData.data;\r\n                colDataObj[columnNames.name] = columnNames.data;\r\n                geoDataObj[storeGeojson.name] = storeGeojson.data;\r\n                datesDataObj[dates.name] = dates.data;\r\n            return {\r\n                ...state,\r\n                storedData: dataObj,\r\n                cols: colDataObj,\r\n                storedGeojson: geoDataObj,\r\n                mapParams: mapParamsDataObj,\r\n                dates: datesDataObj,\r\n                dataParams: variableParamsDataObj,\r\n                currentData,\r\n                chartData,\r\n                currDate,\r\n                startDateIndex,\r\n                sidebarData: {},\r\n                panelState: panelsDataObj\r\n\r\n            };\r\n        case 'DATA_LOAD_EXISTING':\r\n            \r\n            let [ variableParamsExDataObj, panelsExDataObj ] \r\n                = [\r\n                    {\r\n                    ...state.dataParams,\r\n                    ...action.payload.load.variableParams\r\n                }, {\r\n                    ...state.panelState,\r\n                    info: false\r\n                }];\r\n\r\n            return {\r\n                ...state,\r\n                dataParams: variableParamsExDataObj,\r\n                chartData: action.payload.load.chartData,\r\n                currDate: action.payload.load.currDate,\r\n                startDateIndex: action.payload.load.startDateIndex,\r\n                sidebarData: {},\r\n                panelState: panelsExDataObj\r\n\r\n            };\r\n        case 'SET_NEW_BINS':\r\n            let [ binsVariableParams, binsMapParams] \r\n                = [{\r\n                    ...state.dataParams,\r\n                    ...action.payload.load.variableParams\r\n                },{\r\n                    ...state.mapParams,\r\n                    ...action.payload.load.mapParams\r\n                }]\r\n            return {\r\n                ...state,\r\n                dataParams: binsVariableParams,\r\n                mapParams: binsMapParams\r\n            }\r\n        case 'SET_GEOID': \r\n            return {\r\n                ...state,\r\n                currentGeoid: action.payload.geoid\r\n            };\r\n        case 'SET_STORED_DATA':\r\n            let obj = {\r\n                ...state.storedData,\r\n            }\r\n            obj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedData: obj\r\n            };\r\n        case 'SET_STORED_GEOJSON':\r\n            let geojsonObj = {\r\n                ...state.storedGeojson,\r\n            }\r\n            geojsonObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedGeojson: geojsonObj\r\n            };\r\n        case 'SET_STORED_LISA_DATA':\r\n            let lisaObj = {\r\n                ...state.storedLisaData,\r\n            }\r\n            lisaObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedLisaData: lisaObj\r\n            };\r\n        case 'SET_STORED_CARTOGRAM_DATA':\r\n            let cartoObj = {\r\n                ...state.storedCartogramData,\r\n            }\r\n            cartoObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedCartogramData: cartoObj\r\n            };\r\n        case 'SET_STORED_MOBILITY_DATA':\r\n            return {\r\n                ...state,\r\n                storedMobilityData: action.payload.data\r\n            }\r\n        case 'SET_CENTROIDS':\r\n            let centroidsObj = {\r\n                ...state.centroids,\r\n            }\r\n            centroidsObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                centroids: centroidsObj\r\n            };\r\n        case 'SET_CURRENT_DATA':\r\n            return {\r\n                ...state,\r\n                currentData: action.payload.data\r\n            }\r\n        case 'SET_GEODA_PROXY':\r\n            return {\r\n                ...state,\r\n                geodaProxy: action.payload.proxy\r\n            }\r\n        case 'SET_DATES':\r\n            let datesObj = {\r\n                ...state.dates\r\n            }\r\n            datesObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                dates: datesObj\r\n            }\r\n        case 'SET_DATA_FUNCTION':\r\n            return {\r\n                ...state,\r\n                currentDataFn: action.payload.fn\r\n            }\r\n        case 'SET_COLUMN_NAMES':\r\n            let colObj = {\r\n                ...state.cols\r\n            }\r\n            colObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                cols: colObj\r\n            }\r\n        case 'SET_CURR_DATE':\r\n            return {\r\n                ...state,\r\n                currDate: action.payload.date\r\n            }\r\n        case 'SET_DATE_INDEX':\r\n            return {\r\n                ...state,\r\n                currDateIndex: action.payload.index\r\n            }\r\n        case 'SET_START_DATE_INDEX':\r\n            return {\r\n                ...state,\r\n                startDateIndex: action.payload.index\r\n            }\r\n        case 'SET_BINS':\r\n            let binsObj = {};\r\n            binsObj['bins'] =  action.payload.bins;\r\n            binsObj['breaks'] =  action.payload.breaks;\r\n            return {\r\n                ...state,\r\n                bins: binsObj\r\n            }\r\n        case 'SET_3D':\r\n            return {\r\n                ...state,\r\n                use3D: !state.use3D\r\n            }\r\n        case 'SET_DATA_SIDEBAR':\r\n            return {\r\n                ...state,\r\n                sidebarData: action.payload.data\r\n            }\r\n        case 'INCREMENT_DATE':\r\n            let dateObj = {\r\n                ...state.dataParams\r\n            }\r\n            if (action.payload.index+state.dataParams.nIndex > state.dates[state.currentData].length) {\r\n                dateObj.nIndex = state.startDateIndex;\r\n                dateObj.dIndex = state.startDateIndex;\r\n                return {\r\n                    ...state,\r\n                    dataParams:dateObj\r\n                }\r\n            } else {\r\n                dateObj.nIndex = dateObj.nIndex + action.payload.index;\r\n                dateObj.dIndex = dateObj.dIndex + action.payload.index;\r\n                return {\r\n                    ...state,\r\n                    dataParams:dateObj\r\n                }\r\n            }\r\n        case 'SET_VARIABLE_PARAMS':\r\n            let paramObj = {\r\n                ...state.dataParams,\r\n                ...action.payload.params\r\n            }\r\n\r\n            if (paramObj.nType === 'time-series' && paramObj.nIndex === null) {\r\n                paramObj.nIndex = state.storedIndex;\r\n                paramObj.nRange = state.storedRange;\r\n            }\r\n            if (paramObj.dType === 'time-series' && paramObj.dIndex === null) {\r\n                paramObj.dIndex = state.storedIndex;\r\n                paramObj.dRange = state.storedRange;\r\n            }\r\n            if (paramObj.nType === 'characteristic' && state.dataParams.nType === 'time-series') {\r\n                return {\r\n                    ...state,\r\n                    storedIndex: state.dataParams.nIndex,\r\n                    storedRange: state.dataParams.nRange,\r\n                    dataParams: paramObj,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    dataParams: paramObj \r\n                }\r\n            }\r\n        case 'SET_MAP_PARAMS':\r\n            let mapParamObj = {\r\n                ...state.mapParams,\r\n                ...action.payload.params\r\n            }\r\n            return {\r\n                ...state,\r\n                mapParams: mapParamObj \r\n            }\r\n        case 'SET_PANELS':\r\n            let panelsObj = {\r\n                ...state.panelState,\r\n                ...action.payload.params\r\n            }\r\n            return {\r\n                ...state,\r\n                panelState: panelsObj \r\n            }\r\n        case 'SET_VARIABLE_NAME':\r\n            return {\r\n                ...state,\r\n                currentVariable: action.payload.name\r\n            }\r\n        case 'SET_CHART_DATA':\r\n            return {\r\n                ...state,\r\n                chartData: action.payload.data\r\n            }\r\n        case 'SET_ANCHOR_EL':\r\n            return {\r\n                ...state,\r\n                anchorEl: action.payload.anchorEl\r\n            }\r\n        case 'SET_MAP_LOADED':\r\n            return {\r\n                ...state,\r\n                mapLoaded: action.payload.loaded\r\n            }\r\n        case 'SET_NOTIFICATION':\r\n            return {\r\n                ...state,\r\n                notification: action.payload.info\r\n            }\r\n        case 'SET_URL_PARAMS':\r\n            let urlMapParamsObj = {\r\n                ...state.mapParams,\r\n                ...action.payload.load.mapParams\r\n            }\r\n            return {\r\n                ...state,\r\n                currentData: action.payload.load.currentData,\r\n                urlParams: action.payload.load.paramsDict,\r\n                mapParams: urlMapParamsObj\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { createStore} from 'redux';\r\nimport reducer from './reducers';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport './mapbox.css';\r\nimport WebFont from 'webfontloader';\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\n\r\nWebFont.load({\r\n  google: {\r\n    families: ['Lato:300,400,700,900', 'Playfair Display:ital', 'sans-serif']\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nregisterServiceWorker();\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}